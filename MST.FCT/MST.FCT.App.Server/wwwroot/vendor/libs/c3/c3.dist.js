(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./wwwroot/vendor/libs/c3/c3.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/c3/c3.js":
/*!*******************************!*\
  !*** ./node_modules/c3/c3.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* @license C3.js v0.7.20 | (c) C3 Team and other contributors | http://c3js.org/ */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  function ChartInternal(api) {\r\n      var $$ = this;\r\n      // Note: This part will be replaced by rollup-plugin-modify\r\n      // When bundling esm output. Beware of changing this line.\r\n      // TODO: Maybe we should check that the modification by rollup-plugin-modify\r\n      // is valid during unit tests.\r\n      $$.d3 = window.d3\r\n          ? window.d3\r\n          :  true\r\n              ? __webpack_require__(/*! d3 */ \"d3\")\r\n              : undefined;\r\n      $$.api = api;\r\n      $$.config = $$.getDefaultConfig();\r\n      $$.data = {};\r\n      $$.cache = {};\r\n      $$.axes = {};\r\n  }\n\n  /**\r\n   * The Chart class\r\n   *\r\n   * The methods of this class is the public APIs of the chart object.\r\n   */\r\n  function Chart(config) {\r\n      this.internal = new ChartInternal(this);\r\n      this.internal.loadConfig(config);\r\n      this.internal.beforeInit(config);\r\n      this.internal.init();\r\n      this.internal.afterInit(config);\r\n      (function bindThis(fn, target, argThis) {\r\n          Object.keys(fn).forEach(function (key) {\r\n              target[key] = fn[key].bind(argThis);\r\n              if (Object.keys(fn[key]).length > 0) {\r\n                  bindThis(fn[key], target[key], argThis);\r\n              }\r\n          });\r\n      })(Chart.prototype, this, this);\r\n  }\n\n  var asHalfPixel = function (n) {\r\n      return Math.ceil(n) + 0.5;\r\n  };\r\n  var ceil10 = function (v) {\r\n      return Math.ceil(v / 10) * 10;\r\n  };\r\n  var diffDomain = function (d) {\r\n      return d[1] - d[0];\r\n  };\r\n  var getOption = function (options, key, defaultValue) {\r\n      return isDefined(options[key]) ? options[key] : defaultValue;\r\n  };\r\n  var getPathBox = function (path) {\r\n      var box = getBBox(path), items = [path.pathSegList.getItem(0), path.pathSegList.getItem(1)], minX = items[0].x, minY = Math.min(items[0].y, items[1].y);\r\n      return { x: minX, y: minY, width: box.width, height: box.height };\r\n  };\r\n  var getBBox = function (element) {\r\n      try {\r\n          return element.getBBox();\r\n      }\r\n      catch (ignore) {\r\n          // Firefox will throw an exception if getBBox() is called whereas the\r\n          // element is rendered with display:none\r\n          // See https://github.com/c3js/c3/issues/2692\r\n          // The previous code was using `getBoundingClientRect` which was returning\r\n          // everything at 0 in this case so let's reproduce this behavior here.\r\n          return { x: 0, y: 0, width: 0, height: 0 };\r\n      }\r\n  };\r\n  var hasValue = function (dict, value) {\r\n      var found = false;\r\n      Object.keys(dict).forEach(function (key) {\r\n          if (dict[key] === value) {\r\n              found = true;\r\n          }\r\n      });\r\n      return found;\r\n  };\r\n  var isArray = function (o) {\r\n      return Array.isArray(o);\r\n  };\r\n  var isDefined = function (v) {\r\n      return typeof v !== 'undefined';\r\n  };\r\n  var isEmpty = function (o) {\r\n      return (typeof o === 'undefined' ||\r\n          o === null ||\r\n          (isString(o) && o.length === 0) ||\r\n          (typeof o === 'object' && Object.keys(o).length === 0));\r\n  };\r\n  var isFunction = function (o) {\r\n      return typeof o === 'function';\r\n  };\r\n  var isNumber = function (o) {\r\n      return typeof o === 'number';\r\n  };\r\n  var isString = function (o) {\r\n      return typeof o === 'string';\r\n  };\r\n  var isUndefined = function (v) {\r\n      return typeof v === 'undefined';\r\n  };\r\n  var isValue = function (v) {\r\n      return v || v === 0;\r\n  };\r\n  var notEmpty = function (o) {\r\n      return !isEmpty(o);\r\n  };\r\n  var sanitise = function (str) {\r\n      return typeof str === 'string'\r\n          ? str.replace(/</g, '&lt;').replace(/>/g, '&gt;')\r\n          : str;\r\n  };\r\n  var flattenArray = function (arr) {\r\n      return Array.isArray(arr) ? [].concat.apply([], arr) : [];\r\n  };\r\n  /**\r\n   * Returns whether the point is within the given box.\r\n   *\r\n   * @param {Array} point An [x,y] coordinate\r\n   * @param {Object} box An object with {x, y, width, height} keys\r\n   * @param {Number} sensitivity An offset to ease check on very small boxes\r\n   */\r\n  var isWithinBox = function (point, box, sensitivity) {\r\n      if (sensitivity === void 0) { sensitivity = 0; }\r\n      var xStart = box.x - sensitivity;\r\n      var xEnd = box.x + box.width + sensitivity;\r\n      var yStart = box.y + box.height + sensitivity;\r\n      var yEnd = box.y - sensitivity;\r\n      return (xStart < point[0] && point[0] < xEnd && yEnd < point[1] && point[1] < yStart);\r\n  };\r\n  /**\r\n   * Returns Internet Explorer version number (or false if no Internet Explorer used).\r\n   *\r\n   * @param string agent Optional parameter to specify user agent\r\n   */\r\n  var getIEVersion = function (agent) {\r\n      // https://stackoverflow.com/questions/19999388/check-if-user-is-using-ie\r\n      if (typeof agent === 'undefined') {\r\n          agent = window.navigator.userAgent;\r\n      }\r\n      var pos = agent.indexOf('MSIE '); // up to IE10\r\n      if (pos > 0) {\r\n          return parseInt(agent.substring(pos + 5, agent.indexOf('.', pos)), 10);\r\n      }\r\n      pos = agent.indexOf('Trident/'); // IE11\r\n      if (pos > 0) {\r\n          pos = agent.indexOf('rv:');\r\n          return parseInt(agent.substring(pos + 3, agent.indexOf('.', pos)), 10);\r\n      }\r\n      return false;\r\n  };\r\n  /**\r\n   * Returns whether the used browser is Internet Explorer.\r\n   *\r\n   * @param version Optional parameter to specify IE version\r\n   */\r\n  var isIE = function (version) {\r\n      var ver = getIEVersion();\r\n      if (typeof version === 'undefined') {\r\n          return !!ver;\r\n      }\r\n      return version === ver;\r\n  };\n\n  function AxisInternal(component, params) {\r\n      var internal = this;\r\n      internal.component = component;\r\n      internal.params = params || {};\r\n      internal.d3 = component.d3;\r\n      internal.scale = internal.d3.scaleLinear();\r\n      internal.range;\r\n      internal.orient = 'bottom';\r\n      internal.innerTickSize = 6;\r\n      internal.outerTickSize = this.params.withOuterTick ? 6 : 0;\r\n      internal.tickPadding = 3;\r\n      internal.tickValues = null;\r\n      internal.tickFormat;\r\n      internal.tickArguments;\r\n      internal.tickOffset = 0;\r\n      internal.tickCulling = true;\r\n      internal.tickCentered;\r\n      internal.tickTextCharSize;\r\n      internal.tickTextRotate = internal.params.tickTextRotate;\r\n      internal.tickLength;\r\n      internal.axis = internal.generateAxis();\r\n  }\r\n  AxisInternal.prototype.axisX = function (selection, x, tickOffset) {\r\n      selection.attr('transform', function (d) {\r\n          return 'translate(' + Math.ceil(x(d) + tickOffset) + ', 0)';\r\n      });\r\n  };\r\n  AxisInternal.prototype.axisY = function (selection, y) {\r\n      selection.attr('transform', function (d) {\r\n          return 'translate(0,' + Math.ceil(y(d)) + ')';\r\n      });\r\n  };\r\n  AxisInternal.prototype.scaleExtent = function (domain) {\r\n      var start = domain[0], stop = domain[domain.length - 1];\r\n      return start < stop ? [start, stop] : [stop, start];\r\n  };\r\n  AxisInternal.prototype.generateTicks = function (scale) {\r\n      var internal = this;\r\n      var i, domain, ticks = [];\r\n      if (scale.ticks) {\r\n          return scale.ticks.apply(scale, internal.tickArguments);\r\n      }\r\n      domain = scale.domain();\r\n      for (i = Math.ceil(domain[0]); i < domain[1]; i++) {\r\n          ticks.push(i);\r\n      }\r\n      if (ticks.length > 0 && ticks[0] > 0) {\r\n          ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));\r\n      }\r\n      return ticks;\r\n  };\r\n  AxisInternal.prototype.copyScale = function () {\r\n      var internal = this;\r\n      var newScale = internal.scale.copy(), domain;\r\n      if (internal.params.isCategory) {\r\n          domain = internal.scale.domain();\r\n          newScale.domain([domain[0], domain[1] - 1]);\r\n      }\r\n      return newScale;\r\n  };\r\n  AxisInternal.prototype.textFormatted = function (v) {\r\n      var internal = this, formatted = internal.tickFormat ? internal.tickFormat(v) : v;\r\n      return typeof formatted !== 'undefined' ? formatted : '';\r\n  };\r\n  AxisInternal.prototype.updateRange = function () {\r\n      var internal = this;\r\n      internal.range = internal.scale.rangeExtent\r\n          ? internal.scale.rangeExtent()\r\n          : internal.scaleExtent(internal.scale.range());\r\n      return internal.range;\r\n  };\r\n  AxisInternal.prototype.updateTickTextCharSize = function (tick) {\r\n      var internal = this;\r\n      if (internal.tickTextCharSize) {\r\n          return internal.tickTextCharSize;\r\n      }\r\n      var size = {\r\n          h: 11.5,\r\n          w: 5.5\r\n      };\r\n      tick\r\n          .select('text')\r\n          .text(function (d) {\r\n          return internal.textFormatted(d);\r\n      })\r\n          .each(function (d) {\r\n          var box = getBBox(this), text = internal.textFormatted(d), h = box.height, w = text ? box.width / text.length : undefined;\r\n          if (h && w) {\r\n              size.h = h;\r\n              size.w = w;\r\n          }\r\n      })\r\n          .text('');\r\n      internal.tickTextCharSize = size;\r\n      return size;\r\n  };\r\n  AxisInternal.prototype.isVertical = function () {\r\n      return this.orient === 'left' || this.orient === 'right';\r\n  };\r\n  AxisInternal.prototype.tspanData = function (d, i, scale) {\r\n      var internal = this;\r\n      var splitted = internal.params.tickMultiline\r\n          ? internal.splitTickText(d, scale)\r\n          : [].concat(internal.textFormatted(d));\r\n      if (internal.params.tickMultiline && internal.params.tickMultilineMax > 0) {\r\n          splitted = internal.ellipsify(splitted, internal.params.tickMultilineMax);\r\n      }\r\n      return splitted.map(function (s) {\r\n          return { index: i, splitted: s, length: splitted.length };\r\n      });\r\n  };\r\n  AxisInternal.prototype.splitTickText = function (d, scale) {\r\n      var internal = this, tickText = internal.textFormatted(d), maxWidth = internal.params.tickWidth, subtext, spaceIndex, textWidth, splitted = [];\r\n      if (Object.prototype.toString.call(tickText) === '[object Array]') {\r\n          return tickText;\r\n      }\r\n      if (!maxWidth || maxWidth <= 0) {\r\n          maxWidth = internal.isVertical()\r\n              ? 95\r\n              : internal.params.isCategory\r\n                  ? Math.ceil(scale(1) - scale(0)) - 12\r\n                  : 110;\r\n      }\r\n      function split(splitted, text) {\r\n          spaceIndex = undefined;\r\n          for (var i = 1; i < text.length; i++) {\r\n              if (text.charAt(i) === ' ') {\r\n                  spaceIndex = i;\r\n              }\r\n              subtext = text.substr(0, i + 1);\r\n              textWidth = internal.tickTextCharSize.w * subtext.length;\r\n              // if text width gets over tick width, split by space index or crrent index\r\n              if (maxWidth < textWidth) {\r\n                  return split(splitted.concat(text.substr(0, spaceIndex ? spaceIndex : i)), text.slice(spaceIndex ? spaceIndex + 1 : i));\r\n              }\r\n          }\r\n          return splitted.concat(text);\r\n      }\r\n      return split(splitted, tickText + '');\r\n  };\r\n  AxisInternal.prototype.ellipsify = function (splitted, max) {\r\n      if (splitted.length <= max) {\r\n          return splitted;\r\n      }\r\n      var ellipsified = splitted.slice(0, max);\r\n      var remaining = 3;\r\n      for (var i = max - 1; i >= 0; i--) {\r\n          var available = ellipsified[i].length;\r\n          ellipsified[i] = ellipsified[i]\r\n              .substr(0, available - remaining)\r\n              .padEnd(available, '.');\r\n          remaining -= available;\r\n          if (remaining <= 0) {\r\n              break;\r\n          }\r\n      }\r\n      return ellipsified;\r\n  };\r\n  AxisInternal.prototype.updateTickLength = function () {\r\n      var internal = this;\r\n      internal.tickLength =\r\n          Math.max(internal.innerTickSize, 0) + internal.tickPadding;\r\n  };\r\n  AxisInternal.prototype.lineY2 = function (d) {\r\n      var internal = this, tickPosition = internal.scale(d) + (internal.tickCentered ? 0 : internal.tickOffset);\r\n      return internal.range[0] < tickPosition && tickPosition < internal.range[1]\r\n          ? internal.innerTickSize\r\n          : 0;\r\n  };\r\n  AxisInternal.prototype.textY = function () {\r\n      var internal = this, rotate = internal.tickTextRotate;\r\n      return rotate\r\n          ? 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1)\r\n          : internal.tickLength;\r\n  };\r\n  AxisInternal.prototype.textTransform = function () {\r\n      var internal = this, rotate = internal.tickTextRotate;\r\n      return rotate ? 'rotate(' + rotate + ')' : '';\r\n  };\r\n  AxisInternal.prototype.textTextAnchor = function () {\r\n      var internal = this, rotate = internal.tickTextRotate;\r\n      return rotate ? (rotate > 0 ? 'start' : 'end') : 'middle';\r\n  };\r\n  AxisInternal.prototype.tspanDx = function () {\r\n      var internal = this, rotate = internal.tickTextRotate;\r\n      return rotate ? 8 * Math.sin(Math.PI * (rotate / 180)) : 0;\r\n  };\r\n  AxisInternal.prototype.tspanDy = function (d, i) {\r\n      var internal = this, dy = internal.tickTextCharSize.h;\r\n      if (i === 0) {\r\n          if (internal.isVertical()) {\r\n              dy = -((d.length - 1) * (internal.tickTextCharSize.h / 2) - 3);\r\n          }\r\n          else {\r\n              dy = '.71em';\r\n          }\r\n      }\r\n      return dy;\r\n  };\r\n  AxisInternal.prototype.generateAxis = function () {\r\n      var internal = this, d3 = internal.d3, params = internal.params;\r\n      function axis(g, transition) {\r\n          var self;\r\n          g.each(function () {\r\n              var g = (axis.g = d3.select(this));\r\n              var scale0 = this.__chart__ || internal.scale, scale1 = (this.__chart__ = internal.copyScale());\r\n              var ticksValues = internal.tickValues\r\n                  ? internal.tickValues\r\n                  : internal.generateTicks(scale1), ticks = g.selectAll('.tick').data(ticksValues, scale1), tickEnter = ticks\r\n                  .enter()\r\n                  .insert('g', '.domain')\r\n                  .attr('class', 'tick')\r\n                  .style('opacity', 1e-6), \r\n              // MEMO: No exit transition. The reason is this transition affects max tick width calculation because old tick will be included in the ticks.\r\n              tickExit = ticks.exit().remove(), tickUpdate = ticks.merge(tickEnter), tickTransform, tickX, tickY;\r\n              if (params.isCategory) {\r\n                  internal.tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);\r\n                  tickX = internal.tickCentered ? 0 : internal.tickOffset;\r\n                  tickY = internal.tickCentered ? internal.tickOffset : 0;\r\n              }\r\n              else {\r\n                  internal.tickOffset = tickX = 0;\r\n              }\r\n              internal.updateRange();\r\n              internal.updateTickLength();\r\n              internal.updateTickTextCharSize(g.select('.tick'));\r\n              var lineUpdate = tickUpdate\r\n                  .select('line')\r\n                  .merge(tickEnter.append('line')), textUpdate = tickUpdate.select('text').merge(tickEnter.append('text'));\r\n              var tspans = tickUpdate\r\n                  .selectAll('text')\r\n                  .selectAll('tspan')\r\n                  .data(function (d, i) {\r\n                  return internal.tspanData(d, i, scale1);\r\n              }), tspanEnter = tspans.enter().append('tspan'), tspanUpdate = tspanEnter.merge(tspans).text(function (d) {\r\n                  return d.splitted;\r\n              });\r\n              tspans.exit().remove();\r\n              var path = g.selectAll('.domain').data([0]), pathUpdate = path\r\n                  .enter()\r\n                  .append('path')\r\n                  .merge(path)\r\n                  .attr('class', 'domain');\r\n              // TODO: each attr should be one function and change its behavior by internal.orient, probably\r\n              switch (internal.orient) {\r\n                  case 'bottom': {\r\n                      tickTransform = internal.axisX;\r\n                      lineUpdate\r\n                          .attr('x1', tickX)\r\n                          .attr('x2', tickX)\r\n                          .attr('y2', function (d, i) {\r\n                          return internal.lineY2(d, i);\r\n                      });\r\n                      textUpdate\r\n                          .attr('x', 0)\r\n                          .attr('y', function (d, i) {\r\n                          return internal.textY(d, i);\r\n                      })\r\n                          .attr('transform', function (d, i) {\r\n                          return internal.textTransform(d, i);\r\n                      })\r\n                          .style('text-anchor', function (d, i) {\r\n                          return internal.textTextAnchor(d, i);\r\n                      });\r\n                      tspanUpdate\r\n                          .attr('x', 0)\r\n                          .attr('dy', function (d, i) {\r\n                          return internal.tspanDy(d, i);\r\n                      })\r\n                          .attr('dx', function (d, i) {\r\n                          return internal.tspanDx(d, i);\r\n                      });\r\n                      pathUpdate.attr('d', 'M' +\r\n                          internal.range[0] +\r\n                          ',' +\r\n                          internal.outerTickSize +\r\n                          'V0H' +\r\n                          internal.range[1] +\r\n                          'V' +\r\n                          internal.outerTickSize);\r\n                      break;\r\n                  }\r\n                  case 'top': {\r\n                      // TODO: rotated tick text\r\n                      tickTransform = internal.axisX;\r\n                      lineUpdate\r\n                          .attr('x1', tickX)\r\n                          .attr('x2', tickX)\r\n                          .attr('y2', function (d, i) {\r\n                          return -1 * internal.lineY2(d, i);\r\n                      });\r\n                      textUpdate\r\n                          .attr('x', 0)\r\n                          .attr('y', function (d, i) {\r\n                          return (-1 * internal.textY(d, i) -\r\n                              (params.isCategory ? 2 : internal.tickLength - 2));\r\n                      })\r\n                          .attr('transform', function (d, i) {\r\n                          return internal.textTransform(d, i);\r\n                      })\r\n                          .style('text-anchor', function (d, i) {\r\n                          return internal.textTextAnchor(d, i);\r\n                      });\r\n                      tspanUpdate\r\n                          .attr('x', 0)\r\n                          .attr('dy', function (d, i) {\r\n                          return internal.tspanDy(d, i);\r\n                      })\r\n                          .attr('dx', function (d, i) {\r\n                          return internal.tspanDx(d, i);\r\n                      });\r\n                      pathUpdate.attr('d', 'M' +\r\n                          internal.range[0] +\r\n                          ',' +\r\n                          -internal.outerTickSize +\r\n                          'V0H' +\r\n                          internal.range[1] +\r\n                          'V' +\r\n                          -internal.outerTickSize);\r\n                      break;\r\n                  }\r\n                  case 'left': {\r\n                      tickTransform = internal.axisY;\r\n                      lineUpdate\r\n                          .attr('x2', -internal.innerTickSize)\r\n                          .attr('y1', tickY)\r\n                          .attr('y2', tickY);\r\n                      textUpdate\r\n                          .attr('x', -internal.tickLength)\r\n                          .attr('y', internal.tickOffset)\r\n                          .style('text-anchor', 'end');\r\n                      tspanUpdate\r\n                          .attr('x', -internal.tickLength)\r\n                          .attr('dy', function (d, i) {\r\n                          return internal.tspanDy(d, i);\r\n                      });\r\n                      pathUpdate.attr('d', 'M' +\r\n                          -internal.outerTickSize +\r\n                          ',' +\r\n                          internal.range[0] +\r\n                          'H0V' +\r\n                          internal.range[1] +\r\n                          'H' +\r\n                          -internal.outerTickSize);\r\n                      break;\r\n                  }\r\n                  case 'right': {\r\n                      tickTransform = internal.axisY;\r\n                      lineUpdate\r\n                          .attr('x2', internal.innerTickSize)\r\n                          .attr('y1', tickY)\r\n                          .attr('y2', tickY);\r\n                      textUpdate\r\n                          .attr('x', internal.tickLength)\r\n                          .attr('y', internal.tickOffset)\r\n                          .style('text-anchor', 'start');\r\n                      tspanUpdate.attr('x', internal.tickLength).attr('dy', function (d, i) {\r\n                          return internal.tspanDy(d, i);\r\n                      });\r\n                      pathUpdate.attr('d', 'M' +\r\n                          internal.outerTickSize +\r\n                          ',' +\r\n                          internal.range[0] +\r\n                          'H0V' +\r\n                          internal.range[1] +\r\n                          'H' +\r\n                          internal.outerTickSize);\r\n                      break;\r\n                  }\r\n              }\r\n              if (scale1.rangeBand) {\r\n                  var x = scale1, dx = x.rangeBand() / 2;\r\n                  scale0 = scale1 = function (d) {\r\n                      return x(d) + dx;\r\n                  };\r\n              }\r\n              else if (scale0.rangeBand) {\r\n                  scale0 = scale1;\r\n              }\r\n              else {\r\n                  tickExit.call(tickTransform, scale1, internal.tickOffset);\r\n              }\r\n              tickEnter.call(tickTransform, scale0, internal.tickOffset);\r\n              self = (transition ? tickUpdate.transition(transition) : tickUpdate)\r\n                  .style('opacity', 1)\r\n                  .call(tickTransform, scale1, internal.tickOffset);\r\n          });\r\n          return self;\r\n      }\r\n      axis.scale = function (x) {\r\n          if (!arguments.length) {\r\n              return internal.scale;\r\n          }\r\n          internal.scale = x;\r\n          return axis;\r\n      };\r\n      axis.orient = function (x) {\r\n          if (!arguments.length) {\r\n              return internal.orient;\r\n          }\r\n          internal.orient =\r\n              x in { top: 1, right: 1, bottom: 1, left: 1 } ? x + '' : 'bottom';\r\n          return axis;\r\n      };\r\n      axis.tickFormat = function (format) {\r\n          if (!arguments.length) {\r\n              return internal.tickFormat;\r\n          }\r\n          internal.tickFormat = format;\r\n          return axis;\r\n      };\r\n      axis.tickCentered = function (isCentered) {\r\n          if (!arguments.length) {\r\n              return internal.tickCentered;\r\n          }\r\n          internal.tickCentered = isCentered;\r\n          return axis;\r\n      };\r\n      axis.tickOffset = function () {\r\n          return internal.tickOffset;\r\n      };\r\n      axis.tickInterval = function () {\r\n          var interval, length;\r\n          if (params.isCategory) {\r\n              interval = internal.tickOffset * 2;\r\n          }\r\n          else {\r\n              length =\r\n                  axis.g\r\n                      .select('path.domain')\r\n                      .node()\r\n                      .getTotalLength() -\r\n                      internal.outerTickSize * 2;\r\n              interval = length / axis.g.selectAll('line').size();\r\n          }\r\n          return interval === Infinity ? 0 : interval;\r\n      };\r\n      axis.ticks = function () {\r\n          if (!arguments.length) {\r\n              return internal.tickArguments;\r\n          }\r\n          internal.tickArguments = arguments;\r\n          return axis;\r\n      };\r\n      axis.tickCulling = function (culling) {\r\n          if (!arguments.length) {\r\n              return internal.tickCulling;\r\n          }\r\n          internal.tickCulling = culling;\r\n          return axis;\r\n      };\r\n      axis.tickValues = function (x) {\r\n          if (typeof x === 'function') {\r\n              internal.tickValues = function () {\r\n                  return x(internal.scale.domain());\r\n              };\r\n          }\r\n          else {\r\n              if (!arguments.length) {\r\n                  return internal.tickValues;\r\n              }\r\n              internal.tickValues = x;\r\n          }\r\n          return axis;\r\n      };\r\n      return axis;\r\n  };\n\n  var CLASS = {\r\n      target: 'c3-target',\r\n      chart: 'c3-chart',\r\n      chartLine: 'c3-chart-line',\r\n      chartLines: 'c3-chart-lines',\r\n      chartBar: 'c3-chart-bar',\r\n      chartBars: 'c3-chart-bars',\r\n      chartText: 'c3-chart-text',\r\n      chartTexts: 'c3-chart-texts',\r\n      chartArc: 'c3-chart-arc',\r\n      chartArcs: 'c3-chart-arcs',\r\n      chartArcsTitle: 'c3-chart-arcs-title',\r\n      chartArcsBackground: 'c3-chart-arcs-background',\r\n      chartArcsGaugeUnit: 'c3-chart-arcs-gauge-unit',\r\n      chartArcsGaugeMax: 'c3-chart-arcs-gauge-max',\r\n      chartArcsGaugeMin: 'c3-chart-arcs-gauge-min',\r\n      selectedCircle: 'c3-selected-circle',\r\n      selectedCircles: 'c3-selected-circles',\r\n      eventRect: 'c3-event-rect',\r\n      eventRects: 'c3-event-rects',\r\n      eventRectsSingle: 'c3-event-rects-single',\r\n      eventRectsMultiple: 'c3-event-rects-multiple',\r\n      zoomRect: 'c3-zoom-rect',\r\n      brush: 'c3-brush',\r\n      dragZoom: 'c3-drag-zoom',\r\n      focused: 'c3-focused',\r\n      defocused: 'c3-defocused',\r\n      region: 'c3-region',\r\n      regions: 'c3-regions',\r\n      title: 'c3-title',\r\n      tooltipContainer: 'c3-tooltip-container',\r\n      tooltip: 'c3-tooltip',\r\n      tooltipName: 'c3-tooltip-name',\r\n      shape: 'c3-shape',\r\n      shapes: 'c3-shapes',\r\n      line: 'c3-line',\r\n      lines: 'c3-lines',\r\n      bar: 'c3-bar',\r\n      bars: 'c3-bars',\r\n      circle: 'c3-circle',\r\n      circles: 'c3-circles',\r\n      arc: 'c3-arc',\r\n      arcLabelLine: 'c3-arc-label-line',\r\n      arcs: 'c3-arcs',\r\n      area: 'c3-area',\r\n      areas: 'c3-areas',\r\n      empty: 'c3-empty',\r\n      text: 'c3-text',\r\n      texts: 'c3-texts',\r\n      gaugeValue: 'c3-gauge-value',\r\n      grid: 'c3-grid',\r\n      gridLines: 'c3-grid-lines',\r\n      xgrid: 'c3-xgrid',\r\n      xgrids: 'c3-xgrids',\r\n      xgridLine: 'c3-xgrid-line',\r\n      xgridLines: 'c3-xgrid-lines',\r\n      xgridFocus: 'c3-xgrid-focus',\r\n      ygrid: 'c3-ygrid',\r\n      ygrids: 'c3-ygrids',\r\n      ygridLine: 'c3-ygrid-line',\r\n      ygridLines: 'c3-ygrid-lines',\r\n      colorScale: 'c3-colorscale',\r\n      stanfordElements: 'c3-stanford-elements',\r\n      stanfordLine: 'c3-stanford-line',\r\n      stanfordLines: 'c3-stanford-lines',\r\n      stanfordRegion: 'c3-stanford-region',\r\n      stanfordRegions: 'c3-stanford-regions',\r\n      stanfordText: 'c3-stanford-text',\r\n      stanfordTexts: 'c3-stanford-texts',\r\n      axis: 'c3-axis',\r\n      axisX: 'c3-axis-x',\r\n      axisXLabel: 'c3-axis-x-label',\r\n      axisY: 'c3-axis-y',\r\n      axisYLabel: 'c3-axis-y-label',\r\n      axisY2: 'c3-axis-y2',\r\n      axisY2Label: 'c3-axis-y2-label',\r\n      legendBackground: 'c3-legend-background',\r\n      legendItem: 'c3-legend-item',\r\n      legendItemEvent: 'c3-legend-item-event',\r\n      legendItemTile: 'c3-legend-item-tile',\r\n      legendItemHidden: 'c3-legend-item-hidden',\r\n      legendItemFocused: 'c3-legend-item-focused',\r\n      dragarea: 'c3-dragarea',\r\n      EXPANDED: '_expanded_',\r\n      SELECTED: '_selected_',\r\n      INCLUDED: '_included_'\r\n  };\n\n  var AxisClass = /** @class */ (function () {\r\n      function AxisClass(owner) {\r\n          this.owner = owner;\r\n          this.d3 = owner.d3;\r\n          this.internal = AxisInternal;\r\n      }\r\n      return AxisClass;\r\n  }());\r\n  var Axis = AxisClass;\r\n  Axis.prototype.init = function init() {\r\n      var $$ = this.owner, config = $$.config, main = $$.main;\r\n      $$.axes.x = main\r\n          .append('g')\r\n          .attr('class', CLASS.axis + ' ' + CLASS.axisX)\r\n          .attr('clip-path', config.axis_x_inner ? '' : $$.clipPathForXAxis)\r\n          .attr('transform', $$.getTranslate('x'))\r\n          .style('visibility', config.axis_x_show ? 'visible' : 'hidden');\r\n      $$.axes.x\r\n          .append('text')\r\n          .attr('class', CLASS.axisXLabel)\r\n          .attr('transform', config.axis_rotated ? 'rotate(-90)' : '')\r\n          .style('text-anchor', this.textAnchorForXAxisLabel.bind(this));\r\n      $$.axes.y = main\r\n          .append('g')\r\n          .attr('class', CLASS.axis + ' ' + CLASS.axisY)\r\n          .attr('clip-path', config.axis_y_inner ? '' : $$.clipPathForYAxis)\r\n          .attr('transform', $$.getTranslate('y'))\r\n          .style('visibility', config.axis_y_show ? 'visible' : 'hidden');\r\n      $$.axes.y\r\n          .append('text')\r\n          .attr('class', CLASS.axisYLabel)\r\n          .attr('transform', config.axis_rotated ? '' : 'rotate(-90)')\r\n          .style('text-anchor', this.textAnchorForYAxisLabel.bind(this));\r\n      $$.axes.y2 = main\r\n          .append('g')\r\n          .attr('class', CLASS.axis + ' ' + CLASS.axisY2)\r\n          // clip-path?\r\n          .attr('transform', $$.getTranslate('y2'))\r\n          .style('visibility', config.axis_y2_show ? 'visible' : 'hidden');\r\n      $$.axes.y2\r\n          .append('text')\r\n          .attr('class', CLASS.axisY2Label)\r\n          .attr('transform', config.axis_rotated ? '' : 'rotate(-90)')\r\n          .style('text-anchor', this.textAnchorForY2AxisLabel.bind(this));\r\n  };\r\n  Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {\r\n      var $$ = this.owner, config = $$.config, axisParams = {\r\n          isCategory: $$.isCategorized(),\r\n          withOuterTick: withOuterTick,\r\n          tickMultiline: config.axis_x_tick_multiline,\r\n          tickMultilineMax: config.axis_x_tick_multiline\r\n              ? Number(config.axis_x_tick_multilineMax)\r\n              : 0,\r\n          tickWidth: config.axis_x_tick_width,\r\n          tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,\r\n          withoutTransition: withoutTransition\r\n      }, axis = new this.internal(this, axisParams).axis.scale(scale).orient(orient);\r\n      if ($$.isTimeSeries() && tickValues && typeof tickValues !== 'function') {\r\n          tickValues = tickValues.map(function (v) {\r\n              return $$.parseDate(v);\r\n          });\r\n      }\r\n      // Set tick\r\n      axis.tickFormat(tickFormat).tickValues(tickValues);\r\n      if ($$.isCategorized()) {\r\n          axis.tickCentered(config.axis_x_tick_centered);\r\n          if (isEmpty(config.axis_x_tick_culling)) {\r\n              config.axis_x_tick_culling = false;\r\n          }\r\n      }\r\n      return axis;\r\n  };\r\n  Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis) {\r\n      var $$ = this.owner, config = $$.config, tickValues;\r\n      if (config.axis_x_tick_fit || config.axis_x_tick_count) {\r\n          tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());\r\n      }\r\n      if (axis) {\r\n          axis.tickValues(tickValues);\r\n      }\r\n      else {\r\n          $$.xAxis.tickValues(tickValues);\r\n          $$.subXAxis.tickValues(tickValues);\r\n      }\r\n      return tickValues;\r\n  };\r\n  Axis.prototype.getYAxis = function getYAxis(axisId, scale, orient, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {\r\n      var $$ = this.owner;\r\n      var config = $$.config;\r\n      var tickFormat = config[\"axis_\" + axisId + \"_tick_format\"];\r\n      if (!tickFormat && $$.isAxisNormalized(axisId)) {\r\n          tickFormat = function (x) { return x + \"%\"; };\r\n      }\r\n      var axis = new this.internal(this, {\r\n          withOuterTick: withOuterTick,\r\n          withoutTransition: withoutTransition,\r\n          tickTextRotate: withoutRotateTickText ? 0 : config.axis_y_tick_rotate\r\n      }).axis\r\n          .scale(scale)\r\n          .orient(orient);\r\n      if (tickFormat) {\r\n          axis.tickFormat(tickFormat);\r\n      }\r\n      if ($$.isTimeSeriesY()) {\r\n          axis.ticks(config.axis_y_tick_time_type, config.axis_y_tick_time_interval);\r\n      }\r\n      else {\r\n          axis.tickValues(tickValues);\r\n      }\r\n      return axis;\r\n  };\r\n  Axis.prototype.getId = function getId(id) {\r\n      var config = this.owner.config;\r\n      return id in config.data_axes ? config.data_axes[id] : 'y';\r\n  };\r\n  Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {\r\n      // #2251 previously set any negative values to a whole number,\r\n      // however both should be truncated according to the users format specification\r\n      var $$ = this.owner, config = $$.config;\r\n      var format = $$.isTimeSeries()\r\n          ? $$.defaultAxisTimeFormat\r\n          : $$.isCategorized()\r\n              ? $$.categoryName\r\n              : function (v) {\r\n                  return v;\r\n              };\r\n      if (config.axis_x_tick_format) {\r\n          if (isFunction(config.axis_x_tick_format)) {\r\n              format = config.axis_x_tick_format;\r\n          }\r\n          else if ($$.isTimeSeries()) {\r\n              format = function (date) {\r\n                  return date ? $$.axisTimeFormat(config.axis_x_tick_format)(date) : '';\r\n              };\r\n          }\r\n      }\r\n      return isFunction(format)\r\n          ? function (v) {\r\n              return format.call($$, v);\r\n          }\r\n          : format;\r\n  };\r\n  Axis.prototype.getTickValues = function getTickValues(tickValues, axis) {\r\n      return tickValues ? tickValues : axis ? axis.tickValues() : undefined;\r\n  };\r\n  Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {\r\n      return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);\r\n  };\r\n  Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {\r\n      return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);\r\n  };\r\n  Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {\r\n      return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);\r\n  };\r\n  Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {\r\n      var $$ = this.owner, config = $$.config, option;\r\n      if (axisId === 'y') {\r\n          option = config.axis_y_label;\r\n      }\r\n      else if (axisId === 'y2') {\r\n          option = config.axis_y2_label;\r\n      }\r\n      else if (axisId === 'x') {\r\n          option = config.axis_x_label;\r\n      }\r\n      return option;\r\n  };\r\n  Axis.prototype.getLabelText = function getLabelText(axisId) {\r\n      var option = this.getLabelOptionByAxisId(axisId);\r\n      return isString(option) ? option : option ? option.text : null;\r\n  };\r\n  Axis.prototype.setLabelText = function setLabelText(axisId, text) {\r\n      var $$ = this.owner, config = $$.config, option = this.getLabelOptionByAxisId(axisId);\r\n      if (isString(option)) {\r\n          if (axisId === 'y') {\r\n              config.axis_y_label = text;\r\n          }\r\n          else if (axisId === 'y2') {\r\n              config.axis_y2_label = text;\r\n          }\r\n          else if (axisId === 'x') {\r\n              config.axis_x_label = text;\r\n          }\r\n      }\r\n      else if (option) {\r\n          option.text = text;\r\n      }\r\n  };\r\n  Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {\r\n      var option = this.getLabelOptionByAxisId(axisId), position = option && typeof option === 'object' && option.position\r\n          ? option.position\r\n          : defaultPosition;\r\n      return {\r\n          isInner: position.indexOf('inner') >= 0,\r\n          isOuter: position.indexOf('outer') >= 0,\r\n          isLeft: position.indexOf('left') >= 0,\r\n          isCenter: position.indexOf('center') >= 0,\r\n          isRight: position.indexOf('right') >= 0,\r\n          isTop: position.indexOf('top') >= 0,\r\n          isMiddle: position.indexOf('middle') >= 0,\r\n          isBottom: position.indexOf('bottom') >= 0\r\n      };\r\n  };\r\n  Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {\r\n      return this.getLabelPosition('x', this.owner.config.axis_rotated ? 'inner-top' : 'inner-right');\r\n  };\r\n  Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {\r\n      return this.getLabelPosition('y', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');\r\n  };\r\n  Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {\r\n      return this.getLabelPosition('y2', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');\r\n  };\r\n  Axis.prototype.getLabelPositionById = function getLabelPositionById(id) {\r\n      return id === 'y2'\r\n          ? this.getY2AxisLabelPosition()\r\n          : id === 'y'\r\n              ? this.getYAxisLabelPosition()\r\n              : this.getXAxisLabelPosition();\r\n  };\r\n  Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {\r\n      return this.getLabelText('x');\r\n  };\r\n  Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {\r\n      return this.getLabelText('y');\r\n  };\r\n  Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {\r\n      return this.getLabelText('y2');\r\n  };\r\n  Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {\r\n      var $$ = this.owner;\r\n      if (forHorizontal) {\r\n          return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;\r\n      }\r\n      else {\r\n          return position.isBottom\r\n              ? -$$.height\r\n              : position.isMiddle\r\n                  ? -$$.height / 2\r\n                  : 0;\r\n      }\r\n  };\r\n  Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {\r\n      if (forHorizontal) {\r\n          return position.isLeft ? '0.5em' : position.isRight ? '-0.5em' : '0';\r\n      }\r\n      else {\r\n          return position.isTop ? '-0.5em' : position.isBottom ? '0.5em' : '0';\r\n      }\r\n  };\r\n  Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {\r\n      if (forHorizontal) {\r\n          return position.isLeft ? 'start' : position.isCenter ? 'middle' : 'end';\r\n      }\r\n      else {\r\n          return position.isBottom ? 'start' : position.isMiddle ? 'middle' : 'end';\r\n      }\r\n  };\r\n  Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {\r\n      return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());\r\n  };\r\n  Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {\r\n      return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());\r\n  };\r\n  Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {\r\n      return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());\r\n  };\r\n  Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {\r\n      return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());\r\n  };\r\n  Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {\r\n      return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());\r\n  };\r\n  Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {\r\n      return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());\r\n  };\r\n  Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {\r\n      var $$ = this.owner, config = $$.config, position = this.getXAxisLabelPosition();\r\n      if (config.axis_rotated) {\r\n          return position.isInner\r\n              ? '1.2em'\r\n              : -25 - ($$.config.axis_x_inner ? 0 : this.getMaxTickWidth('x'));\r\n      }\r\n      else {\r\n          return position.isInner ? '-0.5em' : $$.getHorizontalAxisHeight('x') - 10;\r\n      }\r\n  };\r\n  Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {\r\n      var $$ = this.owner, position = this.getYAxisLabelPosition();\r\n      if ($$.config.axis_rotated) {\r\n          return position.isInner ? '-0.5em' : '3em';\r\n      }\r\n      else {\r\n          return position.isInner\r\n              ? '1.2em'\r\n              : -10 - ($$.config.axis_y_inner ? 0 : this.getMaxTickWidth('y') + 10);\r\n      }\r\n  };\r\n  Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {\r\n      var $$ = this.owner, position = this.getY2AxisLabelPosition();\r\n      if ($$.config.axis_rotated) {\r\n          return position.isInner ? '1.2em' : '-2.2em';\r\n      }\r\n      else {\r\n          return position.isInner\r\n              ? '-0.5em'\r\n              : 15 + ($$.config.axis_y2_inner ? 0 : this.getMaxTickWidth('y2') + 15);\r\n      }\r\n  };\r\n  Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {\r\n      var $$ = this.owner;\r\n      return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());\r\n  };\r\n  Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {\r\n      var $$ = this.owner;\r\n      return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());\r\n  };\r\n  Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {\r\n      var $$ = this.owner;\r\n      return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());\r\n  };\r\n  Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id, withoutRecompute) {\r\n      var $$ = this.owner, maxWidth = 0, targetsToShow, scale, axis, dummy, svg;\r\n      if (withoutRecompute && $$.currentMaxTickWidths[id]) {\r\n          return $$.currentMaxTickWidths[id];\r\n      }\r\n      if ($$.svg) {\r\n          targetsToShow = $$.filterTargetsToShow($$.data.targets);\r\n          if (id === 'y') {\r\n              scale = $$.y.copy().domain($$.getYDomain(targetsToShow, 'y'));\r\n              axis = this.getYAxis(id, scale, $$.yOrient, $$.yAxisTickValues, false, true, true);\r\n          }\r\n          else if (id === 'y2') {\r\n              scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, 'y2'));\r\n              axis = this.getYAxis(id, scale, $$.y2Orient, $$.y2AxisTickValues, false, true, true);\r\n          }\r\n          else {\r\n              scale = $$.x.copy().domain($$.getXDomain(targetsToShow));\r\n              axis = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);\r\n              this.updateXAxisTickValues(targetsToShow, axis);\r\n          }\r\n          dummy = $$.d3\r\n              .select('body')\r\n              .append('div')\r\n              .classed('c3', true);\r\n          (svg = dummy\r\n              .append('svg')\r\n              .style('visibility', 'hidden')\r\n              .style('position', 'fixed')\r\n              .style('top', 0)\r\n              .style('left', 0)),\r\n              svg\r\n                  .append('g')\r\n                  .call(axis)\r\n                  .each(function () {\r\n                  $$.d3\r\n                      .select(this)\r\n                      .selectAll('text')\r\n                      .each(function () {\r\n                      var box = getBBox(this);\r\n                      if (maxWidth < box.width) {\r\n                          maxWidth = box.width;\r\n                      }\r\n                  });\r\n                  dummy.remove();\r\n              });\r\n      }\r\n      $$.currentMaxTickWidths[id] =\r\n          maxWidth <= 0 ? $$.currentMaxTickWidths[id] : maxWidth;\r\n      return $$.currentMaxTickWidths[id];\r\n  };\r\n  Axis.prototype.updateLabels = function updateLabels(withTransition) {\r\n      var $$ = this.owner;\r\n      var axisXLabel = $$.main.select('.' + CLASS.axisX + ' .' + CLASS.axisXLabel), axisYLabel = $$.main.select('.' + CLASS.axisY + ' .' + CLASS.axisYLabel), axisY2Label = $$.main.select('.' + CLASS.axisY2 + ' .' + CLASS.axisY2Label);\r\n      (withTransition ? axisXLabel.transition() : axisXLabel)\r\n          .attr('x', this.xForXAxisLabel.bind(this))\r\n          .attr('dx', this.dxForXAxisLabel.bind(this))\r\n          .attr('dy', this.dyForXAxisLabel.bind(this))\r\n          .text(this.textForXAxisLabel.bind(this));\r\n      (withTransition ? axisYLabel.transition() : axisYLabel)\r\n          .attr('x', this.xForYAxisLabel.bind(this))\r\n          .attr('dx', this.dxForYAxisLabel.bind(this))\r\n          .attr('dy', this.dyForYAxisLabel.bind(this))\r\n          .text(this.textForYAxisLabel.bind(this));\r\n      (withTransition ? axisY2Label.transition() : axisY2Label)\r\n          .attr('x', this.xForY2AxisLabel.bind(this))\r\n          .attr('dx', this.dxForY2AxisLabel.bind(this))\r\n          .attr('dy', this.dyForY2AxisLabel.bind(this))\r\n          .text(this.textForY2AxisLabel.bind(this));\r\n  };\r\n  Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {\r\n      var p = typeof padding === 'number' ? padding : padding[key];\r\n      if (!isValue(p)) {\r\n          return defaultValue;\r\n      }\r\n      if (padding.unit === 'ratio') {\r\n          return padding[key] * domainLength;\r\n      }\r\n      // assume padding is pixels if unit is not specified\r\n      return this.convertPixelsToAxisPadding(p, domainLength);\r\n  };\r\n  Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {\r\n      var $$ = this.owner, length = $$.config.axis_rotated ? $$.width : $$.height;\r\n      return domainLength * (pixels / length);\r\n  };\r\n  Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {\r\n      var tickValues = values, targetCount, start, end, count, interval, i, tickValue;\r\n      if (tickCount) {\r\n          targetCount = isFunction(tickCount) ? tickCount() : tickCount;\r\n          // compute ticks according to tickCount\r\n          if (targetCount === 1) {\r\n              tickValues = [values[0]];\r\n          }\r\n          else if (targetCount === 2) {\r\n              tickValues = [values[0], values[values.length - 1]];\r\n          }\r\n          else if (targetCount > 2) {\r\n              count = targetCount - 2;\r\n              start = values[0];\r\n              end = values[values.length - 1];\r\n              interval = (end - start) / (count + 1);\r\n              // re-construct unique values\r\n              tickValues = [start];\r\n              for (i = 0; i < count; i++) {\r\n                  tickValue = +start + interval * (i + 1);\r\n                  tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);\r\n              }\r\n              tickValues.push(end);\r\n          }\r\n      }\r\n      if (!forTimeSeries) {\r\n          tickValues = tickValues.sort(function (a, b) {\r\n              return a - b;\r\n          });\r\n      }\r\n      return tickValues;\r\n  };\r\n  Axis.prototype.generateTransitions = function generateTransitions(duration) {\r\n      var $$ = this.owner, axes = $$.axes;\r\n      return {\r\n          axisX: duration ? axes.x.transition().duration(duration) : axes.x,\r\n          axisY: duration ? axes.y.transition().duration(duration) : axes.y,\r\n          axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,\r\n          axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx\r\n      };\r\n  };\r\n  Axis.prototype.redraw = function redraw(duration, isHidden) {\r\n      var $$ = this.owner, transition = duration ? $$.d3.transition().duration(duration) : null;\r\n      $$.axes.x.style('opacity', isHidden ? 0 : 1).call($$.xAxis, transition);\r\n      $$.axes.y.style('opacity', isHidden ? 0 : 1).call($$.yAxis, transition);\r\n      $$.axes.y2.style('opacity', isHidden ? 0 : 1).call($$.y2Axis, transition);\r\n      $$.axes.subx.style('opacity', isHidden ? 0 : 1).call($$.subXAxis, transition);\r\n  };\n\n  var c3 = {\r\n      version: '0.7.20',\r\n      chart: {\r\n          fn: Chart.prototype,\r\n          internal: {\r\n              fn: ChartInternal.prototype,\r\n              axis: {\r\n                  fn: AxisClass.prototype,\r\n                  internal: {\r\n                      fn: AxisInternal.prototype\r\n                  }\r\n              }\r\n          }\r\n      },\r\n      generate: function (config) {\r\n          return new Chart(config);\r\n      }\r\n  };\r\n  ChartInternal.prototype.beforeInit = function () {\r\n      // can do something\r\n  };\r\n  ChartInternal.prototype.afterInit = function () {\r\n      // can do something\r\n  };\r\n  ChartInternal.prototype.init = function () {\r\n      var $$ = this, config = $$.config;\r\n      $$.initParams();\r\n      if (config.data_url) {\r\n          $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_headers, config.data_keys, $$.initWithData);\r\n      }\r\n      else if (config.data_json) {\r\n          $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));\r\n      }\r\n      else if (config.data_rows) {\r\n          $$.initWithData($$.convertRowsToData(config.data_rows));\r\n      }\r\n      else if (config.data_columns) {\r\n          $$.initWithData($$.convertColumnsToData(config.data_columns));\r\n      }\r\n      else {\r\n          throw Error('url or json or rows or columns is required.');\r\n      }\r\n  };\r\n  ChartInternal.prototype.initParams = function () {\r\n      var $$ = this, d3 = $$.d3, config = $$.config;\r\n      // MEMO: clipId needs to be unique because it conflicts when multiple charts exist\r\n      $$.clipId = 'c3-' + new Date().valueOf() + '-clip';\r\n      $$.clipIdForXAxis = $$.clipId + '-xaxis';\r\n      $$.clipIdForYAxis = $$.clipId + '-yaxis';\r\n      $$.clipIdForGrid = $$.clipId + '-grid';\r\n      $$.clipIdForSubchart = $$.clipId + '-subchart';\r\n      $$.clipPath = $$.getClipPath($$.clipId);\r\n      $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis);\r\n      $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);\r\n      $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid);\r\n      $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart);\r\n      $$.dragStart = null;\r\n      $$.dragging = false;\r\n      $$.flowing = false;\r\n      $$.cancelClick = false;\r\n      $$.mouseover = undefined;\r\n      $$.transiting = false;\r\n      $$.color = $$.generateColor();\r\n      $$.levelColor = $$.generateLevelColor();\r\n      $$.dataTimeParse = (config.data_xLocaltime ? d3.timeParse : d3.utcParse)($$.config.data_xFormat);\r\n      $$.axisTimeFormat = config.axis_x_localtime ? d3.timeFormat : d3.utcFormat;\r\n      $$.defaultAxisTimeFormat = function (date) {\r\n          if (date.getMilliseconds()) {\r\n              return d3.timeFormat('.%L')(date);\r\n          }\r\n          if (date.getSeconds()) {\r\n              return d3.timeFormat(':%S')(date);\r\n          }\r\n          if (date.getMinutes()) {\r\n              return d3.timeFormat('%I:%M')(date);\r\n          }\r\n          if (date.getHours()) {\r\n              return d3.timeFormat('%I %p')(date);\r\n          }\r\n          if (date.getDay() && date.getDate() !== 1) {\r\n              return d3.timeFormat('%-m/%-d')(date);\r\n          }\r\n          if (date.getDate() !== 1) {\r\n              return d3.timeFormat('%-m/%-d')(date);\r\n          }\r\n          if (date.getMonth()) {\r\n              return d3.timeFormat('%-m/%-d')(date);\r\n          }\r\n          return d3.timeFormat('%Y/%-m/%-d')(date);\r\n      };\r\n      $$.hiddenTargetIds = [];\r\n      $$.hiddenLegendIds = [];\r\n      $$.focusedTargetIds = [];\r\n      $$.defocusedTargetIds = [];\r\n      $$.xOrient = config.axis_rotated\r\n          ? config.axis_x_inner\r\n              ? 'right'\r\n              : 'left'\r\n          : config.axis_x_inner\r\n              ? 'top'\r\n              : 'bottom';\r\n      $$.yOrient = config.axis_rotated\r\n          ? config.axis_y_inner\r\n              ? 'top'\r\n              : 'bottom'\r\n          : config.axis_y_inner\r\n              ? 'right'\r\n              : 'left';\r\n      $$.y2Orient = config.axis_rotated\r\n          ? config.axis_y2_inner\r\n              ? 'bottom'\r\n              : 'top'\r\n          : config.axis_y2_inner\r\n              ? 'left'\r\n              : 'right';\r\n      $$.subXOrient = config.axis_rotated ? 'left' : 'bottom';\r\n      $$.isLegendRight = config.legend_position === 'right';\r\n      $$.isLegendInset = config.legend_position === 'inset';\r\n      $$.isLegendTop =\r\n          config.legend_inset_anchor === 'top-left' ||\r\n              config.legend_inset_anchor === 'top-right';\r\n      $$.isLegendLeft =\r\n          config.legend_inset_anchor === 'top-left' ||\r\n              config.legend_inset_anchor === 'bottom-left';\r\n      $$.legendStep = 0;\r\n      $$.legendItemWidth = 0;\r\n      $$.legendItemHeight = 0;\r\n      $$.currentMaxTickWidths = {\r\n          x: 0,\r\n          y: 0,\r\n          y2: 0\r\n      };\r\n      $$.rotated_padding_left = 30;\r\n      $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;\r\n      $$.rotated_padding_top = 5;\r\n      $$.withoutFadeIn = {};\r\n      $$.intervalForObserveInserted = undefined;\r\n      $$.axes.subx = d3.selectAll([]); // needs when excluding subchart.js\r\n  };\r\n  ChartInternal.prototype.initChartElements = function () {\r\n      if (this.initBar) {\r\n          this.initBar();\r\n      }\r\n      if (this.initLine) {\r\n          this.initLine();\r\n      }\r\n      if (this.initArc) {\r\n          this.initArc();\r\n      }\r\n      if (this.initGauge) {\r\n          this.initGauge();\r\n      }\r\n      if (this.initText) {\r\n          this.initText();\r\n      }\r\n  };\r\n  ChartInternal.prototype.initWithData = function (data) {\r\n      var $$ = this, d3 = $$.d3, config = $$.config;\r\n      var defs, main, binding = true;\r\n      $$.axis = new AxisClass($$);\r\n      if (!config.bindto) {\r\n          $$.selectChart = d3.selectAll([]);\r\n      }\r\n      else if (typeof config.bindto.node === 'function') {\r\n          $$.selectChart = config.bindto;\r\n      }\r\n      else {\r\n          $$.selectChart = d3.select(config.bindto);\r\n      }\r\n      if ($$.selectChart.empty()) {\r\n          $$.selectChart = d3\r\n              .select(document.createElement('div'))\r\n              .style('opacity', 0);\r\n          $$.observeInserted($$.selectChart);\r\n          binding = false;\r\n      }\r\n      $$.selectChart.html('').classed('c3', true);\r\n      // Init data as targets\r\n      $$.data.xs = {};\r\n      $$.data.targets = $$.convertDataToTargets(data);\r\n      if (config.data_filter) {\r\n          $$.data.targets = $$.data.targets.filter(config.data_filter);\r\n      }\r\n      // Set targets to hide if needed\r\n      if (config.data_hide) {\r\n          $$.addHiddenTargetIds(config.data_hide === true\r\n              ? $$.mapToIds($$.data.targets)\r\n              : config.data_hide);\r\n      }\r\n      if (config.legend_hide) {\r\n          $$.addHiddenLegendIds(config.legend_hide === true\r\n              ? $$.mapToIds($$.data.targets)\r\n              : config.legend_hide);\r\n      }\r\n      if ($$.isStanfordGraphType()) {\r\n          $$.initStanfordData();\r\n      }\r\n      // Init sizes and scales\r\n      $$.updateSizes();\r\n      $$.updateScales();\r\n      // Set domains for each scale\r\n      $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));\r\n      $$.y.domain($$.getYDomain($$.data.targets, 'y'));\r\n      $$.y2.domain($$.getYDomain($$.data.targets, 'y2'));\r\n      $$.subX.domain($$.x.domain());\r\n      $$.subY.domain($$.y.domain());\r\n      $$.subY2.domain($$.y2.domain());\r\n      // Save original x domain for zoom update\r\n      $$.orgXDomain = $$.x.domain();\r\n      /*-- Basic Elements --*/\r\n      // Define svgs\r\n      $$.svg = $$.selectChart\r\n          .append('svg')\r\n          .style('overflow', 'hidden')\r\n          .on('mouseenter', function () {\r\n          return config.onmouseover.call($$);\r\n      })\r\n          .on('mouseleave', function () {\r\n          return config.onmouseout.call($$);\r\n      });\r\n      if ($$.config.svg_classname) {\r\n          $$.svg.attr('class', $$.config.svg_classname);\r\n      }\r\n      // Define defs\r\n      defs = $$.svg.append('defs');\r\n      $$.clipChart = $$.appendClip(defs, $$.clipId);\r\n      $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);\r\n      $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);\r\n      $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);\r\n      $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);\r\n      $$.updateSvgSize();\r\n      // Define regions\r\n      main = $$.main = $$.svg.append('g').attr('transform', $$.getTranslate('main'));\r\n      if ($$.initPie) {\r\n          $$.initPie();\r\n      }\r\n      if ($$.initDragZoom) {\r\n          $$.initDragZoom();\r\n      }\r\n      if (config.subchart_show && $$.initSubchart) {\r\n          $$.initSubchart();\r\n      }\r\n      if ($$.initTooltip) {\r\n          $$.initTooltip();\r\n      }\r\n      if ($$.initLegend) {\r\n          $$.initLegend();\r\n      }\r\n      if ($$.initTitle) {\r\n          $$.initTitle();\r\n      }\r\n      if ($$.initZoom) {\r\n          $$.initZoom();\r\n      }\r\n      if ($$.isStanfordGraphType()) {\r\n          $$.drawColorScale();\r\n      }\r\n      // Update selection based on size and scale\r\n      // TODO: currently this must be called after initLegend because of update of sizes, but it should be done in initSubchart.\r\n      if (config.subchart_show && $$.initSubchartBrush) {\r\n          $$.initSubchartBrush();\r\n      }\r\n      /*-- Main Region --*/\r\n      // text when empty\r\n      main\r\n          .append('text')\r\n          .attr('class', CLASS.text + ' ' + CLASS.empty)\r\n          .attr('text-anchor', 'middle') // horizontal centering of text at x position in all browsers.\r\n          .attr('dominant-baseline', 'middle'); // vertical centering of text at y position in all browsers, except IE.\r\n      // Regions\r\n      $$.initRegion();\r\n      // Grids\r\n      $$.initGrid();\r\n      // Define g for chart area\r\n      main\r\n          .append('g')\r\n          .attr('clip-path', $$.clipPath)\r\n          .attr('class', CLASS.chart);\r\n      // Grid lines\r\n      if (config.grid_lines_front) {\r\n          $$.initGridLines();\r\n      }\r\n      $$.initStanfordElements();\r\n      // Cover whole with rects for events\r\n      $$.initEventRect();\r\n      // Define g for chart\r\n      $$.initChartElements();\r\n      // Add Axis\r\n      $$.axis.init();\r\n      // Set targets\r\n      $$.updateTargets($$.data.targets);\r\n      // Set default extent if defined\r\n      if (config.axis_x_selection) {\r\n          $$.brush.selectionAsValue($$.getDefaultSelection());\r\n      }\r\n      // Draw with targets\r\n      if (binding) {\r\n          $$.updateDimension();\r\n          $$.config.oninit.call($$);\r\n          $$.redraw({\r\n              withTransition: false,\r\n              withTransform: true,\r\n              withUpdateXDomain: true,\r\n              withUpdateOrgXDomain: true,\r\n              withTransitionForAxis: false\r\n          });\r\n      }\r\n      // Bind to resize event\r\n      $$.bindResize();\r\n      // Bind to window focus event\r\n      $$.bindWindowFocus();\r\n      // export element of the chart\r\n      $$.api.element = $$.selectChart.node();\r\n  };\r\n  ChartInternal.prototype.smoothLines = function (el, type) {\r\n      var $$ = this;\r\n      if (type === 'grid') {\r\n          el.each(function () {\r\n              var g = $$.d3.select(this), x1 = g.attr('x1'), x2 = g.attr('x2'), y1 = g.attr('y1'), y2 = g.attr('y2');\r\n              g.attr({\r\n                  x1: Math.ceil(x1),\r\n                  x2: Math.ceil(x2),\r\n                  y1: Math.ceil(y1),\r\n                  y2: Math.ceil(y2)\r\n              });\r\n          });\r\n      }\r\n  };\r\n  ChartInternal.prototype.updateSizes = function () {\r\n      var $$ = this, config = $$.config;\r\n      var legendHeight = $$.legend ? $$.getLegendHeight() : 0, legendWidth = $$.legend ? $$.getLegendWidth() : 0, legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight, hasArc = $$.hasArcType(), xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x'), subchartXAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x', true), subchartHeight = config.subchart_show && !hasArc\r\n          ? config.subchart_size_height + subchartXAxisHeight\r\n          : 0;\r\n      $$.currentWidth = $$.getCurrentWidth();\r\n      $$.currentHeight = $$.getCurrentHeight();\r\n      // for main\r\n      $$.margin = config.axis_rotated\r\n          ? {\r\n              top: $$.getHorizontalAxisHeight('y2') + $$.getCurrentPaddingTop(),\r\n              right: hasArc ? 0 : $$.getCurrentPaddingRight(),\r\n              bottom: $$.getHorizontalAxisHeight('y') +\r\n                  legendHeightForBottom +\r\n                  $$.getCurrentPaddingBottom(),\r\n              left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())\r\n          }\r\n          : {\r\n              top: 4 + $$.getCurrentPaddingTop(),\r\n              right: hasArc ? 0 : $$.getCurrentPaddingRight(),\r\n              bottom: xAxisHeight +\r\n                  subchartHeight +\r\n                  legendHeightForBottom +\r\n                  $$.getCurrentPaddingBottom(),\r\n              left: hasArc ? 0 : $$.getCurrentPaddingLeft()\r\n          };\r\n      // for subchart\r\n      $$.margin2 = config.axis_rotated\r\n          ? {\r\n              top: $$.margin.top,\r\n              right: NaN,\r\n              bottom: 20 + legendHeightForBottom,\r\n              left: $$.rotated_padding_left\r\n          }\r\n          : {\r\n              top: $$.currentHeight - subchartHeight - legendHeightForBottom,\r\n              right: NaN,\r\n              bottom: subchartXAxisHeight + legendHeightForBottom,\r\n              left: $$.margin.left\r\n          };\r\n      // for legend\r\n      $$.margin3 = {\r\n          top: 0,\r\n          right: NaN,\r\n          bottom: 0,\r\n          left: 0\r\n      };\r\n      if ($$.updateSizeForLegend) {\r\n          $$.updateSizeForLegend(legendHeight, legendWidth);\r\n      }\r\n      $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;\r\n      $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;\r\n      if ($$.width < 0) {\r\n          $$.width = 0;\r\n      }\r\n      if ($$.height < 0) {\r\n          $$.height = 0;\r\n      }\r\n      $$.width2 = config.axis_rotated\r\n          ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right\r\n          : $$.width;\r\n      $$.height2 = config.axis_rotated\r\n          ? $$.height\r\n          : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;\r\n      if ($$.width2 < 0) {\r\n          $$.width2 = 0;\r\n      }\r\n      if ($$.height2 < 0) {\r\n          $$.height2 = 0;\r\n      }\r\n      // for arc\r\n      $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);\r\n      $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);\r\n      if ($$.hasType('gauge') && !config.gauge_fullCircle) {\r\n          $$.arcHeight += $$.height - $$.getGaugeLabelHeight();\r\n      }\r\n      if ($$.updateRadius) {\r\n          $$.updateRadius();\r\n      }\r\n      if ($$.isLegendRight && hasArc) {\r\n          $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;\r\n      }\r\n  };\r\n  ChartInternal.prototype.updateTargets = function (targets) {\r\n      var $$ = this, config = $$.config;\r\n      /*-- Main --*/\r\n      //-- Text --//\r\n      $$.updateTargetsForText(targets);\r\n      //-- Bar --//\r\n      $$.updateTargetsForBar(targets);\r\n      //-- Line --//\r\n      $$.updateTargetsForLine(targets);\r\n      //-- Arc --//\r\n      if ($$.hasArcType() && $$.updateTargetsForArc) {\r\n          $$.updateTargetsForArc(targets);\r\n      }\r\n      /*-- Sub --*/\r\n      if (config.subchart_show && $$.updateTargetsForSubchart) {\r\n          $$.updateTargetsForSubchart(targets);\r\n      }\r\n      // Fade-in each chart\r\n      $$.showTargets();\r\n  };\r\n  ChartInternal.prototype.showTargets = function () {\r\n      var $$ = this;\r\n      $$.svg\r\n          .selectAll('.' + CLASS.target)\r\n          .filter(function (d) {\r\n          return $$.isTargetToShow(d.id);\r\n      })\r\n          .transition()\r\n          .duration($$.config.transition_duration)\r\n          .style('opacity', 1);\r\n  };\r\n  ChartInternal.prototype.redraw = function (options, transitions) {\r\n      var $$ = this, main = $$.main, d3 = $$.d3, config = $$.config;\r\n      var areaIndices = $$.getShapeIndices($$.isAreaType), barIndices = $$.getShapeIndices($$.isBarType), lineIndices = $$.getShapeIndices($$.isLineType);\r\n      var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis, withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend, withEventRect, withDimension, withUpdateXAxis;\r\n      var hideAxis = $$.hasArcType();\r\n      var drawArea, drawBar, drawLine, xForText, yForText;\r\n      var duration, durationForExit, durationForAxis;\r\n      var transitionsToWait, waitForDraw, flow, transition;\r\n      var targetsToShow = $$.filterTargetsToShow($$.data.targets), tickValues, i, intervalForCulling, xDomainForZoom;\r\n      var xv = $$.xv.bind($$), cx, cy;\r\n      options = options || {};\r\n      withY = getOption(options, 'withY', true);\r\n      withSubchart = getOption(options, 'withSubchart', true);\r\n      withTransition = getOption(options, 'withTransition', true);\r\n      withTransform = getOption(options, 'withTransform', false);\r\n      withUpdateXDomain = getOption(options, 'withUpdateXDomain', false);\r\n      withUpdateOrgXDomain = getOption(options, 'withUpdateOrgXDomain', false);\r\n      withTrimXDomain = getOption(options, 'withTrimXDomain', true);\r\n      withUpdateXAxis = getOption(options, 'withUpdateXAxis', withUpdateXDomain);\r\n      withLegend = getOption(options, 'withLegend', false);\r\n      withEventRect = getOption(options, 'withEventRect', true);\r\n      withDimension = getOption(options, 'withDimension', true);\r\n      withTransitionForExit = getOption(options, 'withTransitionForExit', withTransition);\r\n      withTransitionForAxis = getOption(options, 'withTransitionForAxis', withTransition);\r\n      duration = withTransition ? config.transition_duration : 0;\r\n      durationForExit = withTransitionForExit ? duration : 0;\r\n      durationForAxis = withTransitionForAxis ? duration : 0;\r\n      transitions = transitions || $$.axis.generateTransitions(durationForAxis);\r\n      // update legend and transform each g\r\n      if (withLegend && config.legend_show) {\r\n          $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);\r\n      }\r\n      else if (withDimension) {\r\n          // need to update dimension (e.g. axis.y.tick.values) because y tick values should change\r\n          // no need to update axis in it because they will be updated in redraw()\r\n          $$.updateDimension(true);\r\n      }\r\n      // MEMO: needed for grids calculation\r\n      if ($$.isCategorized() && targetsToShow.length === 0) {\r\n          $$.x.domain([0, $$.axes.x.selectAll('.tick').size()]);\r\n      }\r\n      if (targetsToShow.length) {\r\n          $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);\r\n          if (!config.axis_x_tick_values) {\r\n              tickValues = $$.axis.updateXAxisTickValues(targetsToShow);\r\n          }\r\n      }\r\n      else {\r\n          $$.xAxis.tickValues([]);\r\n          $$.subXAxis.tickValues([]);\r\n      }\r\n      if (config.zoom_rescale && !options.flow) {\r\n          xDomainForZoom = $$.x.orgDomain();\r\n      }\r\n      $$.y.domain($$.getYDomain(targetsToShow, 'y', xDomainForZoom));\r\n      $$.y2.domain($$.getYDomain(targetsToShow, 'y2', xDomainForZoom));\r\n      if (!config.axis_y_tick_values && config.axis_y_tick_count) {\r\n          $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));\r\n      }\r\n      if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {\r\n          $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));\r\n      }\r\n      // axes\r\n      $$.axis.redraw(durationForAxis, hideAxis);\r\n      // Update axis label\r\n      $$.axis.updateLabels(withTransition);\r\n      // show/hide if manual culling needed\r\n      if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {\r\n          if (config.axis_x_tick_culling && tickValues) {\r\n              for (i = 1; i < tickValues.length; i++) {\r\n                  if (tickValues.length / i < config.axis_x_tick_culling_max) {\r\n                      intervalForCulling = i;\r\n                      break;\r\n                  }\r\n              }\r\n              $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').each(function (e) {\r\n                  var index = tickValues.indexOf(e);\r\n                  if (index >= 0) {\r\n                      d3.select(this).style('display', index % intervalForCulling ? 'none' : 'block');\r\n                  }\r\n              });\r\n          }\r\n          else {\r\n              $$.svg\r\n                  .selectAll('.' + CLASS.axisX + ' .tick text')\r\n                  .style('display', 'block');\r\n          }\r\n      }\r\n      // setup drawer - MEMO: these must be called after axis updated\r\n      drawArea = $$.generateDrawArea\r\n          ? $$.generateDrawArea(areaIndices, false)\r\n          : undefined;\r\n      drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : undefined;\r\n      drawLine = $$.generateDrawLine\r\n          ? $$.generateDrawLine(lineIndices, false)\r\n          : undefined;\r\n      xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);\r\n      yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);\r\n      // update circleY based on updated parameters\r\n      $$.updateCircleY();\r\n      // generate circle x/y functions depending on updated params\r\n      cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);\r\n      cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);\r\n      // Update sub domain\r\n      if (withY) {\r\n          $$.subY.domain($$.getYDomain(targetsToShow, 'y'));\r\n          $$.subY2.domain($$.getYDomain(targetsToShow, 'y2'));\r\n      }\r\n      // xgrid focus\r\n      $$.updateXgridFocus();\r\n      // Data empty label positioning and text.\r\n      main\r\n          .select('text.' + CLASS.text + '.' + CLASS.empty)\r\n          .attr('x', $$.width / 2)\r\n          .attr('y', $$.height / 2)\r\n          .text(config.data_empty_label_text)\r\n          .transition()\r\n          .style('opacity', targetsToShow.length ? 0 : 1);\r\n      // event rect\r\n      if (withEventRect) {\r\n          $$.redrawEventRect();\r\n      }\r\n      // grid\r\n      $$.updateGrid(duration);\r\n      $$.updateStanfordElements(duration);\r\n      // rect for regions\r\n      $$.updateRegion(duration);\r\n      // bars\r\n      $$.updateBar(durationForExit);\r\n      // lines, areas and circles\r\n      $$.updateLine(durationForExit);\r\n      $$.updateArea(durationForExit);\r\n      $$.updateCircle(cx, cy);\r\n      // text\r\n      if ($$.hasDataLabel()) {\r\n          $$.updateText(xForText, yForText, durationForExit);\r\n      }\r\n      // title\r\n      if ($$.redrawTitle) {\r\n          $$.redrawTitle();\r\n      }\r\n      // arc\r\n      if ($$.redrawArc) {\r\n          $$.redrawArc(duration, durationForExit, withTransform);\r\n      }\r\n      // subchart\r\n      if (config.subchart_show && $$.redrawSubchart) {\r\n          $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);\r\n      }\r\n      if ($$.isStanfordGraphType()) {\r\n          $$.drawColorScale();\r\n      }\r\n      // circles for select\r\n      main\r\n          .selectAll('.' + CLASS.selectedCircles)\r\n          .filter($$.isBarType.bind($$))\r\n          .selectAll('circle')\r\n          .remove();\r\n      if (options.flow) {\r\n          flow = $$.generateFlow({\r\n              targets: targetsToShow,\r\n              flow: options.flow,\r\n              duration: options.flow.duration,\r\n              drawBar: drawBar,\r\n              drawLine: drawLine,\r\n              drawArea: drawArea,\r\n              cx: cx,\r\n              cy: cy,\r\n              xv: xv,\r\n              xForText: xForText,\r\n              yForText: yForText\r\n          });\r\n      }\r\n      if (duration && $$.isTabVisible()) {\r\n          // Only use transition if tab visible. See #938.\r\n          // transition should be derived from one transition\r\n          transition = d3.transition().duration(duration);\r\n          transitionsToWait = [];\r\n          [\r\n              $$.redrawBar(drawBar, true, transition),\r\n              $$.redrawLine(drawLine, true, transition),\r\n              $$.redrawArea(drawArea, true, transition),\r\n              $$.redrawCircle(cx, cy, true, transition),\r\n              $$.redrawText(xForText, yForText, options.flow, true, transition),\r\n              $$.redrawRegion(true, transition),\r\n              $$.redrawGrid(true, transition)\r\n          ].forEach(function (transitions) {\r\n              transitions.forEach(function (transition) {\r\n                  transitionsToWait.push(transition);\r\n              });\r\n          });\r\n          // Wait for end of transitions to call flow and onrendered callback\r\n          waitForDraw = $$.generateWait();\r\n          transitionsToWait.forEach(function (t) {\r\n              waitForDraw.add(t);\r\n          });\r\n          waitForDraw(function () {\r\n              if (flow) {\r\n                  flow();\r\n              }\r\n              if (config.onrendered) {\r\n                  config.onrendered.call($$);\r\n              }\r\n          });\r\n      }\r\n      else {\r\n          $$.redrawBar(drawBar);\r\n          $$.redrawLine(drawLine);\r\n          $$.redrawArea(drawArea);\r\n          $$.redrawCircle(cx, cy);\r\n          $$.redrawText(xForText, yForText, options.flow);\r\n          $$.redrawRegion();\r\n          $$.redrawGrid();\r\n          if (flow) {\r\n              flow();\r\n          }\r\n          if (config.onrendered) {\r\n              config.onrendered.call($$);\r\n          }\r\n      }\r\n      // update fadein condition\r\n      $$.mapToIds($$.data.targets).forEach(function (id) {\r\n          $$.withoutFadeIn[id] = true;\r\n      });\r\n  };\r\n  ChartInternal.prototype.updateAndRedraw = function (options) {\r\n      var $$ = this, config = $$.config, transitions;\r\n      options = options || {};\r\n      // same with redraw\r\n      options.withTransition = getOption(options, 'withTransition', true);\r\n      options.withTransform = getOption(options, 'withTransform', false);\r\n      options.withLegend = getOption(options, 'withLegend', false);\r\n      // NOT same with redraw\r\n      options.withUpdateXDomain = getOption(options, 'withUpdateXDomain', true);\r\n      options.withUpdateOrgXDomain = getOption(options, 'withUpdateOrgXDomain', true);\r\n      options.withTransitionForExit = false;\r\n      options.withTransitionForTransform = getOption(options, 'withTransitionForTransform', options.withTransition);\r\n      // MEMO: this needs to be called before updateLegend and it means this ALWAYS needs to be called)\r\n      $$.updateSizes();\r\n      // MEMO: called in updateLegend in redraw if withLegend\r\n      if (!(options.withLegend && config.legend_show)) {\r\n          transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);\r\n          // Update scales\r\n          $$.updateScales();\r\n          $$.updateSvgSize();\r\n          // Update g positions\r\n          $$.transformAll(options.withTransitionForTransform, transitions);\r\n      }\r\n      // Draw with new sizes & scales\r\n      $$.redraw(options, transitions);\r\n  };\r\n  ChartInternal.prototype.redrawWithoutRescale = function () {\r\n      this.redraw({\r\n          withY: false,\r\n          withSubchart: false,\r\n          withEventRect: false,\r\n          withTransitionForAxis: false\r\n      });\r\n  };\r\n  ChartInternal.prototype.isTimeSeries = function () {\r\n      return this.config.axis_x_type === 'timeseries';\r\n  };\r\n  ChartInternal.prototype.isCategorized = function () {\r\n      return this.config.axis_x_type.indexOf('categor') >= 0;\r\n  };\r\n  ChartInternal.prototype.isCustomX = function () {\r\n      var $$ = this, config = $$.config;\r\n      return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));\r\n  };\r\n  ChartInternal.prototype.isTimeSeriesY = function () {\r\n      return this.config.axis_y_type === 'timeseries';\r\n  };\r\n  ChartInternal.prototype.getTranslate = function (target) {\r\n      var $$ = this, config = $$.config, x, y;\r\n      if (target === 'main') {\r\n          x = asHalfPixel($$.margin.left);\r\n          y = asHalfPixel($$.margin.top);\r\n      }\r\n      else if (target === 'context') {\r\n          x = asHalfPixel($$.margin2.left);\r\n          y = asHalfPixel($$.margin2.top);\r\n      }\r\n      else if (target === 'legend') {\r\n          x = $$.margin3.left;\r\n          y = $$.margin3.top;\r\n      }\r\n      else if (target === 'x') {\r\n          x = 0;\r\n          y = config.axis_rotated ? 0 : $$.height;\r\n      }\r\n      else if (target === 'y') {\r\n          x = 0;\r\n          y = config.axis_rotated ? $$.height : 0;\r\n      }\r\n      else if (target === 'y2') {\r\n          x = config.axis_rotated ? 0 : $$.width;\r\n          y = config.axis_rotated ? 1 : 0;\r\n      }\r\n      else if (target === 'subx') {\r\n          x = 0;\r\n          y = config.axis_rotated ? 0 : $$.height2;\r\n      }\r\n      else if (target === 'arc') {\r\n          x = $$.arcWidth / 2;\r\n          y = $$.arcHeight / 2 - ($$.hasType('gauge') ? 6 : 0); // to prevent wrong display of min and max label\r\n      }\r\n      return 'translate(' + x + ',' + y + ')';\r\n  };\r\n  ChartInternal.prototype.initialOpacity = function (d) {\r\n      return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;\r\n  };\r\n  ChartInternal.prototype.initialOpacityForCircle = function (d) {\r\n      return d.value !== null && this.withoutFadeIn[d.id]\r\n          ? this.opacityForCircle(d)\r\n          : 0;\r\n  };\r\n  ChartInternal.prototype.opacityForCircle = function (d) {\r\n      var isPointShouldBeShown = isFunction(this.config.point_show)\r\n          ? this.config.point_show(d)\r\n          : this.config.point_show;\r\n      var opacity = isPointShouldBeShown || this.isStanfordType(d) ? 1 : 0;\r\n      return isValue(d.value) ? (this.isScatterType(d) ? 0.5 : opacity) : 0;\r\n  };\r\n  ChartInternal.prototype.opacityForText = function () {\r\n      return this.hasDataLabel() ? 1 : 0;\r\n  };\r\n  ChartInternal.prototype.xx = function (d) {\r\n      return d ? this.x(d.x) : null;\r\n  };\r\n  ChartInternal.prototype.xvCustom = function (d, xyValue) {\r\n      var $$ = this, value = xyValue ? d[xyValue] : d.value;\r\n      if ($$.isTimeSeries()) {\r\n          value = $$.parseDate(d.value);\r\n      }\r\n      else if ($$.isCategorized() && typeof d.value === 'string') {\r\n          value = $$.config.axis_x_categories.indexOf(d.value);\r\n      }\r\n      return Math.ceil($$.x(value));\r\n  };\r\n  ChartInternal.prototype.yvCustom = function (d, xyValue) {\r\n      var $$ = this, yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y, value = xyValue ? d[xyValue] : d.value;\r\n      return Math.ceil(yScale(value));\r\n  };\r\n  ChartInternal.prototype.xv = function (d) {\r\n      var $$ = this, value = d.value;\r\n      if ($$.isTimeSeries()) {\r\n          value = $$.parseDate(d.value);\r\n      }\r\n      else if ($$.isCategorized() && typeof d.value === 'string') {\r\n          value = $$.config.axis_x_categories.indexOf(d.value);\r\n      }\r\n      return Math.ceil($$.x(value));\r\n  };\r\n  ChartInternal.prototype.yv = function (d) {\r\n      var $$ = this, yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y;\r\n      return Math.ceil(yScale(d.value));\r\n  };\r\n  ChartInternal.prototype.subxx = function (d) {\r\n      return d ? this.subX(d.x) : null;\r\n  };\r\n  ChartInternal.prototype.transformMain = function (withTransition, transitions) {\r\n      var $$ = this, xAxis, yAxis, y2Axis;\r\n      if (transitions && transitions.axisX) {\r\n          xAxis = transitions.axisX;\r\n      }\r\n      else {\r\n          xAxis = $$.main.select('.' + CLASS.axisX);\r\n          if (withTransition) {\r\n              xAxis = xAxis.transition();\r\n          }\r\n      }\r\n      if (transitions && transitions.axisY) {\r\n          yAxis = transitions.axisY;\r\n      }\r\n      else {\r\n          yAxis = $$.main.select('.' + CLASS.axisY);\r\n          if (withTransition) {\r\n              yAxis = yAxis.transition();\r\n          }\r\n      }\r\n      if (transitions && transitions.axisY2) {\r\n          y2Axis = transitions.axisY2;\r\n      }\r\n      else {\r\n          y2Axis = $$.main.select('.' + CLASS.axisY2);\r\n          if (withTransition) {\r\n              y2Axis = y2Axis.transition();\r\n          }\r\n      }\r\n      (withTransition ? $$.main.transition() : $$.main).attr('transform', $$.getTranslate('main'));\r\n      xAxis.attr('transform', $$.getTranslate('x'));\r\n      yAxis.attr('transform', $$.getTranslate('y'));\r\n      y2Axis.attr('transform', $$.getTranslate('y2'));\r\n      $$.main\r\n          .select('.' + CLASS.chartArcs)\r\n          .attr('transform', $$.getTranslate('arc'));\r\n  };\r\n  ChartInternal.prototype.transformAll = function (withTransition, transitions) {\r\n      var $$ = this;\r\n      $$.transformMain(withTransition, transitions);\r\n      if ($$.config.subchart_show) {\r\n          $$.transformContext(withTransition, transitions);\r\n      }\r\n      if ($$.legend) {\r\n          $$.transformLegend(withTransition);\r\n      }\r\n  };\r\n  ChartInternal.prototype.updateSvgSize = function () {\r\n      var $$ = this, brush = $$.svg.select(\".\" + CLASS.brush + \" .overlay\");\r\n      $$.svg.attr('width', $$.currentWidth).attr('height', $$.currentHeight);\r\n      $$.svg\r\n          .selectAll(['#' + $$.clipId, '#' + $$.clipIdForGrid])\r\n          .select('rect')\r\n          .attr('width', $$.width)\r\n          .attr('height', $$.height);\r\n      $$.svg\r\n          .select('#' + $$.clipIdForXAxis)\r\n          .select('rect')\r\n          .attr('x', $$.getXAxisClipX.bind($$))\r\n          .attr('y', $$.getXAxisClipY.bind($$))\r\n          .attr('width', $$.getXAxisClipWidth.bind($$))\r\n          .attr('height', $$.getXAxisClipHeight.bind($$));\r\n      $$.svg\r\n          .select('#' + $$.clipIdForYAxis)\r\n          .select('rect')\r\n          .attr('x', $$.getYAxisClipX.bind($$))\r\n          .attr('y', $$.getYAxisClipY.bind($$))\r\n          .attr('width', $$.getYAxisClipWidth.bind($$))\r\n          .attr('height', $$.getYAxisClipHeight.bind($$));\r\n      $$.svg\r\n          .select('#' + $$.clipIdForSubchart)\r\n          .select('rect')\r\n          .attr('width', $$.width)\r\n          .attr('height', (brush.size() && brush.attr('height')) || 0);\r\n      // MEMO: parent div's height will be bigger than svg when <!DOCTYPE html>\r\n      $$.selectChart.style('max-height', $$.currentHeight + 'px');\r\n  };\r\n  ChartInternal.prototype.updateDimension = function (withoutAxis) {\r\n      var $$ = this;\r\n      if (!withoutAxis) {\r\n          if ($$.config.axis_rotated) {\r\n              $$.axes.x.call($$.xAxis);\r\n              $$.axes.subx.call($$.subXAxis);\r\n          }\r\n          else {\r\n              $$.axes.y.call($$.yAxis);\r\n              $$.axes.y2.call($$.y2Axis);\r\n          }\r\n      }\r\n      $$.updateSizes();\r\n      $$.updateScales();\r\n      $$.updateSvgSize();\r\n      $$.transformAll(false);\r\n  };\r\n  ChartInternal.prototype.observeInserted = function (selection) {\r\n      var $$ = this, observer;\r\n      if (typeof MutationObserver === 'undefined') {\r\n          window.console.error('MutationObserver not defined.');\r\n          return;\r\n      }\r\n      observer = new MutationObserver(function (mutations) {\r\n          mutations.forEach(function (mutation) {\r\n              if (mutation.type === 'childList' && mutation.previousSibling) {\r\n                  observer.disconnect();\r\n                  // need to wait for completion of load because size calculation requires the actual sizes determined after that completion\r\n                  $$.intervalForObserveInserted = window.setInterval(function () {\r\n                      // parentNode will NOT be null when completed\r\n                      if (selection.node().parentNode) {\r\n                          window.clearInterval($$.intervalForObserveInserted);\r\n                          $$.updateDimension();\r\n                          if ($$.brush) {\r\n                              $$.brush.update();\r\n                          }\r\n                          $$.config.oninit.call($$);\r\n                          $$.redraw({\r\n                              withTransform: true,\r\n                              withUpdateXDomain: true,\r\n                              withUpdateOrgXDomain: true,\r\n                              withTransition: false,\r\n                              withTransitionForTransform: false,\r\n                              withLegend: true\r\n                          });\r\n                          selection.transition().style('opacity', 1);\r\n                      }\r\n                  }, 10);\r\n              }\r\n          });\r\n      });\r\n      observer.observe(selection.node(), {\r\n          attributes: true,\r\n          childList: true,\r\n          characterData: true\r\n      });\r\n  };\r\n  /**\r\n   * Binds handlers to the window resize event.\r\n   */\r\n  ChartInternal.prototype.bindResize = function () {\r\n      var $$ = this, config = $$.config;\r\n      $$.resizeFunction = $$.generateResize(); // need to call .remove\r\n      $$.resizeFunction.add(function () {\r\n          config.onresize.call($$);\r\n      });\r\n      if (config.resize_auto) {\r\n          $$.resizeFunction.add(function () {\r\n              if ($$.resizeTimeout !== undefined) {\r\n                  window.clearTimeout($$.resizeTimeout);\r\n              }\r\n              $$.resizeTimeout = window.setTimeout(function () {\r\n                  delete $$.resizeTimeout;\r\n                  $$.updateAndRedraw({\r\n                      withUpdateXDomain: false,\r\n                      withUpdateOrgXDomain: false,\r\n                      withTransition: false,\r\n                      withTransitionForTransform: false,\r\n                      withLegend: true\r\n                  });\r\n                  if ($$.brush) {\r\n                      $$.brush.update();\r\n                  }\r\n              }, 100);\r\n          });\r\n      }\r\n      $$.resizeFunction.add(function () {\r\n          config.onresized.call($$);\r\n      });\r\n      $$.resizeIfElementDisplayed = function () {\r\n          // if element not displayed skip it\r\n          if ($$.api == null || !$$.api.element.offsetParent) {\r\n              return;\r\n          }\r\n          $$.resizeFunction();\r\n      };\r\n      window.addEventListener('resize', $$.resizeIfElementDisplayed, false);\r\n  };\r\n  /**\r\n   * Binds handlers to the window focus event.\r\n   */\r\n  ChartInternal.prototype.bindWindowFocus = function () {\r\n      var _this = this;\r\n      if (this.windowFocusHandler) {\r\n          // The handler is already set\r\n          return;\r\n      }\r\n      this.windowFocusHandler = function () {\r\n          _this.redraw();\r\n      };\r\n      window.addEventListener('focus', this.windowFocusHandler);\r\n  };\r\n  /**\r\n   * Unbinds from the window focus event.\r\n   */\r\n  ChartInternal.prototype.unbindWindowFocus = function () {\r\n      window.removeEventListener('focus', this.windowFocusHandler);\r\n      delete this.windowFocusHandler;\r\n  };\r\n  ChartInternal.prototype.generateResize = function () {\r\n      var resizeFunctions = [];\r\n      function callResizeFunctions() {\r\n          resizeFunctions.forEach(function (f) {\r\n              f();\r\n          });\r\n      }\r\n      callResizeFunctions.add = function (f) {\r\n          resizeFunctions.push(f);\r\n      };\r\n      callResizeFunctions.remove = function (f) {\r\n          for (var i = 0; i < resizeFunctions.length; i++) {\r\n              if (resizeFunctions[i] === f) {\r\n                  resizeFunctions.splice(i, 1);\r\n                  break;\r\n              }\r\n          }\r\n      };\r\n      return callResizeFunctions;\r\n  };\r\n  ChartInternal.prototype.endall = function (transition, callback) {\r\n      var n = 0;\r\n      transition\r\n          .each(function () {\r\n          ++n;\r\n      })\r\n          .on('end', function () {\r\n          if (!--n) {\r\n              callback.apply(this, arguments);\r\n          }\r\n      });\r\n  };\r\n  ChartInternal.prototype.generateWait = function () {\r\n      var $$ = this;\r\n      var transitionsToWait = [], f = function (callback) {\r\n          var timer = setInterval(function () {\r\n              if (!$$.isTabVisible()) {\r\n                  return;\r\n              }\r\n              var done = 0;\r\n              transitionsToWait.forEach(function (t) {\r\n                  if (t.empty()) {\r\n                      done += 1;\r\n                      return;\r\n                  }\r\n                  try {\r\n                      t.transition();\r\n                  }\r\n                  catch (e) {\r\n                      done += 1;\r\n                  }\r\n              });\r\n              if (done === transitionsToWait.length) {\r\n                  clearInterval(timer);\r\n                  if (callback) {\r\n                      callback();\r\n                  }\r\n              }\r\n          }, 50);\r\n      };\r\n      f.add = function (transition) {\r\n          transitionsToWait.push(transition);\r\n      };\r\n      return f;\r\n  };\r\n  ChartInternal.prototype.parseDate = function (date) {\r\n      var $$ = this, parsedDate;\r\n      if (date instanceof Date) {\r\n          parsedDate = date;\r\n      }\r\n      else if (typeof date === 'string') {\r\n          parsedDate = $$.dataTimeParse(date);\r\n      }\r\n      else if (typeof date === 'object') {\r\n          parsedDate = new Date(+date);\r\n      }\r\n      else if (typeof date === 'number' && !isNaN(date)) {\r\n          parsedDate = new Date(+date);\r\n      }\r\n      if (!parsedDate || isNaN(+parsedDate)) {\r\n          window.console.error(\"Failed to parse x '\" + date + \"' to Date object\");\r\n      }\r\n      return parsedDate;\r\n  };\r\n  ChartInternal.prototype.isTabVisible = function () {\r\n      return !document.hidden;\r\n  };\r\n  ChartInternal.prototype.getPathBox = getPathBox;\r\n  ChartInternal.prototype.CLASS = CLASS;\n\n  /* jshint ignore:start */\r\n  (function () {\r\n      if (!('SVGPathSeg' in window)) {\r\n          // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSeg\r\n          window.SVGPathSeg = function (type, typeAsLetter, owningPathSegList) {\r\n              this.pathSegType = type;\r\n              this.pathSegTypeAsLetter = typeAsLetter;\r\n              this._owningPathSegList = owningPathSegList;\r\n          };\r\n          window.SVGPathSeg.prototype.classname = 'SVGPathSeg';\r\n          window.SVGPathSeg.PATHSEG_UNKNOWN = 0;\r\n          window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;\r\n          window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;\r\n          window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;\r\n          window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;\r\n          window.SVGPathSeg.PATHSEG_LINETO_REL = 5;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;\r\n          window.SVGPathSeg.PATHSEG_ARC_ABS = 10;\r\n          window.SVGPathSeg.PATHSEG_ARC_REL = 11;\r\n          window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;\r\n          window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;\r\n          window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;\r\n          window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;\r\n          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;\r\n          // Notify owning PathSegList on any changes so they can be synchronized back to the path element.\r\n          window.SVGPathSeg.prototype._segmentChanged = function () {\r\n              if (this._owningPathSegList)\r\n                  this._owningPathSegList.segmentChanged(this);\r\n          };\r\n          window.SVGPathSegClosePath = function (owningPathSegList) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, 'z', owningPathSegList);\r\n          };\r\n          window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegClosePath.prototype.toString = function () {\r\n              return '[object SVGPathSegClosePath]';\r\n          };\r\n          window.SVGPathSegClosePath.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter;\r\n          };\r\n          window.SVGPathSegClosePath.prototype.clone = function () {\r\n              return new window.SVGPathSegClosePath(undefined);\r\n          };\r\n          window.SVGPathSegMovetoAbs = function (owningPathSegList, x, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, 'M', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegMovetoAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegMovetoAbs]';\r\n          };\r\n          window.SVGPathSegMovetoAbs.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegMovetoAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegMovetoAbs(undefined, this._x, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegMovetoRel = function (owningPathSegList, x, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, 'm', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegMovetoRel.prototype.toString = function () {\r\n              return '[object SVGPathSegMovetoRel]';\r\n          };\r\n          window.SVGPathSegMovetoRel.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegMovetoRel.prototype.clone = function () {\r\n              return new window.SVGPathSegMovetoRel(undefined, this._x, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegMovetoRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegLinetoAbs = function (owningPathSegList, x, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, 'L', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegLinetoAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegLinetoAbs]';\r\n          };\r\n          window.SVGPathSegLinetoAbs.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegLinetoAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegLinetoAbs(undefined, this._x, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegLinetoRel = function (owningPathSegList, x, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, 'l', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegLinetoRel.prototype.toString = function () {\r\n              return '[object SVGPathSegLinetoRel]';\r\n          };\r\n          window.SVGPathSegLinetoRel.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegLinetoRel.prototype.clone = function () {\r\n              return new window.SVGPathSegLinetoRel(undefined, this._x, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegLinetoRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoCubicAbs = function (owningPathSegList, x, y, x1, y1, x2, y2) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, 'C', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._x1 = x1;\r\n              this._y1 = y1;\r\n              this._x2 = x2;\r\n              this._y2 = y2;\r\n          };\r\n          window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoCubicAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoCubicAbs]';\r\n          };\r\n          window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._x1 +\r\n                  ' ' +\r\n                  this._y1 +\r\n                  ' ' +\r\n                  this._x2 +\r\n                  ' ' +\r\n                  this._y2 +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegCurvetoCubicAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x1', {\r\n              get: function () {\r\n                  return this._x1;\r\n              },\r\n              set: function (x1) {\r\n                  this._x1 = x1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y1', {\r\n              get: function () {\r\n                  return this._y1;\r\n              },\r\n              set: function (y1) {\r\n                  this._y1 = y1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'x2', {\r\n              get: function () {\r\n                  return this._x2;\r\n              },\r\n              set: function (x2) {\r\n                  this._x2 = x2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, 'y2', {\r\n              get: function () {\r\n                  return this._y2;\r\n              },\r\n              set: function (y2) {\r\n                  this._y2 = y2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoCubicRel = function (owningPathSegList, x, y, x1, y1, x2, y2) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, 'c', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._x1 = x1;\r\n              this._y1 = y1;\r\n              this._x2 = x2;\r\n              this._y2 = y2;\r\n          };\r\n          window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoCubicRel.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoCubicRel]';\r\n          };\r\n          window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._x1 +\r\n                  ' ' +\r\n                  this._y1 +\r\n                  ' ' +\r\n                  this._x2 +\r\n                  ' ' +\r\n                  this._y2 +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegCurvetoCubicRel.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x1', {\r\n              get: function () {\r\n                  return this._x1;\r\n              },\r\n              set: function (x1) {\r\n                  this._x1 = x1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y1', {\r\n              get: function () {\r\n                  return this._y1;\r\n              },\r\n              set: function (y1) {\r\n                  this._y1 = y1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'x2', {\r\n              get: function () {\r\n                  return this._x2;\r\n              },\r\n              set: function (x2) {\r\n                  this._x2 = x2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, 'y2', {\r\n              get: function () {\r\n                  return this._y2;\r\n              },\r\n              set: function (y2) {\r\n                  this._y2 = y2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoQuadraticAbs = function (owningPathSegList, x, y, x1, y1) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, 'Q', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._x1 = x1;\r\n              this._y1 = y1;\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoQuadraticAbs]';\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._x1 +\r\n                  ' ' +\r\n                  this._y1 +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'x1', {\r\n              get: function () {\r\n                  return this._x1;\r\n              },\r\n              set: function (x1) {\r\n                  this._x1 = x1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, 'y1', {\r\n              get: function () {\r\n                  return this._y1;\r\n              },\r\n              set: function (y1) {\r\n                  this._y1 = y1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoQuadraticRel = function (owningPathSegList, x, y, x1, y1) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, 'q', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._x1 = x1;\r\n              this._y1 = y1;\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoQuadraticRel]';\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._x1 +\r\n                  ' ' +\r\n                  this._y1 +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'x1', {\r\n              get: function () {\r\n                  return this._x1;\r\n              },\r\n              set: function (x1) {\r\n                  this._x1 = x1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, 'y1', {\r\n              get: function () {\r\n                  return this._y1;\r\n              },\r\n              set: function (y1) {\r\n                  this._y1 = y1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegArcAbs = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, 'A', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._r1 = r1;\r\n              this._r2 = r2;\r\n              this._angle = angle;\r\n              this._largeArcFlag = largeArcFlag;\r\n              this._sweepFlag = sweepFlag;\r\n          };\r\n          window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegArcAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegArcAbs]';\r\n          };\r\n          window.SVGPathSegArcAbs.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._r1 +\r\n                  ' ' +\r\n                  this._r2 +\r\n                  ' ' +\r\n                  this._angle +\r\n                  ' ' +\r\n                  (this._largeArcFlag ? '1' : '0') +\r\n                  ' ' +\r\n                  (this._sweepFlag ? '1' : '0') +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegArcAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r1', {\r\n              get: function () {\r\n                  return this._r1;\r\n              },\r\n              set: function (r1) {\r\n                  this._r1 = r1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'r2', {\r\n              get: function () {\r\n                  return this._r2;\r\n              },\r\n              set: function (r2) {\r\n                  this._r2 = r2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'angle', {\r\n              get: function () {\r\n                  return this._angle;\r\n              },\r\n              set: function (angle) {\r\n                  this._angle = angle;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'largeArcFlag', {\r\n              get: function () {\r\n                  return this._largeArcFlag;\r\n              },\r\n              set: function (largeArcFlag) {\r\n                  this._largeArcFlag = largeArcFlag;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcAbs.prototype, 'sweepFlag', {\r\n              get: function () {\r\n                  return this._sweepFlag;\r\n              },\r\n              set: function (sweepFlag) {\r\n                  this._sweepFlag = sweepFlag;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegArcRel = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, 'a', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._r1 = r1;\r\n              this._r2 = r2;\r\n              this._angle = angle;\r\n              this._largeArcFlag = largeArcFlag;\r\n              this._sweepFlag = sweepFlag;\r\n          };\r\n          window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegArcRel.prototype.toString = function () {\r\n              return '[object SVGPathSegArcRel]';\r\n          };\r\n          window.SVGPathSegArcRel.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._r1 +\r\n                  ' ' +\r\n                  this._r2 +\r\n                  ' ' +\r\n                  this._angle +\r\n                  ' ' +\r\n                  (this._largeArcFlag ? '1' : '0') +\r\n                  ' ' +\r\n                  (this._sweepFlag ? '1' : '0') +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegArcRel.prototype.clone = function () {\r\n              return new window.SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegArcRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r1', {\r\n              get: function () {\r\n                  return this._r1;\r\n              },\r\n              set: function (r1) {\r\n                  this._r1 = r1;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcRel.prototype, 'r2', {\r\n              get: function () {\r\n                  return this._r2;\r\n              },\r\n              set: function (r2) {\r\n                  this._r2 = r2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcRel.prototype, 'angle', {\r\n              get: function () {\r\n                  return this._angle;\r\n              },\r\n              set: function (angle) {\r\n                  this._angle = angle;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcRel.prototype, 'largeArcFlag', {\r\n              get: function () {\r\n                  return this._largeArcFlag;\r\n              },\r\n              set: function (largeArcFlag) {\r\n                  this._largeArcFlag = largeArcFlag;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegArcRel.prototype, 'sweepFlag', {\r\n              get: function () {\r\n                  return this._sweepFlag;\r\n              },\r\n              set: function (sweepFlag) {\r\n                  this._sweepFlag = sweepFlag;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegLinetoHorizontalAbs = function (owningPathSegList, x) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, 'H', owningPathSegList);\r\n              this._x = x;\r\n          };\r\n          window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegLinetoHorizontalAbs]';\r\n          };\r\n          window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x;\r\n          };\r\n          window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegLinetoHorizontalAbs(undefined, this._x);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegLinetoHorizontalRel = function (owningPathSegList, x) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, 'h', owningPathSegList);\r\n              this._x = x;\r\n          };\r\n          window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegLinetoHorizontalRel.prototype.toString = function () {\r\n              return '[object SVGPathSegLinetoHorizontalRel]';\r\n          };\r\n          window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x;\r\n          };\r\n          window.SVGPathSegLinetoHorizontalRel.prototype.clone = function () {\r\n              return new window.SVGPathSegLinetoHorizontalRel(undefined, this._x);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegLinetoVerticalAbs = function (owningPathSegList, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, 'V', owningPathSegList);\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegLinetoVerticalAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegLinetoVerticalAbs]';\r\n          };\r\n          window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegLinetoVerticalAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegLinetoVerticalAbs(undefined, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegLinetoVerticalRel = function (owningPathSegList, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, 'v', owningPathSegList);\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegLinetoVerticalRel.prototype.toString = function () {\r\n              return '[object SVGPathSegLinetoVerticalRel]';\r\n          };\r\n          window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegLinetoVerticalRel.prototype.clone = function () {\r\n              return new window.SVGPathSegLinetoVerticalRel(undefined, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoCubicSmoothAbs = function (owningPathSegList, x, y, x2, y2) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, 'S', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._x2 = x2;\r\n              this._y2 = y2;\r\n          };\r\n          window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoCubicSmoothAbs]';\r\n          };\r\n          window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._x2 +\r\n                  ' ' +\r\n                  this._y2 +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x2', {\r\n              get: function () {\r\n                  return this._x2;\r\n              },\r\n              set: function (x2) {\r\n                  this._x2 = x2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y2', {\r\n              get: function () {\r\n                  return this._y2;\r\n              },\r\n              set: function (y2) {\r\n                  this._y2 = y2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoCubicSmoothRel = function (owningPathSegList, x, y, x2, y2) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, 's', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n              this._x2 = x2;\r\n              this._y2 = y2;\r\n          };\r\n          window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoCubicSmoothRel]';\r\n          };\r\n          window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function () {\r\n              return (this.pathSegTypeAsLetter +\r\n                  ' ' +\r\n                  this._x2 +\r\n                  ' ' +\r\n                  this._y2 +\r\n                  ' ' +\r\n                  this._x +\r\n                  ' ' +\r\n                  this._y);\r\n          };\r\n          window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'x2', {\r\n              get: function () {\r\n                  return this._x2;\r\n              },\r\n              set: function (x2) {\r\n                  this._x2 = x2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, 'y2', {\r\n              get: function () {\r\n                  return this._y2;\r\n              },\r\n              set: function (y2) {\r\n                  this._y2 = y2;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoQuadraticSmoothAbs = function (owningPathSegList, x, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, 'T', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoQuadraticSmoothAbs]';\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          window.SVGPathSegCurvetoQuadraticSmoothRel = function (owningPathSegList, x, y) {\r\n              window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, 't', owningPathSegList);\r\n              this._x = x;\r\n              this._y = y;\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);\r\n          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function () {\r\n              return '[object SVGPathSegCurvetoQuadraticSmoothRel]';\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function () {\r\n              return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y;\r\n          };\r\n          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function () {\r\n              return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y);\r\n          };\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'x', {\r\n              get: function () {\r\n                  return this._x;\r\n              },\r\n              set: function (x) {\r\n                  this._x = x;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'y', {\r\n              get: function () {\r\n                  return this._y;\r\n              },\r\n              set: function (y) {\r\n                  this._y = y;\r\n                  this._segmentChanged();\r\n              },\r\n              enumerable: true\r\n          });\r\n          // Add createSVGPathSeg* functions to window.SVGPathElement.\r\n          // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-Interfacewindow.SVGPathElement.\r\n          window.SVGPathElement.prototype.createSVGPathSegClosePath = function () {\r\n              return new window.SVGPathSegClosePath(undefined);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function (x, y) {\r\n              return new window.SVGPathSegMovetoAbs(undefined, x, y);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function (x, y) {\r\n              return new window.SVGPathSegMovetoRel(undefined, x, y);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function (x, y) {\r\n              return new window.SVGPathSegLinetoAbs(undefined, x, y);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function (x, y) {\r\n              return new window.SVGPathSegLinetoRel(undefined, x, y);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function (x, y, x1, y1, x2, y2) {\r\n              return new window.SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function (x, y, x1, y1, x2, y2) {\r\n              return new window.SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function (x, y, x1, y1) {\r\n              return new window.SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function (x, y, x1, y1) {\r\n              return new window.SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegArcAbs = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\r\n              return new window.SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegArcRel = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {\r\n              return new window.SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function (x) {\r\n              return new window.SVGPathSegLinetoHorizontalAbs(undefined, x);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function (x) {\r\n              return new window.SVGPathSegLinetoHorizontalRel(undefined, x);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function (y) {\r\n              return new window.SVGPathSegLinetoVerticalAbs(undefined, y);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function (y) {\r\n              return new window.SVGPathSegLinetoVerticalRel(undefined, y);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function (x, y, x2, y2) {\r\n              return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function (x, y, x2, y2) {\r\n              return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function (x, y) {\r\n              return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y);\r\n          };\r\n          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function (x, y) {\r\n              return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y);\r\n          };\r\n          if (!('getPathSegAtLength' in window.SVGPathElement.prototype)) {\r\n              // Add getPathSegAtLength to SVGPathElement.\r\n              // Spec: https://www.w3.org/TR/SVG11/single-page.html#paths-__svg__SVGPathElement__getPathSegAtLength\r\n              // This polyfill requires SVGPathElement.getTotalLength to implement the distance-along-a-path algorithm.\r\n              window.SVGPathElement.prototype.getPathSegAtLength = function (distance) {\r\n                  if (distance === undefined || !isFinite(distance))\r\n                      throw 'Invalid arguments.';\r\n                  var measurementElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n                  measurementElement.setAttribute('d', this.getAttribute('d'));\r\n                  var lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;\r\n                  // If the path is empty, return 0.\r\n                  if (lastPathSegment <= 0)\r\n                      return 0;\r\n                  do {\r\n                      measurementElement.pathSegList.removeItem(lastPathSegment);\r\n                      if (distance > measurementElement.getTotalLength())\r\n                          break;\r\n                      lastPathSegment--;\r\n                  } while (lastPathSegment > 0);\r\n                  return lastPathSegment;\r\n              };\r\n          }\r\n      }\r\n      if (!('SVGPathSegList' in window)) {\r\n          // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSegList\r\n          window.SVGPathSegList = function (pathElement) {\r\n              this._pathElement = pathElement;\r\n              this._list = this._parsePath(this._pathElement.getAttribute('d'));\r\n              // Use a MutationObserver to catch changes to the path's \"d\" attribute.\r\n              this._mutationObserverConfig = {\r\n                  attributes: true,\r\n                  attributeFilter: ['d']\r\n              };\r\n              this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));\r\n              this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);\r\n          };\r\n          window.SVGPathSegList.prototype.classname = 'SVGPathSegList';\r\n          Object.defineProperty(window.SVGPathSegList.prototype, 'numberOfItems', {\r\n              get: function () {\r\n                  this._checkPathSynchronizedToList();\r\n                  return this._list.length;\r\n              },\r\n              enumerable: true\r\n          });\r\n          // Add the pathSegList accessors to window.SVGPathElement.\r\n          // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGAnimatedPathData\r\n          Object.defineProperty(window.SVGPathElement.prototype, 'pathSegList', {\r\n              get: function () {\r\n                  if (!this._pathSegList)\r\n                      this._pathSegList = new window.SVGPathSegList(this);\r\n                  return this._pathSegList;\r\n              },\r\n              enumerable: true\r\n          });\r\n          // FIXME: The following are not implemented and simply return window.SVGPathElement.pathSegList.\r\n          Object.defineProperty(window.SVGPathElement.prototype, 'normalizedPathSegList', {\r\n              get: function () {\r\n                  return this.pathSegList;\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathElement.prototype, 'animatedPathSegList', {\r\n              get: function () {\r\n                  return this.pathSegList;\r\n              },\r\n              enumerable: true\r\n          });\r\n          Object.defineProperty(window.SVGPathElement.prototype, 'animatedNormalizedPathSegList', {\r\n              get: function () {\r\n                  return this.pathSegList;\r\n              },\r\n              enumerable: true\r\n          });\r\n          // Process any pending mutations to the path element and update the list as needed.\r\n          // This should be the first call of all public functions and is needed because\r\n          // MutationObservers are not synchronous so we can have pending asynchronous mutations.\r\n          window.SVGPathSegList.prototype._checkPathSynchronizedToList = function () {\r\n              this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());\r\n          };\r\n          window.SVGPathSegList.prototype._updateListFromPathMutations = function (mutationRecords) {\r\n              if (!this._pathElement)\r\n                  return;\r\n              var hasPathMutations = false;\r\n              mutationRecords.forEach(function (record) {\r\n                  if (record.attributeName == 'd')\r\n                      hasPathMutations = true;\r\n              });\r\n              if (hasPathMutations)\r\n                  this._list = this._parsePath(this._pathElement.getAttribute('d'));\r\n          };\r\n          // Serialize the list and update the path's 'd' attribute.\r\n          window.SVGPathSegList.prototype._writeListToPath = function () {\r\n              this._pathElementMutationObserver.disconnect();\r\n              this._pathElement.setAttribute('d', window.SVGPathSegList._pathSegArrayAsString(this._list));\r\n              this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);\r\n          };\r\n          // When a path segment changes the list needs to be synchronized back to the path element.\r\n          window.SVGPathSegList.prototype.segmentChanged = function (pathSeg) {\r\n              this._writeListToPath();\r\n          };\r\n          window.SVGPathSegList.prototype.clear = function () {\r\n              this._checkPathSynchronizedToList();\r\n              this._list.forEach(function (pathSeg) {\r\n                  pathSeg._owningPathSegList = null;\r\n              });\r\n              this._list = [];\r\n              this._writeListToPath();\r\n          };\r\n          window.SVGPathSegList.prototype.initialize = function (newItem) {\r\n              this._checkPathSynchronizedToList();\r\n              this._list = [newItem];\r\n              newItem._owningPathSegList = this;\r\n              this._writeListToPath();\r\n              return newItem;\r\n          };\r\n          window.SVGPathSegList.prototype._checkValidIndex = function (index) {\r\n              if (isNaN(index) || index < 0 || index >= this.numberOfItems)\r\n                  throw 'INDEX_SIZE_ERR';\r\n          };\r\n          window.SVGPathSegList.prototype.getItem = function (index) {\r\n              this._checkPathSynchronizedToList();\r\n              this._checkValidIndex(index);\r\n              return this._list[index];\r\n          };\r\n          window.SVGPathSegList.prototype.insertItemBefore = function (newItem, index) {\r\n              this._checkPathSynchronizedToList();\r\n              // Spec: If the index is greater than or equal to numberOfItems, then the new item is appended to the end of the list.\r\n              if (index > this.numberOfItems)\r\n                  index = this.numberOfItems;\r\n              if (newItem._owningPathSegList) {\r\n                  // SVG2 spec says to make a copy.\r\n                  newItem = newItem.clone();\r\n              }\r\n              this._list.splice(index, 0, newItem);\r\n              newItem._owningPathSegList = this;\r\n              this._writeListToPath();\r\n              return newItem;\r\n          };\r\n          window.SVGPathSegList.prototype.replaceItem = function (newItem, index) {\r\n              this._checkPathSynchronizedToList();\r\n              if (newItem._owningPathSegList) {\r\n                  // SVG2 spec says to make a copy.\r\n                  newItem = newItem.clone();\r\n              }\r\n              this._checkValidIndex(index);\r\n              this._list[index] = newItem;\r\n              newItem._owningPathSegList = this;\r\n              this._writeListToPath();\r\n              return newItem;\r\n          };\r\n          window.SVGPathSegList.prototype.removeItem = function (index) {\r\n              this._checkPathSynchronizedToList();\r\n              this._checkValidIndex(index);\r\n              var item = this._list[index];\r\n              this._list.splice(index, 1);\r\n              this._writeListToPath();\r\n              return item;\r\n          };\r\n          window.SVGPathSegList.prototype.appendItem = function (newItem) {\r\n              this._checkPathSynchronizedToList();\r\n              if (newItem._owningPathSegList) {\r\n                  // SVG2 spec says to make a copy.\r\n                  newItem = newItem.clone();\r\n              }\r\n              this._list.push(newItem);\r\n              newItem._owningPathSegList = this;\r\n              // TODO: Optimize this to just append to the existing attribute.\r\n              this._writeListToPath();\r\n              return newItem;\r\n          };\r\n          window.SVGPathSegList._pathSegArrayAsString = function (pathSegArray) {\r\n              var string = '';\r\n              var first = true;\r\n              pathSegArray.forEach(function (pathSeg) {\r\n                  if (first) {\r\n                      first = false;\r\n                      string += pathSeg._asPathString();\r\n                  }\r\n                  else {\r\n                      string += ' ' + pathSeg._asPathString();\r\n                  }\r\n              });\r\n              return string;\r\n          };\r\n          // This closely follows SVGPathParser::parsePath from Source/core/svg/SVGPathParser.cpp.\r\n          window.SVGPathSegList.prototype._parsePath = function (string) {\r\n              if (!string || string.length == 0)\r\n                  return [];\r\n              var owningPathSegList = this;\r\n              var Builder = function () {\r\n                  this.pathSegList = [];\r\n              };\r\n              Builder.prototype.appendSegment = function (pathSeg) {\r\n                  this.pathSegList.push(pathSeg);\r\n              };\r\n              var Source = function (string) {\r\n                  this._string = string;\r\n                  this._currentIndex = 0;\r\n                  this._endIndex = this._string.length;\r\n                  this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;\r\n                  this._skipOptionalSpaces();\r\n              };\r\n              Source.prototype._isCurrentSpace = function () {\r\n                  var character = this._string[this._currentIndex];\r\n                  return (character <= ' ' &&\r\n                      (character == ' ' ||\r\n                          character == '\\n' ||\r\n                          character == '\\t' ||\r\n                          character == '\\r' ||\r\n                          character == '\\f'));\r\n              };\r\n              Source.prototype._skipOptionalSpaces = function () {\r\n                  while (this._currentIndex < this._endIndex && this._isCurrentSpace())\r\n                      this._currentIndex++;\r\n                  return this._currentIndex < this._endIndex;\r\n              };\r\n              Source.prototype._skipOptionalSpacesOrDelimiter = function () {\r\n                  if (this._currentIndex < this._endIndex &&\r\n                      !this._isCurrentSpace() &&\r\n                      this._string.charAt(this._currentIndex) != ',')\r\n                      return false;\r\n                  if (this._skipOptionalSpaces()) {\r\n                      if (this._currentIndex < this._endIndex &&\r\n                          this._string.charAt(this._currentIndex) == ',') {\r\n                          this._currentIndex++;\r\n                          this._skipOptionalSpaces();\r\n                      }\r\n                  }\r\n                  return this._currentIndex < this._endIndex;\r\n              };\r\n              Source.prototype.hasMoreData = function () {\r\n                  return this._currentIndex < this._endIndex;\r\n              };\r\n              Source.prototype.peekSegmentType = function () {\r\n                  var lookahead = this._string[this._currentIndex];\r\n                  return this._pathSegTypeFromChar(lookahead);\r\n              };\r\n              Source.prototype._pathSegTypeFromChar = function (lookahead) {\r\n                  switch (lookahead) {\r\n                      case 'Z':\r\n                      case 'z':\r\n                          return window.SVGPathSeg.PATHSEG_CLOSEPATH;\r\n                      case 'M':\r\n                          return window.SVGPathSeg.PATHSEG_MOVETO_ABS;\r\n                      case 'm':\r\n                          return window.SVGPathSeg.PATHSEG_MOVETO_REL;\r\n                      case 'L':\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_ABS;\r\n                      case 'l':\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_REL;\r\n                      case 'C':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;\r\n                      case 'c':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;\r\n                      case 'Q':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;\r\n                      case 'q':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;\r\n                      case 'A':\r\n                          return window.SVGPathSeg.PATHSEG_ARC_ABS;\r\n                      case 'a':\r\n                          return window.SVGPathSeg.PATHSEG_ARC_REL;\r\n                      case 'H':\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;\r\n                      case 'h':\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;\r\n                      case 'V':\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;\r\n                      case 'v':\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;\r\n                      case 'S':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;\r\n                      case 's':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;\r\n                      case 'T':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;\r\n                      case 't':\r\n                          return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;\r\n                      default:\r\n                          return window.SVGPathSeg.PATHSEG_UNKNOWN;\r\n                  }\r\n              };\r\n              Source.prototype._nextCommandHelper = function (lookahead, previousCommand) {\r\n                  // Check for remaining coordinates in the current command.\r\n                  if ((lookahead == '+' ||\r\n                      lookahead == '-' ||\r\n                      lookahead == '.' ||\r\n                      (lookahead >= '0' && lookahead <= '9')) &&\r\n                      previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {\r\n                      if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS)\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_ABS;\r\n                      if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL)\r\n                          return window.SVGPathSeg.PATHSEG_LINETO_REL;\r\n                      return previousCommand;\r\n                  }\r\n                  return window.SVGPathSeg.PATHSEG_UNKNOWN;\r\n              };\r\n              Source.prototype.initialCommandIsMoveTo = function () {\r\n                  // If the path is empty it is still valid, so return true.\r\n                  if (!this.hasMoreData())\r\n                      return true;\r\n                  var command = this.peekSegmentType();\r\n                  // Path must start with moveTo.\r\n                  return (command == window.SVGPathSeg.PATHSEG_MOVETO_ABS ||\r\n                      command == window.SVGPathSeg.PATHSEG_MOVETO_REL);\r\n              };\r\n              // Parse a number from an SVG path. This very closely follows genericParseNumber(...) from Source/core/svg/SVGParserUtilities.cpp.\r\n              // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-PathDataBNF\r\n              Source.prototype._parseNumber = function () {\r\n                  var exponent = 0;\r\n                  var integer = 0;\r\n                  var frac = 1;\r\n                  var decimal = 0;\r\n                  var sign = 1;\r\n                  var expsign = 1;\r\n                  var startIndex = this._currentIndex;\r\n                  this._skipOptionalSpaces();\r\n                  // Read the sign.\r\n                  if (this._currentIndex < this._endIndex &&\r\n                      this._string.charAt(this._currentIndex) == '+')\r\n                      this._currentIndex++;\r\n                  else if (this._currentIndex < this._endIndex &&\r\n                      this._string.charAt(this._currentIndex) == '-') {\r\n                      this._currentIndex++;\r\n                      sign = -1;\r\n                  }\r\n                  if (this._currentIndex == this._endIndex ||\r\n                      ((this._string.charAt(this._currentIndex) < '0' ||\r\n                          this._string.charAt(this._currentIndex) > '9') &&\r\n                          this._string.charAt(this._currentIndex) != '.'))\r\n                      // The first character of a number must be one of [0-9+-.].\r\n                      return undefined;\r\n                  // Read the integer part, build right-to-left.\r\n                  var startIntPartIndex = this._currentIndex;\r\n                  while (this._currentIndex < this._endIndex &&\r\n                      this._string.charAt(this._currentIndex) >= '0' &&\r\n                      this._string.charAt(this._currentIndex) <= '9')\r\n                      this._currentIndex++; // Advance to first non-digit.\r\n                  if (this._currentIndex != startIntPartIndex) {\r\n                      var scanIntPartIndex = this._currentIndex - 1;\r\n                      var multiplier = 1;\r\n                      while (scanIntPartIndex >= startIntPartIndex) {\r\n                          integer +=\r\n                              multiplier * (this._string.charAt(scanIntPartIndex--) - '0');\r\n                          multiplier *= 10;\r\n                      }\r\n                  }\r\n                  // Read the decimals.\r\n                  if (this._currentIndex < this._endIndex &&\r\n                      this._string.charAt(this._currentIndex) == '.') {\r\n                      this._currentIndex++;\r\n                      // There must be a least one digit following the .\r\n                      if (this._currentIndex >= this._endIndex ||\r\n                          this._string.charAt(this._currentIndex) < '0' ||\r\n                          this._string.charAt(this._currentIndex) > '9')\r\n                          return undefined;\r\n                      while (this._currentIndex < this._endIndex &&\r\n                          this._string.charAt(this._currentIndex) >= '0' &&\r\n                          this._string.charAt(this._currentIndex) <= '9') {\r\n                          frac *= 10;\r\n                          decimal += (this._string.charAt(this._currentIndex) - '0') / frac;\r\n                          this._currentIndex += 1;\r\n                      }\r\n                  }\r\n                  // Read the exponent part.\r\n                  if (this._currentIndex != startIndex &&\r\n                      this._currentIndex + 1 < this._endIndex &&\r\n                      (this._string.charAt(this._currentIndex) == 'e' ||\r\n                          this._string.charAt(this._currentIndex) == 'E') &&\r\n                      this._string.charAt(this._currentIndex + 1) != 'x' &&\r\n                      this._string.charAt(this._currentIndex + 1) != 'm') {\r\n                      this._currentIndex++;\r\n                      // Read the sign of the exponent.\r\n                      if (this._string.charAt(this._currentIndex) == '+') {\r\n                          this._currentIndex++;\r\n                      }\r\n                      else if (this._string.charAt(this._currentIndex) == '-') {\r\n                          this._currentIndex++;\r\n                          expsign = -1;\r\n                      }\r\n                      // There must be an exponent.\r\n                      if (this._currentIndex >= this._endIndex ||\r\n                          this._string.charAt(this._currentIndex) < '0' ||\r\n                          this._string.charAt(this._currentIndex) > '9')\r\n                          return undefined;\r\n                      while (this._currentIndex < this._endIndex &&\r\n                          this._string.charAt(this._currentIndex) >= '0' &&\r\n                          this._string.charAt(this._currentIndex) <= '9') {\r\n                          exponent *= 10;\r\n                          exponent += this._string.charAt(this._currentIndex) - '0';\r\n                          this._currentIndex++;\r\n                      }\r\n                  }\r\n                  var number = integer + decimal;\r\n                  number *= sign;\r\n                  if (exponent)\r\n                      number *= Math.pow(10, expsign * exponent);\r\n                  if (startIndex == this._currentIndex)\r\n                      return undefined;\r\n                  this._skipOptionalSpacesOrDelimiter();\r\n                  return number;\r\n              };\r\n              Source.prototype._parseArcFlag = function () {\r\n                  if (this._currentIndex >= this._endIndex)\r\n                      return undefined;\r\n                  var flag = false;\r\n                  var flagChar = this._string.charAt(this._currentIndex++);\r\n                  if (flagChar == '0')\r\n                      flag = false;\r\n                  else if (flagChar == '1')\r\n                      flag = true;\r\n                  else\r\n                      return undefined;\r\n                  this._skipOptionalSpacesOrDelimiter();\r\n                  return flag;\r\n              };\r\n              Source.prototype.parseSegment = function () {\r\n                  var lookahead = this._string[this._currentIndex];\r\n                  var command = this._pathSegTypeFromChar(lookahead);\r\n                  if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {\r\n                      // Possibly an implicit command. Not allowed if this is the first command.\r\n                      if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN)\r\n                          return null;\r\n                      command = this._nextCommandHelper(lookahead, this._previousCommand);\r\n                      if (command == window.SVGPathSeg.PATHSEG_UNKNOWN)\r\n                          return null;\r\n                  }\r\n                  else {\r\n                      this._currentIndex++;\r\n                  }\r\n                  this._previousCommand = command;\r\n                  switch (command) {\r\n                      case window.SVGPathSeg.PATHSEG_MOVETO_REL:\r\n                          return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_MOVETO_ABS:\r\n                          return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_LINETO_REL:\r\n                          return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_LINETO_ABS:\r\n                          return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\r\n                          return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\r\n                          return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:\r\n                          return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\r\n                          return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_CLOSEPATH:\r\n                          this._skipOptionalSpaces();\r\n                          return new window.SVGPathSegClosePath(owningPathSegList);\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:\r\n                          var points = {\r\n                              x1: this._parseNumber(),\r\n                              y1: this._parseNumber(),\r\n                              x2: this._parseNumber(),\r\n                              y2: this._parseNumber(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\r\n                          var points = {\r\n                              x1: this._parseNumber(),\r\n                              y1: this._parseNumber(),\r\n                              x2: this._parseNumber(),\r\n                              y2: this._parseNumber(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\r\n                          var points = {\r\n                              x2: this._parseNumber(),\r\n                              y2: this._parseNumber(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\r\n                          var points = {\r\n                              x2: this._parseNumber(),\r\n                              y2: this._parseNumber(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\r\n                          var points = {\r\n                              x1: this._parseNumber(),\r\n                              y1: this._parseNumber(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\r\n                          var points = {\r\n                              x1: this._parseNumber(),\r\n                              y1: this._parseNumber(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\r\n                          return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\r\n                          return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());\r\n                      case window.SVGPathSeg.PATHSEG_ARC_REL:\r\n                          var points = {\r\n                              x1: this._parseNumber(),\r\n                              y1: this._parseNumber(),\r\n                              arcAngle: this._parseNumber(),\r\n                              arcLarge: this._parseArcFlag(),\r\n                              arcSweep: this._parseArcFlag(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);\r\n                      case window.SVGPathSeg.PATHSEG_ARC_ABS:\r\n                          var points = {\r\n                              x1: this._parseNumber(),\r\n                              y1: this._parseNumber(),\r\n                              arcAngle: this._parseNumber(),\r\n                              arcLarge: this._parseArcFlag(),\r\n                              arcSweep: this._parseArcFlag(),\r\n                              x: this._parseNumber(),\r\n                              y: this._parseNumber()\r\n                          };\r\n                          return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);\r\n                      default:\r\n                          throw 'Unknown path seg type.';\r\n                  }\r\n              };\r\n              var builder = new Builder();\r\n              var source = new Source(string);\r\n              if (!source.initialCommandIsMoveTo())\r\n                  return [];\r\n              while (source.hasMoreData()) {\r\n                  var pathSeg = source.parseSegment();\r\n                  if (!pathSeg)\r\n                      return [];\r\n                  builder.appendSegment(pathSeg);\r\n              }\r\n              return builder.pathSegList;\r\n          };\r\n      }\r\n  })();\r\n  // String.padEnd polyfill for IE11\r\n  //\r\n  // https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\r\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\r\n  if (!String.prototype.padEnd) {\r\n      String.prototype.padEnd = function padEnd(targetLength, padString) {\r\n          targetLength = targetLength >> 0; //floor if number or convert non-number to 0;\r\n          padString = String(typeof padString !== 'undefined' ? padString : ' ');\r\n          if (this.length > targetLength) {\r\n              return String(this);\r\n          }\r\n          else {\r\n              targetLength = targetLength - this.length;\r\n              if (targetLength > padString.length) {\r\n                  padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\r\n              }\r\n              return String(this) + padString.slice(0, targetLength);\r\n          }\r\n      };\r\n  }\r\n  // Object.assign polyfill for IE11\r\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\r\n  if (typeof Object.assign !== 'function') {\r\n      // Must be writable: true, enumerable: false, configurable: true\r\n      Object.defineProperty(Object, 'assign', {\r\n          value: function assign(target, varArgs) {\r\n              if (target === null || target === undefined) {\r\n                  throw new TypeError('Cannot convert undefined or null to object');\r\n              }\r\n              var to = Object(target);\r\n              for (var index = 1; index < arguments.length; index++) {\r\n                  var nextSource = arguments[index];\r\n                  if (nextSource !== null && nextSource !== undefined) {\r\n                      for (var nextKey in nextSource) {\r\n                          // Avoid bugs when hasOwnProperty is shadowed\r\n                          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n                              to[nextKey] = nextSource[nextKey];\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n              return to;\r\n          },\r\n          writable: true,\r\n          configurable: true\r\n      });\r\n  }\r\n  /* jshint ignore:end */\n\n  Chart.prototype.axis = function () { };\r\n  Chart.prototype.axis.labels = function (labels) {\r\n      var $$ = this.internal;\r\n      if (arguments.length) {\r\n          Object.keys(labels).forEach(function (axisId) {\r\n              $$.axis.setLabelText(axisId, labels[axisId]);\r\n          });\r\n          $$.axis.updateLabels();\r\n      }\r\n      // TODO: return some values?\r\n  };\r\n  Chart.prototype.axis.max = function (max) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (arguments.length) {\r\n          if (typeof max === 'object') {\r\n              if (isValue(max.x)) {\r\n                  config.axis_x_max = max.x;\r\n              }\r\n              if (isValue(max.y)) {\r\n                  config.axis_y_max = max.y;\r\n              }\r\n              if (isValue(max.y2)) {\r\n                  config.axis_y2_max = max.y2;\r\n              }\r\n          }\r\n          else {\r\n              config.axis_y_max = config.axis_y2_max = max;\r\n          }\r\n          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });\r\n      }\r\n      else {\r\n          return {\r\n              x: config.axis_x_max,\r\n              y: config.axis_y_max,\r\n              y2: config.axis_y2_max\r\n          };\r\n      }\r\n  };\r\n  Chart.prototype.axis.min = function (min) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (arguments.length) {\r\n          if (typeof min === 'object') {\r\n              if (isValue(min.x)) {\r\n                  config.axis_x_min = min.x;\r\n              }\r\n              if (isValue(min.y)) {\r\n                  config.axis_y_min = min.y;\r\n              }\r\n              if (isValue(min.y2)) {\r\n                  config.axis_y2_min = min.y2;\r\n              }\r\n          }\r\n          else {\r\n              config.axis_y_min = config.axis_y2_min = min;\r\n          }\r\n          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });\r\n      }\r\n      else {\r\n          return {\r\n              x: config.axis_x_min,\r\n              y: config.axis_y_min,\r\n              y2: config.axis_y2_min\r\n          };\r\n      }\r\n  };\r\n  Chart.prototype.axis.range = function (range) {\r\n      if (arguments.length) {\r\n          if (isDefined(range.max)) {\r\n              this.axis.max(range.max);\r\n          }\r\n          if (isDefined(range.min)) {\r\n              this.axis.min(range.min);\r\n          }\r\n      }\r\n      else {\r\n          return {\r\n              max: this.axis.max(),\r\n              min: this.axis.min()\r\n          };\r\n      }\r\n  };\r\n  Chart.prototype.axis.types = function (types) {\r\n      var $$ = this.internal;\r\n      if (types === undefined) {\r\n          return {\r\n              y: $$.config.axis_y_type,\r\n              y2: $$.config.axis_y2_type\r\n          };\r\n      }\r\n      else {\r\n          if (isDefined(types.y)) {\r\n              $$.config.axis_y_type = types.y;\r\n          }\r\n          if (isDefined(types.y2)) {\r\n              $$.config.axis_y2_type = types.y2;\r\n          }\r\n          $$.updateScales();\r\n          $$.redraw();\r\n      }\r\n  };\n\n  Chart.prototype.category = function (i, category) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (arguments.length > 1) {\r\n          config.axis_x_categories[i] = category;\r\n          $$.redraw();\r\n      }\r\n      return config.axis_x_categories[i];\r\n  };\r\n  Chart.prototype.categories = function (categories) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (!arguments.length) {\r\n          return config.axis_x_categories;\r\n      }\r\n      config.axis_x_categories = categories;\r\n      $$.redraw();\r\n      return config.axis_x_categories;\r\n  };\n\n  Chart.prototype.resize = function (size) {\r\n      var $$ = this.internal, config = $$.config;\r\n      config.size_width = size ? size.width : null;\r\n      config.size_height = size ? size.height : null;\r\n      this.flush();\r\n  };\r\n  Chart.prototype.flush = function () {\r\n      var $$ = this.internal;\r\n      $$.updateAndRedraw({\r\n          withLegend: true,\r\n          withTransition: false,\r\n          withTransitionForTransform: false\r\n      });\r\n  };\r\n  Chart.prototype.destroy = function () {\r\n      var $$ = this.internal;\r\n      window.clearInterval($$.intervalForObserveInserted);\r\n      if ($$.resizeTimeout !== undefined) {\r\n          window.clearTimeout($$.resizeTimeout);\r\n      }\r\n      window.removeEventListener('resize', $$.resizeIfElementDisplayed);\r\n      // Removes the inner resize functions\r\n      $$.resizeFunction.remove();\r\n      // Unbinds from the window focus event\r\n      $$.unbindWindowFocus();\r\n      $$.selectChart.classed('c3', false).html('');\r\n      // MEMO: this is needed because the reference of some elements will not be released, then memory leak will happen.\r\n      Object.keys($$).forEach(function (key) {\r\n          $$[key] = null;\r\n      });\r\n      return null;\r\n  };\n\n  // TODO: fix\r\n  Chart.prototype.color = function (id) {\r\n      var $$ = this.internal;\r\n      return $$.color(id); // more patterns\r\n  };\n\n  Chart.prototype.data = function (targetIds) {\r\n      var targets = this.internal.data.targets;\r\n      return typeof targetIds === 'undefined'\r\n          ? targets\r\n          : targets.filter(function (t) {\r\n              return [].concat(targetIds).indexOf(t.id) >= 0;\r\n          });\r\n  };\r\n  Chart.prototype.data.shown = function (targetIds) {\r\n      return this.internal.filterTargetsToShow(this.data(targetIds));\r\n  };\r\n  /**\r\n   * Get values of the data loaded in the chart.\r\n   *\r\n   * @param {String|Array} targetId This API returns the value of specified target.\r\n   * @param flat\r\n   * @return {Array} Data values\r\n   */\r\n  Chart.prototype.data.values = function (targetId, flat) {\r\n      if (flat === void 0) { flat = true; }\r\n      var values = null;\r\n      if (targetId) {\r\n          var targets = this.data(targetId);\r\n          if (targets && isArray(targets)) {\r\n              values = targets.reduce(function (ret, v) {\r\n                  var dataValue = v.values.map(function (d) { return d.value; });\r\n                  if (flat) {\r\n                      ret = ret.concat(dataValue);\r\n                  }\r\n                  else {\r\n                      ret.push(dataValue);\r\n                  }\r\n                  return ret;\r\n              }, []);\r\n          }\r\n      }\r\n      return values;\r\n  };\r\n  Chart.prototype.data.names = function (names) {\r\n      this.internal.clearLegendItemTextBoxCache();\r\n      return this.internal.updateDataAttributes('names', names);\r\n  };\r\n  Chart.prototype.data.colors = function (colors) {\r\n      return this.internal.updateDataAttributes('colors', colors);\r\n  };\r\n  Chart.prototype.data.axes = function (axes) {\r\n      return this.internal.updateDataAttributes('axes', axes);\r\n  };\r\n  Chart.prototype.data.stackNormalized = function (normalized) {\r\n      if (normalized === undefined) {\r\n          return this.internal.isStackNormalized();\r\n      }\r\n      this.internal.config.data_stack_normalize = !!normalized;\r\n      this.internal.redraw();\r\n  };\n\n  Chart.prototype.donut = function () { };\r\n  Chart.prototype.donut.padAngle = function (padAngle) {\r\n      if (padAngle === undefined) {\r\n          return this.internal.config.donut_padAngle;\r\n      }\r\n      this.internal.config.donut_padAngle = padAngle;\r\n      this.flush();\r\n  };\n\n  Chart.prototype.flow = function (args) {\r\n      var $$ = this.internal, targets, data, notfoundIds = [], orgDataCount = $$.getMaxDataCount(), dataCount, domain, baseTarget, baseValue, length = 0, tail = 0, diff, to;\r\n      if (args.json) {\r\n          data = $$.convertJsonToData(args.json, args.keys);\r\n      }\r\n      else if (args.rows) {\r\n          data = $$.convertRowsToData(args.rows);\r\n      }\r\n      else if (args.columns) {\r\n          data = $$.convertColumnsToData(args.columns);\r\n      }\r\n      else {\r\n          return;\r\n      }\r\n      targets = $$.convertDataToTargets(data, true);\r\n      // Update/Add data\r\n      $$.data.targets.forEach(function (t) {\r\n          var found = false, i, j;\r\n          for (i = 0; i < targets.length; i++) {\r\n              if (t.id === targets[i].id) {\r\n                  found = true;\r\n                  if (t.values[t.values.length - 1]) {\r\n                      tail = t.values[t.values.length - 1].index + 1;\r\n                  }\r\n                  length = targets[i].values.length;\r\n                  for (j = 0; j < length; j++) {\r\n                      targets[i].values[j].index = tail + j;\r\n                      if (!$$.isTimeSeries()) {\r\n                          targets[i].values[j].x = tail + j;\r\n                      }\r\n                  }\r\n                  t.values = t.values.concat(targets[i].values);\r\n                  targets.splice(i, 1);\r\n                  break;\r\n              }\r\n          }\r\n          if (!found) {\r\n              notfoundIds.push(t.id);\r\n          }\r\n      });\r\n      // Append null for not found targets\r\n      $$.data.targets.forEach(function (t) {\r\n          var i, j;\r\n          for (i = 0; i < notfoundIds.length; i++) {\r\n              if (t.id === notfoundIds[i]) {\r\n                  tail = t.values[t.values.length - 1].index + 1;\r\n                  for (j = 0; j < length; j++) {\r\n                      t.values.push({\r\n                          id: t.id,\r\n                          index: tail + j,\r\n                          x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,\r\n                          value: null\r\n                      });\r\n                  }\r\n              }\r\n          }\r\n      });\r\n      // Generate null values for new target\r\n      if ($$.data.targets.length) {\r\n          targets.forEach(function (t) {\r\n              var i, missing = [];\r\n              for (i = $$.data.targets[0].values[0].index; i < tail; i++) {\r\n                  missing.push({\r\n                      id: t.id,\r\n                      index: i,\r\n                      x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,\r\n                      value: null\r\n                  });\r\n              }\r\n              t.values.forEach(function (v) {\r\n                  v.index += tail;\r\n                  if (!$$.isTimeSeries()) {\r\n                      v.x += tail;\r\n                  }\r\n              });\r\n              t.values = missing.concat(t.values);\r\n          });\r\n      }\r\n      $$.data.targets = $$.data.targets.concat(targets); // add remained\r\n      // check data count because behavior needs to change when it's only one\r\n      dataCount = $$.getMaxDataCount();\r\n      baseTarget = $$.data.targets[0];\r\n      baseValue = baseTarget.values[0];\r\n      // Update length to flow if needed\r\n      if (isDefined(args.to)) {\r\n          length = 0;\r\n          to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;\r\n          baseTarget.values.forEach(function (v) {\r\n              if (v.x < to) {\r\n                  length++;\r\n              }\r\n          });\r\n      }\r\n      else if (isDefined(args.length)) {\r\n          length = args.length;\r\n      }\r\n      // If only one data, update the domain to flow from left edge of the chart\r\n      if (!orgDataCount) {\r\n          if ($$.isTimeSeries()) {\r\n              if (baseTarget.values.length > 1) {\r\n                  diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;\r\n              }\r\n              else {\r\n                  diff = baseValue.x - $$.getXDomain($$.data.targets)[0];\r\n              }\r\n          }\r\n          else {\r\n              diff = 1;\r\n          }\r\n          domain = [baseValue.x - diff, baseValue.x];\r\n          $$.updateXDomain(null, true, true, false, domain);\r\n      }\r\n      else if (orgDataCount === 1) {\r\n          if ($$.isTimeSeries()) {\r\n              diff =\r\n                  (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;\r\n              domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];\r\n              $$.updateXDomain(null, true, true, false, domain);\r\n          }\r\n      }\r\n      // Set targets\r\n      $$.updateTargets($$.data.targets);\r\n      // Redraw with new targets\r\n      $$.redraw({\r\n          flow: {\r\n              index: baseValue.index,\r\n              length: length,\r\n              duration: isValue(args.duration)\r\n                  ? args.duration\r\n                  : $$.config.transition_duration,\r\n              done: args.done,\r\n              orgDataCount: orgDataCount\r\n          },\r\n          withLegend: true,\r\n          withTransition: orgDataCount > 1,\r\n          withTrimXDomain: false,\r\n          withUpdateXAxis: true\r\n      });\r\n  };\r\n  ChartInternal.prototype.generateFlow = function (args) {\r\n      var $$ = this, config = $$.config, d3 = $$.d3;\r\n      return function () {\r\n          var targets = args.targets, flow = args.flow, drawBar = args.drawBar, drawLine = args.drawLine, drawArea = args.drawArea, cx = args.cx, cy = args.cy, xv = args.xv, xForText = args.xForText, yForText = args.yForText, duration = args.duration;\r\n          var translateX, scaleX = 1, transform, flowIndex = flow.index, flowLength = flow.length, flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex), flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength), orgDomain = $$.x.domain(), domain, durationForFlow = flow.duration || duration, done = flow.done || function () { }, wait = $$.generateWait();\r\n          var xgrid, xgridLines, mainRegion, mainText, mainBar, mainLine, mainArea, mainCircle;\r\n          // set flag\r\n          $$.flowing = true;\r\n          // remove head data after rendered\r\n          $$.data.targets.forEach(function (d) {\r\n              d.values.splice(0, flowLength);\r\n          });\r\n          // update x domain to generate axis elements for flow\r\n          domain = $$.updateXDomain(targets, true, true);\r\n          // update elements related to x scale\r\n          if ($$.updateXGrid) {\r\n              $$.updateXGrid(true);\r\n          }\r\n          xgrid = $$.xgrid || d3.selectAll([]); // xgrid needs to be obtained after updateXGrid\r\n          xgridLines = $$.xgridLines || d3.selectAll([]);\r\n          mainRegion = $$.mainRegion || d3.selectAll([]);\r\n          mainText = $$.mainText || d3.selectAll([]);\r\n          mainBar = $$.mainBar || d3.selectAll([]);\r\n          mainLine = $$.mainLine || d3.selectAll([]);\r\n          mainArea = $$.mainArea || d3.selectAll([]);\r\n          mainCircle = $$.mainCircle || d3.selectAll([]);\r\n          // generate transform to flow\r\n          if (!flow.orgDataCount) {\r\n              // if empty\r\n              if ($$.data.targets[0].values.length !== 1) {\r\n                  translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);\r\n              }\r\n              else {\r\n                  if ($$.isTimeSeries()) {\r\n                      flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);\r\n                      flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);\r\n                      translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);\r\n                  }\r\n                  else {\r\n                      translateX = diffDomain(domain) / 2;\r\n                  }\r\n              }\r\n          }\r\n          else if (flow.orgDataCount === 1 ||\r\n              (flowStart && flowStart.x) === (flowEnd && flowEnd.x)) {\r\n              translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);\r\n          }\r\n          else {\r\n              if ($$.isTimeSeries()) {\r\n                  translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);\r\n              }\r\n              else {\r\n                  translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);\r\n              }\r\n          }\r\n          scaleX = diffDomain(orgDomain) / diffDomain(domain);\r\n          transform = 'translate(' + translateX + ',0) scale(' + scaleX + ',1)';\r\n          $$.hideXGridFocus();\r\n          var flowTransition = d3\r\n              .transition()\r\n              .ease(d3.easeLinear)\r\n              .duration(durationForFlow);\r\n          wait.add($$.xAxis($$.axes.x, flowTransition));\r\n          wait.add(mainBar.transition(flowTransition).attr('transform', transform));\r\n          wait.add(mainLine.transition(flowTransition).attr('transform', transform));\r\n          wait.add(mainArea.transition(flowTransition).attr('transform', transform));\r\n          wait.add(mainCircle.transition(flowTransition).attr('transform', transform));\r\n          wait.add(mainText.transition(flowTransition).attr('transform', transform));\r\n          wait.add(mainRegion\r\n              .filter($$.isRegionOnX)\r\n              .transition(flowTransition)\r\n              .attr('transform', transform));\r\n          wait.add(xgrid.transition(flowTransition).attr('transform', transform));\r\n          wait.add(xgridLines.transition(flowTransition).attr('transform', transform));\r\n          wait(function () {\r\n              var i, shapes = [], texts = [];\r\n              // remove flowed elements\r\n              if (flowLength) {\r\n                  for (i = 0; i < flowLength; i++) {\r\n                      shapes.push('.' + CLASS.shape + '-' + (flowIndex + i));\r\n                      texts.push('.' + CLASS.text + '-' + (flowIndex + i));\r\n                  }\r\n                  $$.svg\r\n                      .selectAll('.' + CLASS.shapes)\r\n                      .selectAll(shapes)\r\n                      .remove();\r\n                  $$.svg\r\n                      .selectAll('.' + CLASS.texts)\r\n                      .selectAll(texts)\r\n                      .remove();\r\n                  $$.svg.select('.' + CLASS.xgrid).remove();\r\n              }\r\n              // draw again for removing flowed elements and reverting attr\r\n              xgrid\r\n                  .attr('transform', null)\r\n                  .attr('x1', $$.xgridAttr.x1)\r\n                  .attr('x2', $$.xgridAttr.x2)\r\n                  .attr('y1', $$.xgridAttr.y1)\r\n                  .attr('y2', $$.xgridAttr.y2)\r\n                  .style('opacity', $$.xgridAttr.opacity);\r\n              xgridLines.attr('transform', null);\r\n              xgridLines\r\n                  .select('line')\r\n                  .attr('x1', config.axis_rotated ? 0 : xv)\r\n                  .attr('x2', config.axis_rotated ? $$.width : xv);\r\n              xgridLines\r\n                  .select('text')\r\n                  .attr('x', config.axis_rotated ? $$.width : 0)\r\n                  .attr('y', xv);\r\n              mainBar.attr('transform', null).attr('d', drawBar);\r\n              mainLine.attr('transform', null).attr('d', drawLine);\r\n              mainArea.attr('transform', null).attr('d', drawArea);\r\n              mainCircle\r\n                  .attr('transform', null)\r\n                  .attr('cx', cx)\r\n                  .attr('cy', cy);\r\n              mainText\r\n                  .attr('transform', null)\r\n                  .attr('x', xForText)\r\n                  .attr('y', yForText)\r\n                  .style('fill-opacity', $$.opacityForText.bind($$));\r\n              mainRegion.attr('transform', null);\r\n              mainRegion\r\n                  .filter($$.isRegionOnX)\r\n                  .attr('x', $$.regionX.bind($$))\r\n                  .attr('width', $$.regionWidth.bind($$));\r\n              // callback for end of flow\r\n              done();\r\n              $$.flowing = false;\r\n          });\r\n      };\r\n  };\n\n  Chart.prototype.focus = function (targetIds) {\r\n      var $$ = this.internal, candidates;\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      (candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$)))),\r\n          this.revert();\r\n      this.defocus();\r\n      candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);\r\n      if ($$.hasArcType()) {\r\n          $$.expandArc(targetIds);\r\n      }\r\n      $$.toggleFocusLegend(targetIds, true);\r\n      $$.focusedTargetIds = targetIds;\r\n      $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function (id) {\r\n          return targetIds.indexOf(id) < 0;\r\n      });\r\n  };\r\n  Chart.prototype.defocus = function (targetIds) {\r\n      var $$ = this.internal, candidates;\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      (candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$)))),\r\n          candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);\r\n      if ($$.hasArcType()) {\r\n          $$.unexpandArc(targetIds);\r\n      }\r\n      $$.toggleFocusLegend(targetIds, false);\r\n      $$.focusedTargetIds = $$.focusedTargetIds.filter(function (id) {\r\n          return targetIds.indexOf(id) < 0;\r\n      });\r\n      $$.defocusedTargetIds = targetIds;\r\n  };\r\n  Chart.prototype.revert = function (targetIds) {\r\n      var $$ = this.internal, candidates;\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      candidates = $$.svg.selectAll($$.selectorTargets(targetIds)); // should be for all targets\r\n      candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);\r\n      if ($$.hasArcType()) {\r\n          $$.unexpandArc(targetIds);\r\n      }\r\n      if ($$.config.legend_show) {\r\n          $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));\r\n          $$.legend\r\n              .selectAll($$.selectorLegends(targetIds))\r\n              .filter(function () {\r\n              return $$.d3.select(this).classed(CLASS.legendItemFocused);\r\n          })\r\n              .classed(CLASS.legendItemFocused, false);\r\n      }\r\n      $$.focusedTargetIds = [];\r\n      $$.defocusedTargetIds = [];\r\n  };\n\n  Chart.prototype.xgrids = function (grids) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (!grids) {\r\n          return config.grid_x_lines;\r\n      }\r\n      config.grid_x_lines = grids;\r\n      $$.redrawWithoutRescale();\r\n      return config.grid_x_lines;\r\n  };\r\n  Chart.prototype.xgrids.add = function (grids) {\r\n      var $$ = this.internal;\r\n      return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));\r\n  };\r\n  Chart.prototype.xgrids.remove = function (params) {\r\n      // TODO: multiple\r\n      var $$ = this.internal;\r\n      $$.removeGridLines(params, true);\r\n  };\r\n  Chart.prototype.ygrids = function (grids) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (!grids) {\r\n          return config.grid_y_lines;\r\n      }\r\n      config.grid_y_lines = grids;\r\n      $$.redrawWithoutRescale();\r\n      return config.grid_y_lines;\r\n  };\r\n  Chart.prototype.ygrids.add = function (grids) {\r\n      var $$ = this.internal;\r\n      return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));\r\n  };\r\n  Chart.prototype.ygrids.remove = function (params) {\r\n      // TODO: multiple\r\n      var $$ = this.internal;\r\n      $$.removeGridLines(params, false);\r\n  };\n\n  Chart.prototype.groups = function (groups) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (isUndefined(groups)) {\r\n          return config.data_groups;\r\n      }\r\n      config.data_groups = groups;\r\n      $$.redraw();\r\n      return config.data_groups;\r\n  };\n\n  Chart.prototype.legend = function () { };\r\n  Chart.prototype.legend.show = function (targetIds) {\r\n      var $$ = this.internal;\r\n      $$.showLegend($$.mapToTargetIds(targetIds));\r\n      $$.updateAndRedraw({ withLegend: true });\r\n  };\r\n  Chart.prototype.legend.hide = function (targetIds) {\r\n      var $$ = this.internal;\r\n      $$.hideLegend($$.mapToTargetIds(targetIds));\r\n      $$.updateAndRedraw({ withLegend: false });\r\n  };\n\n  Chart.prototype.load = function (args) {\r\n      var $$ = this.internal, config = $$.config;\r\n      // update xs if specified\r\n      if (args.xs) {\r\n          $$.addXs(args.xs);\r\n      }\r\n      // update names if exists\r\n      if ('names' in args) {\r\n          Chart.prototype.data.names.bind(this)(args.names);\r\n      }\r\n      // update classes if exists\r\n      if ('classes' in args) {\r\n          Object.keys(args.classes).forEach(function (id) {\r\n              config.data_classes[id] = args.classes[id];\r\n          });\r\n      }\r\n      // update categories if exists\r\n      if ('categories' in args && $$.isCategorized()) {\r\n          config.axis_x_categories = args.categories;\r\n      }\r\n      // update axes if exists\r\n      if ('axes' in args) {\r\n          Object.keys(args.axes).forEach(function (id) {\r\n              config.data_axes[id] = args.axes[id];\r\n          });\r\n      }\r\n      // update colors if exists\r\n      if ('colors' in args) {\r\n          Object.keys(args.colors).forEach(function (id) {\r\n              config.data_colors[id] = args.colors[id];\r\n          });\r\n      }\r\n      // use cache if exists\r\n      if ('cacheIds' in args && $$.hasCaches(args.cacheIds)) {\r\n          $$.load($$.getCaches(args.cacheIds), args.done);\r\n          return;\r\n      }\r\n      // unload if needed\r\n      if (args.unload) {\r\n          // TODO: do not unload if target will load (included in url/rows/columns)\r\n          $$.unload($$.mapToTargetIds(args.unload === true ? null : args.unload), function () {\r\n              $$.loadFromArgs(args);\r\n          });\r\n      }\r\n      else {\r\n          $$.loadFromArgs(args);\r\n      }\r\n  };\r\n  Chart.prototype.unload = function (args) {\r\n      var $$ = this.internal;\r\n      args = args || {};\r\n      if (args instanceof Array) {\r\n          args = { ids: args };\r\n      }\r\n      else if (typeof args === 'string') {\r\n          args = { ids: [args] };\r\n      }\r\n      $$.unload($$.mapToTargetIds(args.ids), function () {\r\n          $$.redraw({\r\n              withUpdateOrgXDomain: true,\r\n              withUpdateXDomain: true,\r\n              withLegend: true\r\n          });\r\n          if (args.done) {\r\n              args.done();\r\n          }\r\n      });\r\n  };\n\n  Chart.prototype.pie = function () { };\r\n  Chart.prototype.pie.padAngle = function (padAngle) {\r\n      if (padAngle === undefined) {\r\n          return this.internal.config.pie_padAngle;\r\n      }\r\n      this.internal.config.pie_padAngle = padAngle;\r\n      this.flush();\r\n  };\n\n  Chart.prototype.regions = function (regions) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (!regions) {\r\n          return config.regions;\r\n      }\r\n      config.regions = regions;\r\n      $$.redrawWithoutRescale();\r\n      return config.regions;\r\n  };\r\n  Chart.prototype.regions.add = function (regions) {\r\n      var $$ = this.internal, config = $$.config;\r\n      if (!regions) {\r\n          return config.regions;\r\n      }\r\n      config.regions = config.regions.concat(regions);\r\n      $$.redrawWithoutRescale();\r\n      return config.regions;\r\n  };\r\n  Chart.prototype.regions.remove = function (options) {\r\n      var $$ = this.internal, config = $$.config, duration, classes, regions;\r\n      options = options || {};\r\n      duration = getOption(options, 'duration', config.transition_duration);\r\n      classes = getOption(options, 'classes', [CLASS.region]);\r\n      regions = $$.main.select('.' + CLASS.regions).selectAll(classes.map(function (c) {\r\n          return '.' + c;\r\n      }));\r\n      (duration ? regions.transition().duration(duration) : regions)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      config.regions = config.regions.filter(function (region) {\r\n          var found = false;\r\n          if (!region['class']) {\r\n              return true;\r\n          }\r\n          region['class'].split(' ').forEach(function (c) {\r\n              if (classes.indexOf(c) >= 0) {\r\n                  found = true;\r\n              }\r\n          });\r\n          return !found;\r\n      });\r\n      return config.regions;\r\n  };\n\n  Chart.prototype.selected = function (targetId) {\r\n      var $$ = this.internal, d3 = $$.d3;\r\n      return $$.main\r\n          .selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(targetId))\r\n          .selectAll('.' + CLASS.shape)\r\n          .filter(function () {\r\n          return d3.select(this).classed(CLASS.SELECTED);\r\n      })\r\n          .nodes()\r\n          .map(function (d) {\r\n          var data = d.__data__;\r\n          return data.data ? data.data : data;\r\n      });\r\n  };\r\n  Chart.prototype.select = function (ids, indices, resetOther) {\r\n      var $$ = this.internal, d3 = $$.d3, config = $$.config;\r\n      if (!config.data_selection_enabled) {\r\n          return;\r\n      }\r\n      $$.main\r\n          .selectAll('.' + CLASS.shapes)\r\n          .selectAll('.' + CLASS.shape)\r\n          .each(function (d, i) {\r\n          var shape = d3.select(this), id = d.data ? d.data.id : d.id, toggle = $$.getToggle(this, d).bind($$), isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0, isTargetIndex = !indices || indices.indexOf(i) >= 0, isSelected = shape.classed(CLASS.SELECTED);\r\n          // line/area selection not supported yet\r\n          if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {\r\n              return;\r\n          }\r\n          if (isTargetId && isTargetIndex) {\r\n              if (config.data_selection_isselectable(d) && !isSelected) {\r\n                  toggle(true, shape.classed(CLASS.SELECTED, true), d, i);\r\n              }\r\n          }\r\n          else if (isDefined(resetOther) && resetOther) {\r\n              if (isSelected) {\r\n                  toggle(false, shape.classed(CLASS.SELECTED, false), d, i);\r\n              }\r\n          }\r\n      });\r\n  };\r\n  Chart.prototype.unselect = function (ids, indices) {\r\n      var $$ = this.internal, d3 = $$.d3, config = $$.config;\r\n      if (!config.data_selection_enabled) {\r\n          return;\r\n      }\r\n      $$.main\r\n          .selectAll('.' + CLASS.shapes)\r\n          .selectAll('.' + CLASS.shape)\r\n          .each(function (d, i) {\r\n          var shape = d3.select(this), id = d.data ? d.data.id : d.id, toggle = $$.getToggle(this, d).bind($$), isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0, isTargetIndex = !indices || indices.indexOf(i) >= 0, isSelected = shape.classed(CLASS.SELECTED);\r\n          // line/area selection not supported yet\r\n          if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {\r\n              return;\r\n          }\r\n          if (isTargetId && isTargetIndex) {\r\n              if (config.data_selection_isselectable(d)) {\r\n                  if (isSelected) {\r\n                      toggle(false, shape.classed(CLASS.SELECTED, false), d, i);\r\n                  }\r\n              }\r\n          }\r\n      });\r\n  };\n\n  Chart.prototype.show = function (targetIds, options) {\r\n      var $$ = this.internal, targets;\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      options = options || {};\r\n      $$.removeHiddenTargetIds(targetIds);\r\n      targets = $$.svg.selectAll($$.selectorTargets(targetIds));\r\n      targets\r\n          .transition()\r\n          .style('display', isIE() ? 'block' : 'initial', 'important')\r\n          .style('opacity', 1, 'important')\r\n          .call($$.endall, function () {\r\n          targets.style('opacity', null).style('opacity', 1);\r\n      });\r\n      if (options.withLegend) {\r\n          $$.showLegend(targetIds);\r\n      }\r\n      $$.redraw({\r\n          withUpdateOrgXDomain: true,\r\n          withUpdateXDomain: true,\r\n          withLegend: true\r\n      });\r\n  };\r\n  Chart.prototype.hide = function (targetIds, options) {\r\n      var $$ = this.internal, targets;\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      options = options || {};\r\n      $$.addHiddenTargetIds(targetIds);\r\n      targets = $$.svg.selectAll($$.selectorTargets(targetIds));\r\n      targets\r\n          .transition()\r\n          .style('opacity', 0, 'important')\r\n          .call($$.endall, function () {\r\n          targets.style('opacity', null).style('opacity', 0);\r\n          targets.style('display', 'none');\r\n      });\r\n      if (options.withLegend) {\r\n          $$.hideLegend(targetIds);\r\n      }\r\n      $$.redraw({\r\n          withUpdateOrgXDomain: true,\r\n          withUpdateXDomain: true,\r\n          withLegend: true\r\n      });\r\n  };\r\n  Chart.prototype.toggle = function (targetIds, options) {\r\n      var that = this, $$ = this.internal;\r\n      $$.mapToTargetIds(targetIds).forEach(function (targetId) {\r\n          $$.isTargetToShow(targetId)\r\n              ? that.hide(targetId, options)\r\n              : that.show(targetId, options);\r\n      });\r\n  };\n\n  Chart.prototype.subchart = function () { };\r\n  Chart.prototype.subchart.isShown = function () {\r\n      var $$ = this.internal;\r\n      return $$.config.subchart_show;\r\n  };\r\n  Chart.prototype.subchart.show = function () {\r\n      var $$ = this.internal;\r\n      if ($$.config.subchart_show) {\r\n          return;\r\n      }\r\n      $$.config.subchart_show = true;\r\n      // insert DOM\r\n      $$.initSubchart();\r\n      // update dimensions with sub chart now visible\r\n      $$.updateDimension();\r\n      // insert brush (depends on sizes previously updated)\r\n      $$.initSubchartBrush();\r\n      // attach data\r\n      $$.updateTargetsForSubchart($$.getTargets());\r\n      // reset fade-in state\r\n      $$.mapToIds($$.data.targets).forEach(function (id) {\r\n          $$.withoutFadeIn[id] = false;\r\n      });\r\n      // redraw chart !\r\n      $$.updateAndRedraw();\r\n      // update visible targets !\r\n      $$.showTargets();\r\n  };\r\n  Chart.prototype.subchart.hide = function () {\r\n      var $$ = this.internal;\r\n      if (!$$.config.subchart_show) {\r\n          return;\r\n      }\r\n      $$.config.subchart_show = false;\r\n      // remove DOM\r\n      $$.removeSubchart();\r\n      // re-render chart\r\n      $$.redraw();\r\n  };\n\n  Chart.prototype.tooltip = function () { };\r\n  Chart.prototype.tooltip.show = function (args) {\r\n      var $$ = this.internal, targets, data, mouse = {};\r\n      // determine mouse position on the chart\r\n      if (args.mouse) {\r\n          mouse = args.mouse;\r\n      }\r\n      else {\r\n          // determine focus data\r\n          if (args.data) {\r\n              data = args.data;\r\n          }\r\n          else if (typeof args.x !== 'undefined') {\r\n              if (args.id) {\r\n                  targets = $$.data.targets.filter(function (t) {\r\n                      return t.id === args.id;\r\n                  });\r\n              }\r\n              else {\r\n                  targets = $$.data.targets;\r\n              }\r\n              data = $$.filterByX(targets, args.x).slice(0, 1)[0];\r\n          }\r\n          mouse = data ? $$.getMousePosition(data) : null;\r\n      }\r\n      // emulate mouse events to show\r\n      $$.dispatchEvent('mousemove', mouse);\r\n      $$.config.tooltip_onshow.call($$, data);\r\n  };\r\n  Chart.prototype.tooltip.hide = function () {\r\n      // TODO: get target data by checking the state of focus\r\n      this.internal.dispatchEvent('mouseout', 0);\r\n      this.internal.config.tooltip_onhide.call(this);\r\n  };\n\n  Chart.prototype.transform = function (type, targetIds) {\r\n      var $$ = this.internal, options = ['pie', 'donut'].indexOf(type) >= 0 ? { withTransform: true } : null;\r\n      $$.transformTo(targetIds, type, options);\r\n  };\r\n  ChartInternal.prototype.transformTo = function (targetIds, type, optionsForRedraw) {\r\n      var $$ = this, withTransitionForAxis = !$$.hasArcType(), options = optionsForRedraw || {\r\n          withTransitionForAxis: withTransitionForAxis\r\n      };\r\n      options.withTransitionForTransform = false;\r\n      $$.transiting = false;\r\n      $$.setTargetType(targetIds, type);\r\n      $$.updateTargets($$.data.targets); // this is needed when transforming to arc\r\n      $$.updateAndRedraw(options);\r\n  };\n\n  Chart.prototype.x = function (x) {\r\n      var $$ = this.internal;\r\n      if (arguments.length) {\r\n          $$.updateTargetX($$.data.targets, x);\r\n          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });\r\n      }\r\n      return $$.data.xs;\r\n  };\r\n  Chart.prototype.xs = function (xs) {\r\n      var $$ = this.internal;\r\n      if (arguments.length) {\r\n          $$.updateTargetXs($$.data.targets, xs);\r\n          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });\r\n      }\r\n      return $$.data.xs;\r\n  };\n\n  Chart.prototype.zoom = function (domain) {\r\n      var $$ = this.internal;\r\n      if (domain) {\r\n          if ($$.isTimeSeries()) {\r\n              domain = domain.map(function (x) {\r\n                  return $$.parseDate(x);\r\n              });\r\n          }\r\n          if ($$.config.subchart_show) {\r\n              $$.brush.selectionAsValue(domain, true);\r\n          }\r\n          else {\r\n              $$.updateXDomain(null, true, false, false, domain);\r\n              $$.redraw({ withY: $$.config.zoom_rescale, withSubchart: false });\r\n          }\r\n          $$.config.zoom_onzoom.call(this, $$.x.orgDomain());\r\n          return domain;\r\n      }\r\n      else {\r\n          return $$.x.domain();\r\n      }\r\n  };\r\n  Chart.prototype.zoom.enable = function (enabled) {\r\n      var $$ = this.internal;\r\n      $$.config.zoom_enabled = enabled;\r\n      $$.updateAndRedraw();\r\n  };\r\n  Chart.prototype.unzoom = function () {\r\n      var $$ = this.internal;\r\n      if ($$.config.subchart_show) {\r\n          $$.brush.clear();\r\n      }\r\n      else {\r\n          $$.updateXDomain(null, true, false, false, $$.subX.domain());\r\n          $$.redraw({ withY: $$.config.zoom_rescale, withSubchart: false });\r\n      }\r\n  };\r\n  Chart.prototype.zoom.max = function (max) {\r\n      var $$ = this.internal, config = $$.config, d3 = $$.d3;\r\n      if (max === 0 || max) {\r\n          config.zoom_x_max = d3.max([$$.orgXDomain[1], max]);\r\n      }\r\n      else {\r\n          return config.zoom_x_max;\r\n      }\r\n  };\r\n  Chart.prototype.zoom.min = function (min) {\r\n      var $$ = this.internal, config = $$.config, d3 = $$.d3;\r\n      if (min === 0 || min) {\r\n          config.zoom_x_min = d3.min([$$.orgXDomain[0], min]);\r\n      }\r\n      else {\r\n          return config.zoom_x_min;\r\n      }\r\n  };\r\n  Chart.prototype.zoom.range = function (range) {\r\n      if (arguments.length) {\r\n          if (isDefined(range.max)) {\r\n              this.domain.max(range.max);\r\n          }\r\n          if (isDefined(range.min)) {\r\n              this.domain.min(range.min);\r\n          }\r\n      }\r\n      else {\r\n          return {\r\n              max: this.domain.max(),\r\n              min: this.domain.min()\r\n          };\r\n      }\r\n  };\n\n  ChartInternal.prototype.initPie = function () {\r\n      var $$ = this, d3 = $$.d3;\r\n      $$.pie = d3\r\n          .pie()\r\n          .padAngle(this.getPadAngle.bind(this))\r\n          .value(function (d) {\r\n          return d.values.reduce(function (a, b) {\r\n              return a + b.value;\r\n          }, 0);\r\n      });\r\n      var orderFct = $$.getOrderFunction();\r\n      // we need to reverse the returned order if asc or desc to have the slice in expected order.\r\n      if (orderFct && ($$.isOrderAsc() || $$.isOrderDesc())) {\r\n          var defaultSort_1 = orderFct;\r\n          orderFct = function (t1, t2) { return defaultSort_1(t1, t2) * -1; };\r\n      }\r\n      $$.pie.sort(orderFct || null);\r\n  };\r\n  ChartInternal.prototype.updateRadius = function () {\r\n      var $$ = this, config = $$.config, w = config.gauge_width || config.donut_width, gaugeArcWidth = $$.filterTargetsToShow($$.data.targets).length *\r\n          $$.config.gauge_arcs_minWidth;\r\n      $$.radiusExpanded =\r\n          (Math.min($$.arcWidth, $$.arcHeight) / 2) * ($$.hasType('gauge') ? 0.85 : 1);\r\n      $$.radius = $$.radiusExpanded * 0.95;\r\n      $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;\r\n      $$.innerRadius =\r\n          $$.hasType('donut') || $$.hasType('gauge')\r\n              ? $$.radius * $$.innerRadiusRatio\r\n              : 0;\r\n      $$.gaugeArcWidth = w\r\n          ? w\r\n          : gaugeArcWidth <= $$.radius - $$.innerRadius\r\n              ? $$.radius - $$.innerRadius\r\n              : gaugeArcWidth <= $$.radius\r\n                  ? gaugeArcWidth\r\n                  : $$.radius;\r\n  };\r\n  ChartInternal.prototype.getPadAngle = function () {\r\n      if (this.hasType('pie')) {\r\n          return this.config.pie_padAngle || 0;\r\n      }\r\n      else if (this.hasType('donut')) {\r\n          return this.config.donut_padAngle || 0;\r\n      }\r\n      else {\r\n          return 0;\r\n      }\r\n  };\r\n  ChartInternal.prototype.updateArc = function () {\r\n      var $$ = this;\r\n      $$.svgArc = $$.getSvgArc();\r\n      $$.svgArcExpanded = $$.getSvgArcExpanded();\r\n      $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);\r\n  };\r\n  ChartInternal.prototype.updateAngle = function (d) {\r\n      var $$ = this, config = $$.config, found = false, index = 0, gMin, gMax, gTic, gValue;\r\n      if (!config) {\r\n          return null;\r\n      }\r\n      $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function (t) {\r\n          if (!found && t.data.id === d.data.id) {\r\n              found = true;\r\n              d = t;\r\n              d.index = index;\r\n          }\r\n          index++;\r\n      });\r\n      if (isNaN(d.startAngle)) {\r\n          d.startAngle = 0;\r\n      }\r\n      if (isNaN(d.endAngle)) {\r\n          d.endAngle = d.startAngle;\r\n      }\r\n      if ($$.isGaugeType(d.data)) {\r\n          gMin = config.gauge_min;\r\n          gMax = config.gauge_max;\r\n          gTic = (Math.PI * (config.gauge_fullCircle ? 2 : 1)) / (gMax - gMin);\r\n          gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : gMax - gMin;\r\n          d.startAngle = config.gauge_startingAngle;\r\n          d.endAngle = d.startAngle + gTic * gValue;\r\n      }\r\n      return found ? d : null;\r\n  };\r\n  ChartInternal.prototype.getSvgArc = function () {\r\n      var $$ = this, hasGaugeType = $$.hasType('gauge'), singleArcWidth = $$.gaugeArcWidth / $$.filterTargetsToShow($$.data.targets).length, arc = $$.d3\r\n          .arc()\r\n          .outerRadius(function (d) {\r\n          return hasGaugeType ? $$.radius - singleArcWidth * d.index : $$.radius;\r\n      })\r\n          .innerRadius(function (d) {\r\n          return hasGaugeType\r\n              ? $$.radius - singleArcWidth * (d.index + 1)\r\n              : $$.innerRadius;\r\n      }), newArc = function (d, withoutUpdate) {\r\n          var updated;\r\n          if (withoutUpdate) {\r\n              return arc(d);\r\n          } // for interpolate\r\n          updated = $$.updateAngle(d);\r\n          return updated ? arc(updated) : 'M 0 0';\r\n      };\r\n      newArc.centroid = arc.centroid;\r\n      return newArc;\r\n  };\r\n  ChartInternal.prototype.getSvgArcExpanded = function (rate) {\r\n      rate = rate || 1;\r\n      var $$ = this, hasGaugeType = $$.hasType('gauge'), singleArcWidth = $$.gaugeArcWidth / $$.filterTargetsToShow($$.data.targets).length, expandWidth = Math.min($$.radiusExpanded * rate - $$.radius, singleArcWidth * 0.8 - (1 - rate) * 100), arc = $$.d3\r\n          .arc()\r\n          .outerRadius(function (d) {\r\n          return hasGaugeType\r\n              ? $$.radius - singleArcWidth * d.index + expandWidth\r\n              : $$.radiusExpanded * rate;\r\n      })\r\n          .innerRadius(function (d) {\r\n          return hasGaugeType\r\n              ? $$.radius - singleArcWidth * (d.index + 1)\r\n              : $$.innerRadius;\r\n      });\r\n      return function (d) {\r\n          var updated = $$.updateAngle(d);\r\n          return updated ? arc(updated) : 'M 0 0';\r\n      };\r\n  };\r\n  ChartInternal.prototype.getArc = function (d, withoutUpdate, force) {\r\n      return force || this.isArcType(d.data)\r\n          ? this.svgArc(d, withoutUpdate)\r\n          : 'M 0 0';\r\n  };\r\n  ChartInternal.prototype.transformForArcLabel = function (d) {\r\n      var $$ = this, config = $$.config, updated = $$.updateAngle(d), c, x, y, h, ratio, translate = '', hasGauge = $$.hasType('gauge');\r\n      if (updated && !hasGauge) {\r\n          c = this.svgArc.centroid(updated);\r\n          x = isNaN(c[0]) ? 0 : c[0];\r\n          y = isNaN(c[1]) ? 0 : c[1];\r\n          h = Math.sqrt(x * x + y * y);\r\n          if ($$.hasType('donut') && config.donut_label_ratio) {\r\n              ratio = isFunction(config.donut_label_ratio)\r\n                  ? config.donut_label_ratio(d, $$.radius, h)\r\n                  : config.donut_label_ratio;\r\n          }\r\n          else if ($$.hasType('pie') && config.pie_label_ratio) {\r\n              ratio = isFunction(config.pie_label_ratio)\r\n                  ? config.pie_label_ratio(d, $$.radius, h)\r\n                  : config.pie_label_ratio;\r\n          }\r\n          else {\r\n              ratio =\r\n                  $$.radius && h\r\n                      ? ((36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) *\r\n                          $$.radius) /\r\n                          h\r\n                      : 0;\r\n          }\r\n          translate = 'translate(' + x * ratio + ',' + y * ratio + ')';\r\n      }\r\n      else if (updated &&\r\n          hasGauge &&\r\n          $$.filterTargetsToShow($$.data.targets).length > 1) {\r\n          var y1 = Math.sin(updated.endAngle - Math.PI / 2);\r\n          x = Math.cos(updated.endAngle - Math.PI / 2) * ($$.radiusExpanded + 25);\r\n          y = y1 * ($$.radiusExpanded + 15 - Math.abs(y1 * 10)) + 3;\r\n          translate = 'translate(' + x + ',' + y + ')';\r\n      }\r\n      return translate;\r\n  };\r\n  /**\r\n   * @deprecated Use `getRatio('arc', d)` instead.\r\n   */\r\n  ChartInternal.prototype.getArcRatio = function (d) {\r\n      return this.getRatio('arc', d);\r\n  };\r\n  ChartInternal.prototype.convertToArcData = function (d) {\r\n      return this.addName({\r\n          id: d.data.id,\r\n          value: d.value,\r\n          ratio: this.getRatio('arc', d),\r\n          index: d.index\r\n      });\r\n  };\r\n  ChartInternal.prototype.textForArcLabel = function (d) {\r\n      var $$ = this, updated, value, ratio, id, format;\r\n      if (!$$.shouldShowArcLabel()) {\r\n          return '';\r\n      }\r\n      updated = $$.updateAngle(d);\r\n      value = updated ? updated.value : null;\r\n      ratio = $$.getRatio('arc', updated);\r\n      id = d.data.id;\r\n      if (!$$.hasType('gauge') && !$$.meetsArcLabelThreshold(ratio)) {\r\n          return '';\r\n      }\r\n      format = $$.getArcLabelFormat();\r\n      return format\r\n          ? format(value, ratio, id)\r\n          : $$.defaultArcValueFormat(value, ratio);\r\n  };\r\n  ChartInternal.prototype.textForGaugeMinMax = function (value, isMax) {\r\n      var $$ = this, format = $$.getGaugeLabelExtents();\r\n      return format ? format(value, isMax) : value;\r\n  };\r\n  ChartInternal.prototype.expandArc = function (targetIds) {\r\n      var $$ = this, interval;\r\n      // MEMO: avoid to cancel transition\r\n      if ($$.transiting) {\r\n          interval = window.setInterval(function () {\r\n              if (!$$.transiting) {\r\n                  window.clearInterval(interval);\r\n                  if ($$.legend.selectAll('.c3-legend-item-focused').size() > 0) {\r\n                      $$.expandArc(targetIds);\r\n                  }\r\n              }\r\n          }, 10);\r\n          return;\r\n      }\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      $$.svg\r\n          .selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc))\r\n          .each(function (d) {\r\n          if (!$$.shouldExpand(d.data.id)) {\r\n              return;\r\n          }\r\n          $$.d3\r\n              .select(this)\r\n              .selectAll('path')\r\n              .transition()\r\n              .duration($$.expandDuration(d.data.id))\r\n              .attr('d', $$.svgArcExpanded)\r\n              .transition()\r\n              .duration($$.expandDuration(d.data.id) * 2)\r\n              .attr('d', $$.svgArcExpandedSub)\r\n              .each(function (d) {\r\n              if ($$.isDonutType(d.data)) ;\r\n          });\r\n      });\r\n  };\r\n  ChartInternal.prototype.unexpandArc = function (targetIds) {\r\n      var $$ = this;\r\n      if ($$.transiting) {\r\n          return;\r\n      }\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      $$.svg\r\n          .selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc))\r\n          .selectAll('path')\r\n          .transition()\r\n          .duration(function (d) {\r\n          return $$.expandDuration(d.data.id);\r\n      })\r\n          .attr('d', $$.svgArc);\r\n      $$.svg.selectAll('.' + CLASS.arc);\r\n  };\r\n  ChartInternal.prototype.expandDuration = function (id) {\r\n      var $$ = this, config = $$.config;\r\n      if ($$.isDonutType(id)) {\r\n          return config.donut_expand_duration;\r\n      }\r\n      else if ($$.isGaugeType(id)) {\r\n          return config.gauge_expand_duration;\r\n      }\r\n      else if ($$.isPieType(id)) {\r\n          return config.pie_expand_duration;\r\n      }\r\n      else {\r\n          return 50;\r\n      }\r\n  };\r\n  ChartInternal.prototype.shouldExpand = function (id) {\r\n      var $$ = this, config = $$.config;\r\n      return (($$.isDonutType(id) && config.donut_expand) ||\r\n          ($$.isGaugeType(id) && config.gauge_expand) ||\r\n          ($$.isPieType(id) && config.pie_expand));\r\n  };\r\n  ChartInternal.prototype.shouldShowArcLabel = function () {\r\n      var $$ = this, config = $$.config, shouldShow = true;\r\n      if ($$.hasType('donut')) {\r\n          shouldShow = config.donut_label_show;\r\n      }\r\n      else if ($$.hasType('pie')) {\r\n          shouldShow = config.pie_label_show;\r\n      }\r\n      // when gauge, always true\r\n      return shouldShow;\r\n  };\r\n  ChartInternal.prototype.meetsArcLabelThreshold = function (ratio) {\r\n      var $$ = this, config = $$.config, threshold = $$.hasType('donut')\r\n          ? config.donut_label_threshold\r\n          : config.pie_label_threshold;\r\n      return ratio >= threshold;\r\n  };\r\n  ChartInternal.prototype.getArcLabelFormat = function () {\r\n      var $$ = this, config = $$.config, format = config.pie_label_format;\r\n      if ($$.hasType('gauge')) {\r\n          format = config.gauge_label_format;\r\n      }\r\n      else if ($$.hasType('donut')) {\r\n          format = config.donut_label_format;\r\n      }\r\n      return format;\r\n  };\r\n  ChartInternal.prototype.getGaugeLabelExtents = function () {\r\n      var $$ = this, config = $$.config;\r\n      return config.gauge_label_extents;\r\n  };\r\n  ChartInternal.prototype.getArcTitle = function () {\r\n      var $$ = this;\r\n      return $$.hasType('donut') ? $$.config.donut_title : '';\r\n  };\r\n  ChartInternal.prototype.updateTargetsForArc = function (targets) {\r\n      var $$ = this, main = $$.main, mainPies, mainPieEnter, classChartArc = $$.classChartArc.bind($$), classArcs = $$.classArcs.bind($$), classFocus = $$.classFocus.bind($$);\r\n      mainPies = main\r\n          .select('.' + CLASS.chartArcs)\r\n          .selectAll('.' + CLASS.chartArc)\r\n          .data($$.pie(targets))\r\n          .attr('class', function (d) {\r\n          return classChartArc(d) + classFocus(d.data);\r\n      });\r\n      mainPieEnter = mainPies\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', classChartArc);\r\n      mainPieEnter.append('g').attr('class', classArcs);\r\n      mainPieEnter\r\n          .append('text')\r\n          .attr('dy', $$.hasType('gauge') ? '-.1em' : '.35em')\r\n          .style('opacity', 0)\r\n          .style('text-anchor', 'middle')\r\n          .style('pointer-events', 'none');\r\n      // MEMO: can not keep same color..., but not bad to update color in redraw\r\n      //mainPieUpdate.exit().remove();\r\n  };\r\n  ChartInternal.prototype.initArc = function () {\r\n      var $$ = this;\r\n      $$.arcs = $$.main\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.chartArcs)\r\n          .attr('transform', $$.getTranslate('arc'));\r\n      $$.arcs\r\n          .append('text')\r\n          .attr('class', CLASS.chartArcsTitle)\r\n          .style('text-anchor', 'middle')\r\n          .text($$.getArcTitle());\r\n  };\r\n  ChartInternal.prototype.redrawArc = function (duration, durationForExit, withTransform) {\r\n      var $$ = this, d3 = $$.d3, config = $$.config, main = $$.main, arcs, mainArc, arcLabelLines, mainArcLabelLine, hasGaugeType = $$.hasType('gauge');\r\n      arcs = main\r\n          .selectAll('.' + CLASS.arcs)\r\n          .selectAll('.' + CLASS.arc)\r\n          .data($$.arcData.bind($$));\r\n      mainArc = arcs\r\n          .enter()\r\n          .append('path')\r\n          .attr('class', $$.classArc.bind($$))\r\n          .style('fill', function (d) {\r\n          return $$.color(d.data);\r\n      })\r\n          .style('cursor', function (d) {\r\n          return config.interaction_enabled && config.data_selection_isselectable(d)\r\n              ? 'pointer'\r\n              : null;\r\n      })\r\n          .each(function (d) {\r\n          if ($$.isGaugeType(d.data)) {\r\n              d.startAngle = d.endAngle = config.gauge_startingAngle;\r\n          }\r\n          this._current = d;\r\n      })\r\n          .merge(arcs);\r\n      if (hasGaugeType) {\r\n          arcLabelLines = main\r\n              .selectAll('.' + CLASS.arcs)\r\n              .selectAll('.' + CLASS.arcLabelLine)\r\n              .data($$.arcData.bind($$));\r\n          mainArcLabelLine = arcLabelLines\r\n              .enter()\r\n              .append('rect')\r\n              .attr('class', function (d) {\r\n              return (CLASS.arcLabelLine +\r\n                  ' ' +\r\n                  CLASS.target +\r\n                  ' ' +\r\n                  CLASS.target +\r\n                  '-' +\r\n                  d.data.id);\r\n          })\r\n              .merge(arcLabelLines);\r\n          if ($$.filterTargetsToShow($$.data.targets).length === 1) {\r\n              mainArcLabelLine.style('display', 'none');\r\n          }\r\n          else {\r\n              mainArcLabelLine\r\n                  .style('fill', function (d) {\r\n                  return $$.levelColor\r\n                      ? $$.levelColor(d.data.values.reduce(function (total, item) {\r\n                          return total + item.value;\r\n                      }, 0))\r\n                      : $$.color(d.data);\r\n              })\r\n                  .style('display', config.gauge_labelLine_show ? '' : 'none')\r\n                  .each(function (d) {\r\n                  var lineLength = 0, lineThickness = 2, x = 0, y = 0, transform = '';\r\n                  if ($$.hiddenTargetIds.indexOf(d.data.id) < 0) {\r\n                      var updated = $$.updateAngle(d), innerLineLength = ($$.gaugeArcWidth /\r\n                          $$.filterTargetsToShow($$.data.targets).length) *\r\n                          (updated.index + 1), lineAngle = updated.endAngle - Math.PI / 2, arcInnerRadius = $$.radius - innerLineLength, linePositioningAngle = lineAngle - (arcInnerRadius === 0 ? 0 : 1 / arcInnerRadius);\r\n                      lineLength = $$.radiusExpanded - $$.radius + innerLineLength;\r\n                      x = Math.cos(linePositioningAngle) * arcInnerRadius;\r\n                      y = Math.sin(linePositioningAngle) * arcInnerRadius;\r\n                      transform =\r\n                          'rotate(' +\r\n                              (lineAngle * 180) / Math.PI +\r\n                              ', ' +\r\n                              x +\r\n                              ', ' +\r\n                              y +\r\n                              ')';\r\n                  }\r\n                  d3.select(this)\r\n                      .attr('x', x)\r\n                      .attr('y', y)\r\n                      .attr('width', lineLength)\r\n                      .attr('height', lineThickness)\r\n                      .attr('transform', transform)\r\n                      .style('stroke-dasharray', '0, ' + (lineLength + lineThickness) + ', 0');\r\n              });\r\n          }\r\n      }\r\n      mainArc\r\n          .attr('transform', function (d) {\r\n          return !$$.isGaugeType(d.data) && withTransform ? 'scale(0)' : '';\r\n      })\r\n          .on('mouseover', config.interaction_enabled\r\n          ? function (d) {\r\n              var updated, arcData;\r\n              if ($$.transiting) {\r\n                  // skip while transiting\r\n                  return;\r\n              }\r\n              updated = $$.updateAngle(d);\r\n              if (updated) {\r\n                  arcData = $$.convertToArcData(updated);\r\n                  // transitions\r\n                  $$.expandArc(updated.data.id);\r\n                  $$.api.focus(updated.data.id);\r\n                  $$.toggleFocusLegend(updated.data.id, true);\r\n                  $$.config.data_onmouseover(arcData, this);\r\n              }\r\n          }\r\n          : null)\r\n          .on('mousemove', config.interaction_enabled\r\n          ? function (d) {\r\n              var updated = $$.updateAngle(d), arcData, selectedData;\r\n              if (updated) {\r\n                  (arcData = $$.convertToArcData(updated)),\r\n                      (selectedData = [arcData]);\r\n                  $$.showTooltip(selectedData, this);\r\n              }\r\n          }\r\n          : null)\r\n          .on('mouseout', config.interaction_enabled\r\n          ? function (d) {\r\n              var updated, arcData;\r\n              if ($$.transiting) {\r\n                  // skip while transiting\r\n                  return;\r\n              }\r\n              updated = $$.updateAngle(d);\r\n              if (updated) {\r\n                  arcData = $$.convertToArcData(updated);\r\n                  // transitions\r\n                  $$.unexpandArc(updated.data.id);\r\n                  $$.api.revert();\r\n                  $$.revertLegend();\r\n                  $$.hideTooltip();\r\n                  $$.config.data_onmouseout(arcData, this);\r\n              }\r\n          }\r\n          : null)\r\n          .on('click', config.interaction_enabled\r\n          ? function (d, i) {\r\n              var updated = $$.updateAngle(d), arcData;\r\n              if (updated) {\r\n                  arcData = $$.convertToArcData(updated);\r\n                  if ($$.toggleShape) {\r\n                      $$.toggleShape(this, arcData, i);\r\n                  }\r\n                  $$.config.data_onclick.call($$.api, arcData, this);\r\n              }\r\n          }\r\n          : null)\r\n          .each(function () {\r\n          $$.transiting = true;\r\n      })\r\n          .transition()\r\n          .duration(duration)\r\n          .attrTween('d', function (d) {\r\n          var updated = $$.updateAngle(d), interpolate;\r\n          if (!updated) {\r\n              return function () {\r\n                  return 'M 0 0';\r\n              };\r\n          }\r\n          //                if (this._current === d) {\r\n          //                    this._current = {\r\n          //                        startAngle: Math.PI*2,\r\n          //                        endAngle: Math.PI*2,\r\n          //                    };\r\n          //                }\r\n          if (isNaN(this._current.startAngle)) {\r\n              this._current.startAngle = 0;\r\n          }\r\n          if (isNaN(this._current.endAngle)) {\r\n              this._current.endAngle = this._current.startAngle;\r\n          }\r\n          interpolate = d3.interpolate(this._current, updated);\r\n          this._current = interpolate(0);\r\n          return function (t) {\r\n              // prevents crashing the charts once in transition and chart.destroy() has been called\r\n              if ($$.config === null) {\r\n                  return 'M 0 0';\r\n              }\r\n              var interpolated = interpolate(t);\r\n              interpolated.data = d.data; // data.id will be updated by interporator\r\n              return $$.getArc(interpolated, true);\r\n          };\r\n      })\r\n          .attr('transform', withTransform ? 'scale(1)' : '')\r\n          .style('fill', function (d) {\r\n          return $$.levelColor\r\n              ? $$.levelColor(d.data.values.reduce(function (total, item) {\r\n                  return total + item.value;\r\n              }, 0))\r\n              : $$.color(d.data.id);\r\n      }) // Where gauge reading color would receive customization.\r\n          .call($$.endall, function () {\r\n          $$.transiting = false;\r\n      });\r\n      arcs\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      main\r\n          .selectAll('.' + CLASS.chartArc)\r\n          .select('text')\r\n          .style('opacity', 0)\r\n          .attr('class', function (d) {\r\n          return $$.isGaugeType(d.data) ? CLASS.gaugeValue : '';\r\n      })\r\n          .text($$.textForArcLabel.bind($$))\r\n          .attr('transform', $$.transformForArcLabel.bind($$))\r\n          .style('font-size', function (d) {\r\n          return $$.isGaugeType(d.data) &&\r\n              $$.filterTargetsToShow($$.data.targets).length === 1\r\n              ? Math.round($$.radius / 5) + 'px'\r\n              : '';\r\n      })\r\n          .transition()\r\n          .duration(duration)\r\n          .style('opacity', function (d) {\r\n          return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0;\r\n      });\r\n      main\r\n          .select('.' + CLASS.chartArcsTitle)\r\n          .style('opacity', $$.hasType('donut') || hasGaugeType ? 1 : 0);\r\n      if (hasGaugeType) {\r\n          var index_1 = 0;\r\n          var backgroundArc = $$.arcs\r\n              .select('g.' + CLASS.chartArcsBackground)\r\n              .selectAll('path.' + CLASS.chartArcsBackground)\r\n              .data($$.data.targets);\r\n          backgroundArc\r\n              .enter()\r\n              .append('path')\r\n              .attr('class', function (d, i) {\r\n              return CLASS.chartArcsBackground + ' ' + CLASS.chartArcsBackground + '-' + i;\r\n          })\r\n              .merge(backgroundArc)\r\n              .attr('d', function (d1) {\r\n              if ($$.hiddenTargetIds.indexOf(d1.id) >= 0) {\r\n                  return 'M 0 0';\r\n              }\r\n              var d = {\r\n                  data: [{ value: config.gauge_max }],\r\n                  startAngle: config.gauge_startingAngle,\r\n                  endAngle: -1 *\r\n                      config.gauge_startingAngle *\r\n                      (config.gauge_fullCircle ? Math.PI : 1),\r\n                  index: index_1++\r\n              };\r\n              return $$.getArc(d, true, true);\r\n          });\r\n          backgroundArc.exit().remove();\r\n          $$.arcs\r\n              .select('.' + CLASS.chartArcsGaugeUnit)\r\n              .attr('dy', '.75em')\r\n              .text(config.gauge_label_show ? config.gauge_units : '');\r\n          $$.arcs\r\n              .select('.' + CLASS.chartArcsGaugeMin)\r\n              .attr('dx', -1 *\r\n              ($$.innerRadius +\r\n                  ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2)) +\r\n              'px')\r\n              .attr('dy', '1.2em')\r\n              .text(config.gauge_label_show\r\n              ? $$.textForGaugeMinMax(config.gauge_min, false)\r\n              : '');\r\n          $$.arcs\r\n              .select('.' + CLASS.chartArcsGaugeMax)\r\n              .attr('dx', $$.innerRadius +\r\n              ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2) +\r\n              'px')\r\n              .attr('dy', '1.2em')\r\n              .text(config.gauge_label_show\r\n              ? $$.textForGaugeMinMax(config.gauge_max, true)\r\n              : '');\r\n      }\r\n  };\r\n  ChartInternal.prototype.initGauge = function () {\r\n      var arcs = this.arcs;\r\n      if (this.hasType('gauge')) {\r\n          arcs.append('g').attr('class', CLASS.chartArcsBackground);\r\n          arcs\r\n              .append('text')\r\n              .attr('class', CLASS.chartArcsGaugeUnit)\r\n              .style('text-anchor', 'middle')\r\n              .style('pointer-events', 'none');\r\n          arcs\r\n              .append('text')\r\n              .attr('class', CLASS.chartArcsGaugeMin)\r\n              .style('text-anchor', 'middle')\r\n              .style('pointer-events', 'none');\r\n          arcs\r\n              .append('text')\r\n              .attr('class', CLASS.chartArcsGaugeMax)\r\n              .style('text-anchor', 'middle')\r\n              .style('pointer-events', 'none');\r\n      }\r\n  };\r\n  ChartInternal.prototype.getGaugeLabelHeight = function () {\r\n      return this.config.gauge_label_show ? 20 : 0;\r\n  };\n\n  /**\r\n   * Store value into cache\r\n   *\r\n   * @param key\r\n   * @param value\r\n   */\r\n  ChartInternal.prototype.addToCache = function (key, value) {\r\n      this.cache[\"$\" + key] = value;\r\n  };\r\n  /**\r\n   * Returns a cached value or undefined\r\n   *\r\n   * @param key\r\n   * @return {*}\r\n   */\r\n  ChartInternal.prototype.getFromCache = function (key) {\r\n      return this.cache[\"$\" + key];\r\n  };\r\n  /**\r\n   * Reset cached data\r\n   */\r\n  ChartInternal.prototype.resetCache = function () {\r\n      var _this = this;\r\n      Object.keys(this.cache)\r\n          .filter(function (key) { return /^\\$/.test(key); })\r\n          .forEach(function (key) {\r\n          delete _this.cache[key];\r\n      });\r\n  };\r\n  // Old API that stores Targets\r\n  ChartInternal.prototype.hasCaches = function (ids) {\r\n      for (var i = 0; i < ids.length; i++) {\r\n          if (!(ids[i] in this.cache)) {\r\n              return false;\r\n          }\r\n      }\r\n      return true;\r\n  };\r\n  ChartInternal.prototype.addCache = function (id, target) {\r\n      this.cache[id] = this.cloneTarget(target);\r\n  };\r\n  ChartInternal.prototype.getCaches = function (ids) {\r\n      var targets = [], i;\r\n      for (i = 0; i < ids.length; i++) {\r\n          if (ids[i] in this.cache) {\r\n              targets.push(this.cloneTarget(this.cache[ids[i]]));\r\n          }\r\n      }\r\n      return targets;\r\n  };\n\n  ChartInternal.prototype.categoryName = function (i) {\r\n      var config = this.config;\r\n      return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;\r\n  };\n\n  ChartInternal.prototype.generateTargetClass = function (targetId) {\r\n      return targetId || targetId === 0 ? ('-' + targetId).replace(/\\s/g, '-') : '';\r\n  };\r\n  ChartInternal.prototype.generateClass = function (prefix, targetId) {\r\n      return ' ' + prefix + ' ' + prefix + this.generateTargetClass(targetId);\r\n  };\r\n  ChartInternal.prototype.classText = function (d) {\r\n      return this.generateClass(CLASS.text, d.index);\r\n  };\r\n  ChartInternal.prototype.classTexts = function (d) {\r\n      return this.generateClass(CLASS.texts, d.id);\r\n  };\r\n  ChartInternal.prototype.classShape = function (d) {\r\n      return this.generateClass(CLASS.shape, d.index);\r\n  };\r\n  ChartInternal.prototype.classShapes = function (d) {\r\n      return this.generateClass(CLASS.shapes, d.id);\r\n  };\r\n  ChartInternal.prototype.classLine = function (d) {\r\n      return this.classShape(d) + this.generateClass(CLASS.line, d.id);\r\n  };\r\n  ChartInternal.prototype.classLines = function (d) {\r\n      return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);\r\n  };\r\n  ChartInternal.prototype.classCircle = function (d) {\r\n      return this.classShape(d) + this.generateClass(CLASS.circle, d.index);\r\n  };\r\n  ChartInternal.prototype.classCircles = function (d) {\r\n      return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);\r\n  };\r\n  ChartInternal.prototype.classBar = function (d) {\r\n      return this.classShape(d) + this.generateClass(CLASS.bar, d.index);\r\n  };\r\n  ChartInternal.prototype.classBars = function (d) {\r\n      return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);\r\n  };\r\n  ChartInternal.prototype.classArc = function (d) {\r\n      return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);\r\n  };\r\n  ChartInternal.prototype.classArcs = function (d) {\r\n      return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);\r\n  };\r\n  ChartInternal.prototype.classArea = function (d) {\r\n      return this.classShape(d) + this.generateClass(CLASS.area, d.id);\r\n  };\r\n  ChartInternal.prototype.classAreas = function (d) {\r\n      return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);\r\n  };\r\n  ChartInternal.prototype.classRegion = function (d, i) {\r\n      return (this.generateClass(CLASS.region, i) + ' ' + ('class' in d ? d['class'] : ''));\r\n  };\r\n  ChartInternal.prototype.classEvent = function (d) {\r\n      return this.generateClass(CLASS.eventRect, d.index);\r\n  };\r\n  ChartInternal.prototype.classTarget = function (id) {\r\n      var $$ = this;\r\n      var additionalClassSuffix = $$.config.data_classes[id], additionalClass = '';\r\n      if (additionalClassSuffix) {\r\n          additionalClass = ' ' + CLASS.target + '-' + additionalClassSuffix;\r\n      }\r\n      return $$.generateClass(CLASS.target, id) + additionalClass;\r\n  };\r\n  ChartInternal.prototype.classFocus = function (d) {\r\n      return this.classFocused(d) + this.classDefocused(d);\r\n  };\r\n  ChartInternal.prototype.classFocused = function (d) {\r\n      return ' ' + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : '');\r\n  };\r\n  ChartInternal.prototype.classDefocused = function (d) {\r\n      return (' ' + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : ''));\r\n  };\r\n  ChartInternal.prototype.classChartText = function (d) {\r\n      return CLASS.chartText + this.classTarget(d.id);\r\n  };\r\n  ChartInternal.prototype.classChartLine = function (d) {\r\n      return CLASS.chartLine + this.classTarget(d.id);\r\n  };\r\n  ChartInternal.prototype.classChartBar = function (d) {\r\n      return CLASS.chartBar + this.classTarget(d.id);\r\n  };\r\n  ChartInternal.prototype.classChartArc = function (d) {\r\n      return CLASS.chartArc + this.classTarget(d.data.id);\r\n  };\r\n  ChartInternal.prototype.getTargetSelectorSuffix = function (targetId) {\r\n      var targetClass = this.generateTargetClass(targetId);\r\n      if (window.CSS && window.CSS.escape) {\r\n          return window.CSS.escape(targetClass);\r\n      }\r\n      // fallback on imperfect method for old browsers (does not handles unicode)\r\n      return targetClass.replace(/([?!@#$%^&*()=+,.<>'\":;\\[\\]\\/|~`{}\\\\])/g, '\\\\$1');\r\n  };\r\n  ChartInternal.prototype.selectorTarget = function (id, prefix) {\r\n      return (prefix || '') + '.' + CLASS.target + this.getTargetSelectorSuffix(id);\r\n  };\r\n  ChartInternal.prototype.selectorTargets = function (ids, prefix) {\r\n      var $$ = this;\r\n      ids = ids || [];\r\n      return ids.length\r\n          ? ids.map(function (id) {\r\n              return $$.selectorTarget(id, prefix);\r\n          })\r\n          : null;\r\n  };\r\n  ChartInternal.prototype.selectorLegend = function (id) {\r\n      return '.' + CLASS.legendItem + this.getTargetSelectorSuffix(id);\r\n  };\r\n  ChartInternal.prototype.selectorLegends = function (ids) {\r\n      var $$ = this;\r\n      return ids && ids.length\r\n          ? ids.map(function (id) {\r\n              return $$.selectorLegend(id);\r\n          })\r\n          : null;\r\n  };\n\n  ChartInternal.prototype.getClipPath = function (id) {\r\n      return 'url(' + (isIE(9) ? '' : document.URL.split('#')[0]) + '#' + id + ')';\r\n  };\r\n  ChartInternal.prototype.appendClip = function (parent, id) {\r\n      return parent\r\n          .append('clipPath')\r\n          .attr('id', id)\r\n          .append('rect');\r\n  };\r\n  ChartInternal.prototype.getAxisClipX = function (forHorizontal) {\r\n      // axis line width + padding for left\r\n      var left = Math.max(30, this.margin.left);\r\n      return forHorizontal ? -(1 + left) : -(left - 1);\r\n  };\r\n  ChartInternal.prototype.getAxisClipY = function (forHorizontal) {\r\n      return forHorizontal ? -20 : -this.margin.top;\r\n  };\r\n  ChartInternal.prototype.getXAxisClipX = function () {\r\n      var $$ = this;\r\n      return $$.getAxisClipX(!$$.config.axis_rotated);\r\n  };\r\n  ChartInternal.prototype.getXAxisClipY = function () {\r\n      var $$ = this;\r\n      return $$.getAxisClipY(!$$.config.axis_rotated);\r\n  };\r\n  ChartInternal.prototype.getYAxisClipX = function () {\r\n      var $$ = this;\r\n      return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);\r\n  };\r\n  ChartInternal.prototype.getYAxisClipY = function () {\r\n      var $$ = this;\r\n      return $$.getAxisClipY($$.config.axis_rotated);\r\n  };\r\n  ChartInternal.prototype.getAxisClipWidth = function (forHorizontal) {\r\n      var $$ = this, left = Math.max(30, $$.margin.left), right = Math.max(30, $$.margin.right);\r\n      // width + axis line width + padding for left/right\r\n      return forHorizontal ? $$.width + 2 + left + right : $$.margin.left + 20;\r\n  };\r\n  ChartInternal.prototype.getAxisClipHeight = function (forHorizontal) {\r\n      // less than 20 is not enough to show the axis label 'outer' without legend\r\n      return ((forHorizontal ? this.margin.bottom : this.margin.top + this.height) + 20);\r\n  };\r\n  ChartInternal.prototype.getXAxisClipWidth = function () {\r\n      var $$ = this;\r\n      return $$.getAxisClipWidth(!$$.config.axis_rotated);\r\n  };\r\n  ChartInternal.prototype.getXAxisClipHeight = function () {\r\n      var $$ = this;\r\n      return $$.getAxisClipHeight(!$$.config.axis_rotated);\r\n  };\r\n  ChartInternal.prototype.getYAxisClipWidth = function () {\r\n      var $$ = this;\r\n      return ($$.getAxisClipWidth($$.config.axis_rotated) +\r\n          ($$.config.axis_y_inner ? 20 : 0));\r\n  };\r\n  ChartInternal.prototype.getYAxisClipHeight = function () {\r\n      var $$ = this;\r\n      return $$.getAxisClipHeight($$.config.axis_rotated);\r\n  };\n\n  ChartInternal.prototype.generateColor = function () {\r\n      var $$ = this, config = $$.config, d3 = $$.d3, colors = config.data_colors, pattern = notEmpty(config.color_pattern)\r\n          ? config.color_pattern\r\n          : d3.schemeCategory10, callback = config.data_color, ids = [];\r\n      return function (d) {\r\n          var id = d.id || (d.data && d.data.id) || d, color;\r\n          // if callback function is provided\r\n          if (colors[id] instanceof Function) {\r\n              color = colors[id](d);\r\n          }\r\n          // if specified, choose that color\r\n          else if (colors[id]) {\r\n              color = colors[id];\r\n          }\r\n          // if not specified, choose from pattern\r\n          else {\r\n              if (ids.indexOf(id) < 0) {\r\n                  ids.push(id);\r\n              }\r\n              color = pattern[ids.indexOf(id) % pattern.length];\r\n              colors[id] = color;\r\n          }\r\n          return callback instanceof Function ? callback(color, d) : color;\r\n      };\r\n  };\r\n  ChartInternal.prototype.generateLevelColor = function () {\r\n      var $$ = this, config = $$.config, colors = config.color_pattern, threshold = config.color_threshold, asValue = threshold.unit === 'value', values = threshold.values && threshold.values.length ? threshold.values : [], max = threshold.max || 100;\r\n      return notEmpty(threshold) && notEmpty(colors)\r\n          ? function (value) {\r\n              var i, v, color = colors[colors.length - 1];\r\n              for (i = 0; i < values.length; i++) {\r\n                  v = asValue ? value : (value * 100) / max;\r\n                  if (v < values[i]) {\r\n                      color = colors[i];\r\n                      break;\r\n                  }\r\n              }\r\n              return color;\r\n          }\r\n          : null;\r\n  };\n\n  ChartInternal.prototype.getDefaultConfig = function () {\r\n      var config = {\r\n          bindto: '#chart',\r\n          svg_classname: undefined,\r\n          size_width: undefined,\r\n          size_height: undefined,\r\n          padding_left: undefined,\r\n          padding_right: undefined,\r\n          padding_top: undefined,\r\n          padding_bottom: undefined,\r\n          resize_auto: true,\r\n          zoom_enabled: false,\r\n          zoom_initialRange: undefined,\r\n          zoom_type: 'scroll',\r\n          zoom_disableDefaultBehavior: false,\r\n          zoom_privileged: false,\r\n          zoom_rescale: false,\r\n          zoom_onzoom: function () { },\r\n          zoom_onzoomstart: function () { },\r\n          zoom_onzoomend: function () { },\r\n          zoom_x_min: undefined,\r\n          zoom_x_max: undefined,\r\n          interaction_brighten: true,\r\n          interaction_enabled: true,\r\n          onmouseover: function () { },\r\n          onmouseout: function () { },\r\n          onresize: function () { },\r\n          onresized: function () { },\r\n          oninit: function () { },\r\n          onrendered: function () { },\r\n          transition_duration: 350,\r\n          data_epochs: 'epochs',\r\n          data_x: undefined,\r\n          data_xs: {},\r\n          data_xFormat: '%Y-%m-%d',\r\n          data_xLocaltime: true,\r\n          data_xSort: true,\r\n          data_idConverter: function (id) {\r\n              return id;\r\n          },\r\n          data_names: {},\r\n          data_classes: {},\r\n          data_groups: [],\r\n          data_axes: {},\r\n          data_type: undefined,\r\n          data_types: {},\r\n          data_labels: {},\r\n          data_order: 'desc',\r\n          data_regions: {},\r\n          data_color: undefined,\r\n          data_colors: {},\r\n          data_hide: false,\r\n          data_filter: undefined,\r\n          data_selection_enabled: false,\r\n          data_selection_grouped: false,\r\n          data_selection_isselectable: function () {\r\n              return true;\r\n          },\r\n          data_selection_multiple: true,\r\n          data_selection_draggable: false,\r\n          data_stack_normalize: false,\r\n          data_onclick: function () { },\r\n          data_onmouseover: function () { },\r\n          data_onmouseout: function () { },\r\n          data_onselected: function () { },\r\n          data_onunselected: function () { },\r\n          data_url: undefined,\r\n          data_headers: undefined,\r\n          data_json: undefined,\r\n          data_rows: undefined,\r\n          data_columns: undefined,\r\n          data_mimeType: undefined,\r\n          data_keys: undefined,\r\n          // configuration for no plot-able data supplied.\r\n          data_empty_label_text: '',\r\n          // subchart\r\n          subchart_show: false,\r\n          subchart_size_height: 60,\r\n          subchart_axis_x_show: true,\r\n          subchart_onbrush: function () { },\r\n          // color\r\n          color_pattern: [],\r\n          color_threshold: {},\r\n          // legend\r\n          legend_show: true,\r\n          legend_hide: false,\r\n          legend_position: 'bottom',\r\n          legend_inset_anchor: 'top-left',\r\n          legend_inset_x: 10,\r\n          legend_inset_y: 0,\r\n          legend_inset_step: undefined,\r\n          legend_item_onclick: undefined,\r\n          legend_item_onmouseover: undefined,\r\n          legend_item_onmouseout: undefined,\r\n          legend_equally: false,\r\n          legend_padding: 0,\r\n          legend_item_tile_width: 10,\r\n          legend_item_tile_height: 10,\r\n          // axis\r\n          axis_rotated: false,\r\n          axis_x_show: true,\r\n          axis_x_type: 'indexed',\r\n          axis_x_localtime: true,\r\n          axis_x_categories: [],\r\n          axis_x_tick_centered: false,\r\n          axis_x_tick_format: undefined,\r\n          axis_x_tick_culling: {},\r\n          axis_x_tick_culling_max: 10,\r\n          axis_x_tick_count: undefined,\r\n          axis_x_tick_fit: true,\r\n          axis_x_tick_values: null,\r\n          axis_x_tick_rotate: 0,\r\n          axis_x_tick_outer: true,\r\n          axis_x_tick_multiline: true,\r\n          axis_x_tick_multilineMax: 0,\r\n          axis_x_tick_width: null,\r\n          axis_x_max: undefined,\r\n          axis_x_min: undefined,\r\n          axis_x_padding: {},\r\n          axis_x_height: undefined,\r\n          axis_x_selection: undefined,\r\n          axis_x_label: {},\r\n          axis_x_inner: undefined,\r\n          axis_y_show: true,\r\n          axis_y_type: 'linear',\r\n          axis_y_max: undefined,\r\n          axis_y_min: undefined,\r\n          axis_y_inverted: false,\r\n          axis_y_center: undefined,\r\n          axis_y_inner: undefined,\r\n          axis_y_label: {},\r\n          axis_y_tick_format: undefined,\r\n          axis_y_tick_outer: true,\r\n          axis_y_tick_values: null,\r\n          axis_y_tick_rotate: 0,\r\n          axis_y_tick_count: undefined,\r\n          axis_y_tick_time_type: undefined,\r\n          axis_y_tick_time_interval: undefined,\r\n          axis_y_padding: {},\r\n          axis_y_default: undefined,\r\n          axis_y2_show: false,\r\n          axis_y2_type: 'linear',\r\n          axis_y2_max: undefined,\r\n          axis_y2_min: undefined,\r\n          axis_y2_inverted: false,\r\n          axis_y2_center: undefined,\r\n          axis_y2_inner: undefined,\r\n          axis_y2_label: {},\r\n          axis_y2_tick_format: undefined,\r\n          axis_y2_tick_outer: true,\r\n          axis_y2_tick_values: null,\r\n          axis_y2_tick_count: undefined,\r\n          axis_y2_padding: {},\r\n          axis_y2_default: undefined,\r\n          // grid\r\n          grid_x_show: false,\r\n          grid_x_type: 'tick',\r\n          grid_x_lines: [],\r\n          grid_y_show: false,\r\n          // not used\r\n          // grid_y_type: 'tick',\r\n          grid_y_lines: [],\r\n          grid_y_ticks: 10,\r\n          grid_focus_show: true,\r\n          grid_lines_front: true,\r\n          // point - point of each data\r\n          point_show: true,\r\n          point_r: 2.5,\r\n          point_sensitivity: 10,\r\n          point_focus_expand_enabled: true,\r\n          point_focus_expand_r: undefined,\r\n          point_select_r: undefined,\r\n          // line\r\n          line_connectNull: false,\r\n          line_step_type: 'step',\r\n          // bar\r\n          bar_width: undefined,\r\n          bar_width_ratio: 0.6,\r\n          bar_width_max: undefined,\r\n          bar_zerobased: true,\r\n          bar_space: 0,\r\n          // area\r\n          area_zerobased: true,\r\n          area_above: false,\r\n          // pie\r\n          pie_label_show: true,\r\n          pie_label_format: undefined,\r\n          pie_label_threshold: 0.05,\r\n          pie_label_ratio: undefined,\r\n          pie_expand: {},\r\n          pie_expand_duration: 50,\r\n          pie_padAngle: 0,\r\n          // gauge\r\n          gauge_fullCircle: false,\r\n          gauge_label_show: true,\r\n          gauge_labelLine_show: true,\r\n          gauge_label_format: undefined,\r\n          gauge_min: 0,\r\n          gauge_max: 100,\r\n          gauge_startingAngle: (-1 * Math.PI) / 2,\r\n          gauge_label_extents: undefined,\r\n          gauge_units: undefined,\r\n          gauge_width: undefined,\r\n          gauge_arcs_minWidth: 5,\r\n          gauge_expand: {},\r\n          gauge_expand_duration: 50,\r\n          // donut\r\n          donut_label_show: true,\r\n          donut_label_format: undefined,\r\n          donut_label_threshold: 0.05,\r\n          donut_label_ratio: undefined,\r\n          donut_width: undefined,\r\n          donut_title: '',\r\n          donut_expand: {},\r\n          donut_expand_duration: 50,\r\n          donut_padAngle: 0,\r\n          // spline\r\n          spline_interpolation_type: 'cardinal',\r\n          // stanford\r\n          stanford_lines: [],\r\n          stanford_regions: [],\r\n          stanford_texts: [],\r\n          stanford_scaleMin: undefined,\r\n          stanford_scaleMax: undefined,\r\n          stanford_scaleWidth: undefined,\r\n          stanford_scaleFormat: undefined,\r\n          stanford_scaleValues: undefined,\r\n          stanford_colors: undefined,\r\n          stanford_padding: {\r\n              top: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              left: 0\r\n          },\r\n          // region - region to change style\r\n          regions: [],\r\n          // tooltip - show when mouseover on each data\r\n          tooltip_show: true,\r\n          tooltip_grouped: true,\r\n          tooltip_order: undefined,\r\n          tooltip_format_title: undefined,\r\n          tooltip_format_name: undefined,\r\n          tooltip_format_value: undefined,\r\n          tooltip_horizontal: undefined,\r\n          tooltip_position: undefined,\r\n          tooltip_contents: function (d, defaultTitleFormat, defaultValueFormat, color) {\r\n              return this.getTooltipContent\r\n                  ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color)\r\n                  : '';\r\n          },\r\n          tooltip_init_show: false,\r\n          tooltip_init_x: 0,\r\n          tooltip_init_position: { top: '0px', left: '50px' },\r\n          tooltip_onshow: function () { },\r\n          tooltip_onhide: function () { },\r\n          // title\r\n          title_text: undefined,\r\n          title_padding: {\r\n              top: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              left: 0\r\n          },\r\n          title_position: 'top-center'\r\n      };\r\n      Object.keys(this.additionalConfig).forEach(function (key) {\r\n          config[key] = this.additionalConfig[key];\r\n      }, this);\r\n      return config;\r\n  };\r\n  ChartInternal.prototype.additionalConfig = {};\r\n  ChartInternal.prototype.loadConfig = function (config) {\r\n      var this_config = this.config, target, keys, read;\r\n      function find() {\r\n          var key = keys.shift();\r\n          //        console.log(\"key =>\", key, \", target =>\", target);\r\n          if (key && target && typeof target === 'object' && key in target) {\r\n              target = target[key];\r\n              return find();\r\n          }\r\n          else if (!key) {\r\n              return target;\r\n          }\r\n          else {\r\n              return undefined;\r\n          }\r\n      }\r\n      Object.keys(this_config).forEach(function (key) {\r\n          target = config;\r\n          keys = key.split('_');\r\n          read = find();\r\n          //        console.log(\"CONFIG : \", key, read);\r\n          if (isDefined(read)) {\r\n              this_config[key] = read;\r\n          }\r\n      });\r\n  };\n\n  ChartInternal.prototype.convertUrlToData = function (url, mimeType, headers, keys, done) {\r\n      var $$ = this, type = mimeType ? mimeType : 'csv', f, converter;\r\n      if (type === 'json') {\r\n          f = $$.d3.json;\r\n          converter = $$.convertJsonToData;\r\n      }\r\n      else if (type === 'tsv') {\r\n          f = $$.d3.tsv;\r\n          converter = $$.convertXsvToData;\r\n      }\r\n      else {\r\n          f = $$.d3.csv;\r\n          converter = $$.convertXsvToData;\r\n      }\r\n      f(url, headers)\r\n          .then(function (data) {\r\n          done.call($$, converter.call($$, data, keys));\r\n      })\r\n          .catch(function (error) {\r\n          throw error;\r\n      });\r\n  };\r\n  ChartInternal.prototype.convertXsvToData = function (xsv) {\r\n      var keys = xsv.columns, rows = xsv;\r\n      if (rows.length === 0) {\r\n          return {\r\n              keys: keys,\r\n              rows: [keys.reduce(function (row, key) {\r\n                      var _a;\r\n                      return Object.assign(row, (_a = {}, _a[key] = null, _a));\r\n                  }, {})]\r\n          };\r\n      }\r\n      else {\r\n          // [].concat() is to convert result into a plain array otherwise\r\n          // test is not happy because rows have properties.\r\n          return { keys: keys, rows: [].concat(xsv) };\r\n      }\r\n  };\r\n  ChartInternal.prototype.convertJsonToData = function (json, keys) {\r\n      var $$ = this, new_rows = [], targetKeys, data;\r\n      if (keys) {\r\n          // when keys specified, json would be an array that includes objects\r\n          if (keys.x) {\r\n              targetKeys = keys.value.concat(keys.x);\r\n              $$.config.data_x = keys.x;\r\n          }\r\n          else {\r\n              targetKeys = keys.value;\r\n          }\r\n          new_rows.push(targetKeys);\r\n          json.forEach(function (o) {\r\n              var new_row = [];\r\n              targetKeys.forEach(function (key) {\r\n                  // convert undefined to null because undefined data will be removed in convertDataToTargets()\r\n                  var v = $$.findValueInJson(o, key);\r\n                  if (isUndefined(v)) {\r\n                      v = null;\r\n                  }\r\n                  new_row.push(v);\r\n              });\r\n              new_rows.push(new_row);\r\n          });\r\n          data = $$.convertRowsToData(new_rows);\r\n      }\r\n      else {\r\n          Object.keys(json).forEach(function (key) {\r\n              new_rows.push([key].concat(json[key]));\r\n          });\r\n          data = $$.convertColumnsToData(new_rows);\r\n      }\r\n      return data;\r\n  };\r\n  /**\r\n   * Finds value from the given nested object by the given path.\r\n   * If it's not found, then this returns undefined.\r\n   * @param {Object} object the object\r\n   * @param {string} path the path\r\n   */\r\n  ChartInternal.prototype.findValueInJson = function (object, path) {\r\n      if (path in object) {\r\n          // If object has a key that contains . or [], return the key's value\r\n          // instead of searching for an inner object.\r\n          // See https://github.com/c3js/c3/issues/1691 for details.\r\n          return object[path];\r\n      }\r\n      path = path.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties (replace [] with .)\r\n      path = path.replace(/^\\./, ''); // strip a leading dot\r\n      var pathArray = path.split('.');\r\n      for (var i = 0; i < pathArray.length; ++i) {\r\n          var k = pathArray[i];\r\n          if (k in object) {\r\n              object = object[k];\r\n          }\r\n          else {\r\n              return;\r\n          }\r\n      }\r\n      return object;\r\n  };\r\n  /**\r\n   * Converts the rows to normalized data.\r\n   * @param {any[][]} rows The row data\r\n   * @return {Object}\r\n   */\r\n  ChartInternal.prototype.convertRowsToData = function (rows) {\r\n      var newRows = [];\r\n      var keys = rows[0];\r\n      for (var i = 1; i < rows.length; i++) {\r\n          var newRow = {};\r\n          for (var j = 0; j < rows[i].length; j++) {\r\n              if (isUndefined(rows[i][j])) {\r\n                  throw new Error('Source data is missing a component at (' + i + ',' + j + ')!');\r\n              }\r\n              newRow[keys[j]] = rows[i][j];\r\n          }\r\n          newRows.push(newRow);\r\n      }\r\n      return { keys: keys, rows: newRows };\r\n  };\r\n  /**\r\n   * Converts the columns to normalized data.\r\n   * @param {any[][]} columns The column data\r\n   * @return {Object}\r\n   */\r\n  ChartInternal.prototype.convertColumnsToData = function (columns) {\r\n      var newRows = [];\r\n      var keys = [];\r\n      for (var i = 0; i < columns.length; i++) {\r\n          var key = columns[i][0];\r\n          for (var j = 1; j < columns[i].length; j++) {\r\n              if (isUndefined(newRows[j - 1])) {\r\n                  newRows[j - 1] = {};\r\n              }\r\n              if (isUndefined(columns[i][j])) {\r\n                  throw new Error('Source data is missing a component at (' + i + ',' + j + ')!');\r\n              }\r\n              newRows[j - 1][key] = columns[i][j];\r\n          }\r\n          keys.push(key);\r\n      }\r\n      return { keys: keys, rows: newRows };\r\n  };\r\n  /**\r\n   * Converts the data format into the target format.\r\n   * @param {!Object} data\r\n   * @param {!Array} data.keys Ordered list of target IDs.\r\n   * @param {!Array} data.rows Rows of data to convert.\r\n   * @param {boolean} appendXs True to append to $$.data.xs, False to replace.\r\n   * @return {!Array}\r\n   */\r\n  ChartInternal.prototype.convertDataToTargets = function (data, appendXs) {\r\n      var $$ = this, config = $$.config, targets, ids, xs, keys, epochs;\r\n      // handles format where keys are not orderly provided\r\n      if (isArray(data)) {\r\n          keys = Object.keys(data[0]);\r\n      }\r\n      else {\r\n          keys = data.keys;\r\n          data = data.rows;\r\n      }\r\n      xs = keys.filter($$.isX, $$);\r\n      if (!$$.isStanfordGraphType()) {\r\n          ids = keys.filter($$.isNotX, $$);\r\n      }\r\n      else {\r\n          epochs = keys.filter($$.isEpochs, $$);\r\n          ids = keys.filter($$.isNotXAndNotEpochs, $$);\r\n          if (xs.length !== 1 || epochs.length !== 1 || ids.length !== 1) {\r\n              throw new Error(\"You must define the 'x' key name and the 'epochs' for Stanford Diagrams\");\r\n          }\r\n      }\r\n      // save x for update data by load when custom x and c3.x API\r\n      ids.forEach(function (id) {\r\n          var xKey = $$.getXKey(id);\r\n          if ($$.isCustomX() || $$.isTimeSeries()) {\r\n              // if included in input data\r\n              if (xs.indexOf(xKey) >= 0) {\r\n                  $$.data.xs[id] = (appendXs && $$.data.xs[id]\r\n                      ? $$.data.xs[id]\r\n                      : []).concat(data\r\n                      .map(function (d) {\r\n                      return d[xKey];\r\n                  })\r\n                      .filter(isValue)\r\n                      .map(function (rawX, i) {\r\n                      return $$.generateTargetX(rawX, id, i);\r\n                  }));\r\n              }\r\n              // if not included in input data, find from preloaded data of other id's x\r\n              else if (config.data_x) {\r\n                  $$.data.xs[id] = $$.getOtherTargetXs();\r\n              }\r\n              // if not included in input data, find from preloaded data\r\n              else if (notEmpty(config.data_xs)) {\r\n                  $$.data.xs[id] = $$.getXValuesOfXKey(xKey, $$.data.targets);\r\n              }\r\n              // MEMO: if no x included, use same x of current will be used\r\n          }\r\n          else {\r\n              $$.data.xs[id] = data.map(function (d, i) {\r\n                  return i;\r\n              });\r\n          }\r\n      });\r\n      // check x is defined\r\n      ids.forEach(function (id) {\r\n          if (!$$.data.xs[id]) {\r\n              throw new Error('x is not defined for id = \"' + id + '\".');\r\n          }\r\n      });\r\n      // convert to target\r\n      targets = ids.map(function (id, index) {\r\n          var convertedId = config.data_idConverter(id);\r\n          return {\r\n              id: convertedId,\r\n              id_org: id,\r\n              values: data\r\n                  .map(function (d, i) {\r\n                  var xKey = $$.getXKey(id), rawX = d[xKey], value = d[id] !== null && !isNaN(d[id]) ? +d[id] : null, x, returnData;\r\n                  // use x as categories if custom x and categorized\r\n                  if ($$.isCustomX() && $$.isCategorized() && !isUndefined(rawX)) {\r\n                      if (index === 0 && i === 0) {\r\n                          config.axis_x_categories = [];\r\n                      }\r\n                      x = config.axis_x_categories.indexOf(rawX);\r\n                      if (x === -1) {\r\n                          x = config.axis_x_categories.length;\r\n                          config.axis_x_categories.push(rawX);\r\n                      }\r\n                  }\r\n                  else {\r\n                      x = $$.generateTargetX(rawX, id, i);\r\n                  }\r\n                  // mark as x = undefined if value is undefined and filter to remove after mapped\r\n                  if (isUndefined(d[id]) || $$.data.xs[id].length <= i) {\r\n                      x = undefined;\r\n                  }\r\n                  returnData = { x: x, value: value, id: convertedId };\r\n                  if ($$.isStanfordGraphType()) {\r\n                      returnData.epochs = d[epochs];\r\n                  }\r\n                  return returnData;\r\n              })\r\n                  .filter(function (v) {\r\n                  return isDefined(v.x);\r\n              })\r\n          };\r\n      });\r\n      // finish targets\r\n      targets.forEach(function (t) {\r\n          var i;\r\n          // sort values by its x\r\n          if (config.data_xSort) {\r\n              t.values = t.values.sort(function (v1, v2) {\r\n                  var x1 = v1.x || v1.x === 0 ? v1.x : Infinity, x2 = v2.x || v2.x === 0 ? v2.x : Infinity;\r\n                  return x1 - x2;\r\n              });\r\n          }\r\n          // indexing each value\r\n          i = 0;\r\n          t.values.forEach(function (v) {\r\n              v.index = i++;\r\n          });\r\n          // this needs to be sorted because its index and value.index is identical\r\n          $$.data.xs[t.id].sort(function (v1, v2) {\r\n              return v1 - v2;\r\n          });\r\n      });\r\n      // cache information about values\r\n      $$.hasNegativeValue = $$.hasNegativeValueInTargets(targets);\r\n      $$.hasPositiveValue = $$.hasPositiveValueInTargets(targets);\r\n      // set target types\r\n      if (config.data_type) {\r\n          $$.setTargetType($$.mapToIds(targets).filter(function (id) {\r\n              return !(id in config.data_types);\r\n          }), config.data_type);\r\n      }\r\n      // cache as original id keyed\r\n      targets.forEach(function (d) {\r\n          $$.addCache(d.id_org, d);\r\n      });\r\n      return targets;\r\n  };\n\n  ChartInternal.prototype.isEpochs = function (key) {\r\n      var $$ = this, config = $$.config;\r\n      return config.data_epochs && key === config.data_epochs;\r\n  };\r\n  ChartInternal.prototype.isX = function (key) {\r\n      var $$ = this, config = $$.config;\r\n      return ((config.data_x && key === config.data_x) ||\r\n          (notEmpty(config.data_xs) && hasValue(config.data_xs, key)));\r\n  };\r\n  ChartInternal.prototype.isNotX = function (key) {\r\n      return !this.isX(key);\r\n  };\r\n  ChartInternal.prototype.isNotXAndNotEpochs = function (key) {\r\n      return !this.isX(key) && !this.isEpochs(key);\r\n  };\r\n  /**\r\n   * Returns whether the normalized stack option is enabled or not.\r\n   *\r\n   * To be enabled it must also have data.groups defined.\r\n   *\r\n   * @return {boolean}\r\n   */\r\n  ChartInternal.prototype.isStackNormalized = function () {\r\n      return this.config.data_stack_normalize && this.config.data_groups.length > 0;\r\n  };\r\n  /**\r\n   * Returns whether the axis is normalized or not.\r\n   *\r\n   * An axis is normalized as long as one of its associated target\r\n   * is normalized.\r\n   *\r\n   * @param axisId Axis ID (y or y2)\r\n   * @return {Boolean}\r\n   */\r\n  ChartInternal.prototype.isAxisNormalized = function (axisId) {\r\n      var $$ = this;\r\n      if (!$$.isStackNormalized()) {\r\n          // shortcut\r\n          return false;\r\n      }\r\n      return $$.data.targets\r\n          .filter(function (target) { return $$.axis.getId(target.id) === axisId; })\r\n          .some(function (target) { return $$.isTargetNormalized(target.id); });\r\n  };\r\n  /**\r\n   * Returns whether the values for this target ID is normalized or not.\r\n   *\r\n   * To be normalized the option needs to be enabled and target needs\r\n   * to be defined in `data.groups`.\r\n   *\r\n   * @param targetId ID of the target\r\n   * @return {Boolean} True if the target is normalized, false otherwise.\r\n   */\r\n  ChartInternal.prototype.isTargetNormalized = function (targetId) {\r\n      var $$ = this;\r\n      return ($$.isStackNormalized() &&\r\n          $$.config.data_groups.some(function (group) { return group.includes(targetId); }));\r\n  };\r\n  ChartInternal.prototype.getXKey = function (id) {\r\n      var $$ = this, config = $$.config;\r\n      return config.data_x\r\n          ? config.data_x\r\n          : notEmpty(config.data_xs)\r\n              ? config.data_xs[id]\r\n              : null;\r\n  };\r\n  /**\r\n   * Get sum of visible data per index for given axis.\r\n   *\r\n   * Expect axisId to be either 'y' or 'y2'.\r\n   *\r\n   * @private\r\n   * @param axisId Compute sum for data associated to given axis.\r\n   * @return {Array}\r\n   */\r\n  ChartInternal.prototype.getTotalPerIndex = function (axisId) {\r\n      var $$ = this;\r\n      if (!$$.isStackNormalized()) {\r\n          return null;\r\n      }\r\n      var cached = $$.getFromCache('getTotalPerIndex');\r\n      if (cached !== undefined) {\r\n          return cached[axisId];\r\n      }\r\n      var sum = { y: [], y2: [] };\r\n      $$.data.targets\r\n          // keep only target that are normalized\r\n          .filter(function (target) { return $$.isTargetNormalized(target.id); })\r\n          // keep only target that are visible\r\n          .filter(function (target) { return $$.isTargetToShow(target.id); })\r\n          // compute sum per axis\r\n          .forEach(function (target) {\r\n          var sumByAxis = sum[$$.axis.getId(target.id)];\r\n          target.values.forEach(function (v, i) {\r\n              if (!sumByAxis[i]) {\r\n                  sumByAxis[i] = 0;\r\n              }\r\n              sumByAxis[i] += isNumber(v.value) ? v.value : 0;\r\n          });\r\n      });\r\n      $$.addToCache('getTotalPerIndex', sum);\r\n      return sum[axisId];\r\n  };\r\n  /**\r\n   * Get sum of visible data.\r\n   *\r\n   * Should be used for normalised data only since all values\r\n   * are expected to be positive.\r\n   *\r\n   * @private\r\n   * @return {Number}\r\n   */\r\n  ChartInternal.prototype.getTotalDataSum = function () {\r\n      var $$ = this;\r\n      var cached = $$.getFromCache('getTotalDataSum');\r\n      if (cached !== undefined) {\r\n          return cached;\r\n      }\r\n      var totalDataSum = flattenArray($$.data.targets\r\n          .filter(function (target) { return $$.isTargetToShow(target.id); })\r\n          .map(function (target) { return target.values; }))\r\n          .map(function (d) { return d.value; })\r\n          .reduce(function (p, c) { return p + c; }, 0);\r\n      $$.addToCache('getTotalDataSum', totalDataSum);\r\n      return totalDataSum;\r\n  };\r\n  ChartInternal.prototype.getXValuesOfXKey = function (key, targets) {\r\n      var $$ = this, xValues, ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];\r\n      ids.forEach(function (id) {\r\n          if ($$.getXKey(id) === key) {\r\n              xValues = $$.data.xs[id];\r\n          }\r\n      });\r\n      return xValues;\r\n  };\r\n  ChartInternal.prototype.getXValue = function (id, i) {\r\n      var $$ = this;\r\n      return id in $$.data.xs && $$.data.xs[id] && isValue($$.data.xs[id][i])\r\n          ? $$.data.xs[id][i]\r\n          : i;\r\n  };\r\n  ChartInternal.prototype.getOtherTargetXs = function () {\r\n      var $$ = this, idsForX = Object.keys($$.data.xs);\r\n      return idsForX.length ? $$.data.xs[idsForX[0]] : null;\r\n  };\r\n  ChartInternal.prototype.getOtherTargetX = function (index) {\r\n      var xs = this.getOtherTargetXs();\r\n      return xs && index < xs.length ? xs[index] : null;\r\n  };\r\n  ChartInternal.prototype.addXs = function (xs) {\r\n      var $$ = this;\r\n      Object.keys(xs).forEach(function (id) {\r\n          $$.config.data_xs[id] = xs[id];\r\n      });\r\n  };\r\n  ChartInternal.prototype.addName = function (data) {\r\n      var $$ = this, name;\r\n      if (data) {\r\n          name = $$.config.data_names[data.id];\r\n          data.name = name !== undefined ? name : data.id;\r\n      }\r\n      return data;\r\n  };\r\n  ChartInternal.prototype.getValueOnIndex = function (values, index) {\r\n      var valueOnIndex = values.filter(function (v) {\r\n          return v.index === index;\r\n      });\r\n      return valueOnIndex.length ? valueOnIndex[0] : null;\r\n  };\r\n  ChartInternal.prototype.updateTargetX = function (targets, x) {\r\n      var $$ = this;\r\n      targets.forEach(function (t) {\r\n          t.values.forEach(function (v, i) {\r\n              v.x = $$.generateTargetX(x[i], t.id, i);\r\n          });\r\n          $$.data.xs[t.id] = x;\r\n      });\r\n  };\r\n  ChartInternal.prototype.updateTargetXs = function (targets, xs) {\r\n      var $$ = this;\r\n      targets.forEach(function (t) {\r\n          if (xs[t.id]) {\r\n              $$.updateTargetX([t], xs[t.id]);\r\n          }\r\n      });\r\n  };\r\n  ChartInternal.prototype.generateTargetX = function (rawX, id, index) {\r\n      var $$ = this, x;\r\n      if ($$.isTimeSeries()) {\r\n          x = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id, index));\r\n      }\r\n      else if ($$.isCustomX() && !$$.isCategorized()) {\r\n          x = isValue(rawX) ? +rawX : $$.getXValue(id, index);\r\n      }\r\n      else {\r\n          x = index;\r\n      }\r\n      return x;\r\n  };\r\n  ChartInternal.prototype.cloneTarget = function (target) {\r\n      return {\r\n          id: target.id,\r\n          id_org: target.id_org,\r\n          values: target.values.map(function (d) {\r\n              return {\r\n                  x: d.x,\r\n                  value: d.value,\r\n                  id: d.id\r\n              };\r\n          })\r\n      };\r\n  };\r\n  ChartInternal.prototype.getMaxDataCount = function () {\r\n      var $$ = this;\r\n      return $$.d3.max($$.data.targets, function (t) {\r\n          return t.values.length;\r\n      });\r\n  };\r\n  ChartInternal.prototype.mapToIds = function (targets) {\r\n      return targets.map(function (d) {\r\n          return d.id;\r\n      });\r\n  };\r\n  ChartInternal.prototype.mapToTargetIds = function (ids) {\r\n      var $$ = this;\r\n      return ids ? [].concat(ids) : $$.mapToIds($$.data.targets);\r\n  };\r\n  ChartInternal.prototype.hasTarget = function (targets, id) {\r\n      var ids = this.mapToIds(targets), i;\r\n      for (i = 0; i < ids.length; i++) {\r\n          if (ids[i] === id) {\r\n              return true;\r\n          }\r\n      }\r\n      return false;\r\n  };\r\n  ChartInternal.prototype.isTargetToShow = function (targetId) {\r\n      return this.hiddenTargetIds.indexOf(targetId) < 0;\r\n  };\r\n  ChartInternal.prototype.isLegendToShow = function (targetId) {\r\n      return this.hiddenLegendIds.indexOf(targetId) < 0;\r\n  };\r\n  /**\r\n   * Returns only visible targets.\r\n   *\r\n   * This is the same as calling {@link filterTargetsToShow} on $$.data.targets.\r\n   *\r\n   * @return {Array}\r\n   */\r\n  ChartInternal.prototype.getTargetsToShow = function () {\r\n      var $$ = this;\r\n      return $$.filterTargetsToShow($$.data.targets);\r\n  };\r\n  ChartInternal.prototype.filterTargetsToShow = function (targets) {\r\n      var $$ = this;\r\n      return targets.filter(function (t) {\r\n          return $$.isTargetToShow(t.id);\r\n      });\r\n  };\r\n  /**\r\n   * @return {Array} Returns all the targets attached to the chart, visible or not\r\n   */\r\n  ChartInternal.prototype.getTargets = function () {\r\n      var $$ = this;\r\n      return $$.data.targets;\r\n  };\r\n  ChartInternal.prototype.mapTargetsToUniqueXs = function (targets) {\r\n      var $$ = this;\r\n      var xs = $$.d3\r\n          .set($$.d3.merge(targets.map(function (t) {\r\n          return t.values.map(function (v) {\r\n              return +v.x;\r\n          });\r\n      })))\r\n          .values();\r\n      xs = $$.isTimeSeries()\r\n          ? xs.map(function (x) {\r\n              return new Date(+x);\r\n          })\r\n          : xs.map(function (x) {\r\n              return +x;\r\n          });\r\n      return xs.sort(function (a, b) {\r\n          return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\r\n      });\r\n  };\r\n  ChartInternal.prototype.addHiddenTargetIds = function (targetIds) {\r\n      targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);\r\n      for (var i = 0; i < targetIds.length; i++) {\r\n          if (this.hiddenTargetIds.indexOf(targetIds[i]) < 0) {\r\n              this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds[i]);\r\n          }\r\n      }\r\n      this.resetCache();\r\n  };\r\n  ChartInternal.prototype.removeHiddenTargetIds = function (targetIds) {\r\n      this.hiddenTargetIds = this.hiddenTargetIds.filter(function (id) {\r\n          return targetIds.indexOf(id) < 0;\r\n      });\r\n      this.resetCache();\r\n  };\r\n  ChartInternal.prototype.addHiddenLegendIds = function (targetIds) {\r\n      targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);\r\n      for (var i = 0; i < targetIds.length; i++) {\r\n          if (this.hiddenLegendIds.indexOf(targetIds[i]) < 0) {\r\n              this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds[i]);\r\n          }\r\n      }\r\n  };\r\n  ChartInternal.prototype.removeHiddenLegendIds = function (targetIds) {\r\n      this.hiddenLegendIds = this.hiddenLegendIds.filter(function (id) {\r\n          return targetIds.indexOf(id) < 0;\r\n      });\r\n  };\r\n  ChartInternal.prototype.getValuesAsIdKeyed = function (targets) {\r\n      var ys = {};\r\n      targets.forEach(function (t) {\r\n          ys[t.id] = [];\r\n          t.values.forEach(function (v) {\r\n              ys[t.id].push(v.value);\r\n          });\r\n      });\r\n      return ys;\r\n  };\r\n  ChartInternal.prototype.checkValueInTargets = function (targets, checker) {\r\n      var ids = Object.keys(targets), i, j, values;\r\n      for (i = 0; i < ids.length; i++) {\r\n          values = targets[ids[i]].values;\r\n          for (j = 0; j < values.length; j++) {\r\n              if (checker(values[j].value)) {\r\n                  return true;\r\n              }\r\n          }\r\n      }\r\n      return false;\r\n  };\r\n  ChartInternal.prototype.hasNegativeValueInTargets = function (targets) {\r\n      return this.checkValueInTargets(targets, function (v) {\r\n          return v < 0;\r\n      });\r\n  };\r\n  ChartInternal.prototype.hasPositiveValueInTargets = function (targets) {\r\n      return this.checkValueInTargets(targets, function (v) {\r\n          return v > 0;\r\n      });\r\n  };\r\n  ChartInternal.prototype.isOrderDesc = function () {\r\n      var config = this.config;\r\n      return (typeof config.data_order === 'string' &&\r\n          config.data_order.toLowerCase() === 'desc');\r\n  };\r\n  ChartInternal.prototype.isOrderAsc = function () {\r\n      var config = this.config;\r\n      return (typeof config.data_order === 'string' &&\r\n          config.data_order.toLowerCase() === 'asc');\r\n  };\r\n  ChartInternal.prototype.getOrderFunction = function () {\r\n      var $$ = this, config = $$.config, orderAsc = $$.isOrderAsc(), orderDesc = $$.isOrderDesc();\r\n      if (orderAsc || orderDesc) {\r\n          var reducer = function (p, c) {\r\n              return p + Math.abs(c.value);\r\n          };\r\n          return function (t1, t2) {\r\n              var t1Sum = t1.values.reduce(reducer, 0), t2Sum = t2.values.reduce(reducer, 0);\r\n              return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;\r\n          };\r\n      }\r\n      else if (isFunction(config.data_order)) {\r\n          return config.data_order;\r\n      }\r\n      else if (isArray(config.data_order)) {\r\n          var order = config.data_order;\r\n          return function (t1, t2) {\r\n              return order.indexOf(t1.id) - order.indexOf(t2.id);\r\n          };\r\n      }\r\n  };\r\n  ChartInternal.prototype.orderTargets = function (targets) {\r\n      var fct = this.getOrderFunction();\r\n      if (fct) {\r\n          targets.sort(fct);\r\n      }\r\n      return targets;\r\n  };\r\n  /**\r\n   * Returns all the values from the given targets at the given index.\r\n   *\r\n   * @param {Array} targets\r\n   * @param {Number} index\r\n   * @return {Array}\r\n   */\r\n  ChartInternal.prototype.filterByIndex = function (targets, index) {\r\n      return this.d3.merge(targets.map(function (t) { return t.values.filter(function (v) { return v.index === index; }); }));\r\n  };\r\n  ChartInternal.prototype.filterByX = function (targets, x) {\r\n      return this.d3\r\n          .merge(targets.map(function (t) {\r\n          return t.values;\r\n      }))\r\n          .filter(function (v) {\r\n          return v.x - x === 0;\r\n      });\r\n  };\r\n  ChartInternal.prototype.filterRemoveNull = function (data) {\r\n      return data.filter(function (d) {\r\n          return isValue(d.value);\r\n      });\r\n  };\r\n  ChartInternal.prototype.filterByXDomain = function (targets, xDomain) {\r\n      return targets.map(function (t) {\r\n          return {\r\n              id: t.id,\r\n              id_org: t.id_org,\r\n              values: t.values.filter(function (v) {\r\n                  return xDomain[0] <= v.x && v.x <= xDomain[1];\r\n              })\r\n          };\r\n      });\r\n  };\r\n  ChartInternal.prototype.hasDataLabel = function () {\r\n      var config = this.config;\r\n      if (typeof config.data_labels === 'boolean' && config.data_labels) {\r\n          return true;\r\n      }\r\n      else if (typeof config.data_labels === 'object' &&\r\n          notEmpty(config.data_labels)) {\r\n          return true;\r\n      }\r\n      return false;\r\n  };\r\n  ChartInternal.prototype.getDataLabelLength = function (min, max, key) {\r\n      var $$ = this, lengths = [0, 0], paddingCoef = 1.3;\r\n      $$.selectChart\r\n          .select('svg')\r\n          .selectAll('.dummy')\r\n          .data([min, max])\r\n          .enter()\r\n          .append('text')\r\n          .text(function (d) {\r\n          return $$.dataLabelFormat(d.id)(d);\r\n      })\r\n          .each(function (d, i) {\r\n          lengths[i] = getBBox(this)[key] * paddingCoef;\r\n      })\r\n          .remove();\r\n      return lengths;\r\n  };\r\n  /**\r\n   * Returns true if the given data point is not arc type, otherwise false.\r\n   * @param {Object} d The data point\r\n   * @return {boolean}\r\n   */\r\n  ChartInternal.prototype.isNoneArc = function (d) {\r\n      return this.hasTarget(this.data.targets, d.id);\r\n  };\r\n  /**\r\n   * Returns true if the given data point is arc type, otherwise false.\r\n   * @param {Object} d The data point\r\n   * @return {boolean}\r\n   */\r\n  ChartInternal.prototype.isArc = function (d) {\r\n      return 'data' in d && this.hasTarget(this.data.targets, d.data.id);\r\n  };\r\n  /**\r\n   * Find the closest point from the given pos among the given targets or\r\n   * undefined if none satisfies conditions.\r\n   *\r\n   * @param {Array} targets\r\n   * @param {Array} pos An [x,y] coordinate\r\n   * @return {Object|undefined}\r\n   */\r\n  ChartInternal.prototype.findClosestFromTargets = function (targets, pos) {\r\n      var $$ = this;\r\n      // for each target, find the closest point\r\n      var candidates = targets\r\n          .map(function (t) {\r\n          return $$.findClosest(t.values, pos, $$.config.tooltip_horizontal\r\n              ? $$.horizontalDistance.bind($$)\r\n              : $$.dist.bind($$), $$.config.point_sensitivity);\r\n      })\r\n          .filter(function (v) { return v; });\r\n      // returns the closest of candidates\r\n      if (candidates.length === 0) {\r\n          return undefined;\r\n      }\r\n      else if (candidates.length === 1) {\r\n          return candidates[0];\r\n      }\r\n      else {\r\n          return $$.findClosest(candidates, pos, $$.dist.bind($$));\r\n      }\r\n  };\r\n  /**\r\n   * Find the closest point from the x value or undefined if none satisfies conditions.\r\n   *\r\n   * @param {Array} targets\r\n   * @param {Array} x A value on X axis\r\n   * @return {Object|undefined}\r\n   */\r\n  ChartInternal.prototype.findClosestFromTargetsByX = function (targets, x) {\r\n      var closest;\r\n      var diff;\r\n      targets.forEach(function (t) {\r\n          t.values.forEach(function (d) {\r\n              var newDiff = Math.abs(x - d.x);\r\n              if (diff === undefined || newDiff < diff) {\r\n                  closest = d;\r\n                  diff = newDiff;\r\n              }\r\n          });\r\n      });\r\n      return closest;\r\n  };\r\n  /**\r\n   * Using given compute distance method, returns the closest data point from the\r\n   * given position.\r\n   *\r\n   * Giving optionally a minimum distance to satisfy.\r\n   *\r\n   * @param {Array} dataPoints List of DataPoints\r\n   * @param {Array} pos An [x,y] coordinate\r\n   * @param {Function} computeDist Function to compute distance between 2 points\r\n   * @param {Number} minDist Minimal distance to satisfy\r\n   * @return {Object|undefined} Closest data point\r\n   */\r\n  ChartInternal.prototype.findClosest = function (dataPoints, pos, computeDist, minDist) {\r\n      if (minDist === void 0) { minDist = Infinity; }\r\n      var $$ = this;\r\n      var closest;\r\n      // find closest bar\r\n      dataPoints\r\n          .filter(function (v) { return v && $$.isBarType(v.id); })\r\n          .forEach(function (v) {\r\n          if (!closest) {\r\n              var shape = $$.main\r\n                  .select('.' +\r\n                  CLASS.bars +\r\n                  $$.getTargetSelectorSuffix(v.id) +\r\n                  ' .' +\r\n                  CLASS.bar +\r\n                  '-' +\r\n                  v.index)\r\n                  .node();\r\n              if ($$.isWithinBar(pos, shape)) {\r\n                  closest = v;\r\n              }\r\n          }\r\n      });\r\n      // find closest point from non-bar\r\n      dataPoints\r\n          .filter(function (v) { return v && !$$.isBarType(v.id); })\r\n          .forEach(function (v) {\r\n          var d = computeDist(v, pos);\r\n          if (d < minDist) {\r\n              minDist = d;\r\n              closest = v;\r\n          }\r\n      });\r\n      return closest;\r\n  };\r\n  ChartInternal.prototype.dist = function (data, pos) {\r\n      var $$ = this, config = $$.config, xIndex = config.axis_rotated ? 1 : 0, yIndex = config.axis_rotated ? 0 : 1, y = $$.circleY(data, data.index), x = $$.x(data.x);\r\n      return Math.sqrt(Math.pow(x - pos[xIndex], 2) + Math.pow(y - pos[yIndex], 2));\r\n  };\r\n  ChartInternal.prototype.horizontalDistance = function (data, pos) {\r\n      var $$ = this, config = $$.config, xIndex = config.axis_rotated ? 1 : 0, x = $$.x(data.x);\r\n      return Math.abs(x - pos[xIndex]);\r\n  };\r\n  ChartInternal.prototype.convertValuesToStep = function (values) {\r\n      var converted = [].concat(values), i;\r\n      if (!this.isCategorized()) {\r\n          return values;\r\n      }\r\n      for (i = values.length + 1; 0 < i; i--) {\r\n          converted[i] = converted[i - 1];\r\n      }\r\n      converted[0] = {\r\n          x: converted[0].x - 1,\r\n          value: converted[0].value,\r\n          id: converted[0].id\r\n      };\r\n      converted[values.length + 1] = {\r\n          x: converted[values.length].x + 1,\r\n          value: converted[values.length].value,\r\n          id: converted[values.length].id\r\n      };\r\n      return converted;\r\n  };\r\n  /**\r\n   * Get ratio value\r\n   *\r\n   * @param {String} type Ratio for given type\r\n   * @param {Object} d Data value object\r\n   * @param {Boolean} asPercent Convert the return as percent or not\r\n   * @return {Number} Ratio value\r\n   * @private\r\n   */\r\n  ChartInternal.prototype.getRatio = function (type, d, asPercent) {\r\n      if (asPercent === void 0) { asPercent = false; }\r\n      var $$ = this;\r\n      var api = $$.api;\r\n      var ratio = 0;\r\n      if (d && api.data.shown.call(api).length) {\r\n          ratio = d.ratio || d.value;\r\n          if (type === 'arc') {\r\n              if ($$.hasType('gauge')) {\r\n                  ratio =\r\n                      (d.endAngle - d.startAngle) /\r\n                          (Math.PI * ($$.config.gauge_fullCircle ? 2 : 1));\r\n              }\r\n              else {\r\n                  var total = $$.getTotalDataSum();\r\n                  ratio = d.value / total;\r\n              }\r\n          }\r\n          else if (type === 'index') {\r\n              var total = $$.getTotalPerIndex($$.axis.getId(d.id));\r\n              d.ratio =\r\n                  isNumber(d.value) && total && total[d.index] > 0\r\n                      ? d.value / total[d.index]\r\n                      : 0;\r\n              ratio = d.ratio;\r\n          }\r\n      }\r\n      return asPercent && ratio ? ratio * 100 : ratio;\r\n  };\r\n  ChartInternal.prototype.updateDataAttributes = function (name, attrs) {\r\n      var $$ = this, config = $$.config, current = config['data_' + name];\r\n      if (typeof attrs === 'undefined') {\r\n          return current;\r\n      }\r\n      Object.keys(attrs).forEach(function (id) {\r\n          current[id] = attrs[id];\r\n      });\r\n      $$.redraw({\r\n          withLegend: true\r\n      });\r\n      return current;\r\n  };\n\n  ChartInternal.prototype.load = function (targets, args) {\r\n      var $$ = this;\r\n      if (targets) {\r\n          // filter loading targets if needed\r\n          if (args.filter) {\r\n              targets = targets.filter(args.filter);\r\n          }\r\n          // set type if args.types || args.type specified\r\n          if (args.type || args.types) {\r\n              targets.forEach(function (t) {\r\n                  var type = args.types && args.types[t.id] ? args.types[t.id] : args.type;\r\n                  $$.setTargetType(t.id, type);\r\n              });\r\n          }\r\n          // Update/Add data\r\n          $$.data.targets.forEach(function (d) {\r\n              for (var i = 0; i < targets.length; i++) {\r\n                  if (d.id === targets[i].id) {\r\n                      d.values = targets[i].values;\r\n                      targets.splice(i, 1);\r\n                      break;\r\n                  }\r\n              }\r\n          });\r\n          $$.data.targets = $$.data.targets.concat(targets); // add remained\r\n      }\r\n      // Set targets\r\n      $$.updateTargets($$.data.targets);\r\n      // Redraw with new targets\r\n      $$.redraw({\r\n          withUpdateOrgXDomain: true,\r\n          withUpdateXDomain: true,\r\n          withLegend: true\r\n      });\r\n      if (args.done) {\r\n          args.done();\r\n      }\r\n  };\r\n  ChartInternal.prototype.loadFromArgs = function (args) {\r\n      var $$ = this;\r\n      $$.resetCache();\r\n      if (args.data) {\r\n          $$.load($$.convertDataToTargets(args.data), args);\r\n      }\r\n      else if (args.url) {\r\n          $$.convertUrlToData(args.url, args.mimeType, args.headers, args.keys, function (data) {\r\n              $$.load($$.convertDataToTargets(data), args);\r\n          });\r\n      }\r\n      else if (args.json) {\r\n          $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);\r\n      }\r\n      else if (args.rows) {\r\n          $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);\r\n      }\r\n      else if (args.columns) {\r\n          $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);\r\n      }\r\n      else {\r\n          $$.load(null, args);\r\n      }\r\n  };\r\n  ChartInternal.prototype.unload = function (targetIds, done) {\r\n      var $$ = this;\r\n      $$.resetCache();\r\n      if (!done) {\r\n          done = function () { };\r\n      }\r\n      // filter existing target\r\n      targetIds = targetIds.filter(function (id) {\r\n          return $$.hasTarget($$.data.targets, id);\r\n      });\r\n      // If no target, call done and return\r\n      if (!targetIds || targetIds.length === 0) {\r\n          done();\r\n          return;\r\n      }\r\n      $$.svg\r\n          .selectAll(targetIds.map(function (id) {\r\n          return $$.selectorTarget(id);\r\n      }))\r\n          .transition()\r\n          .style('opacity', 0)\r\n          .remove()\r\n          .call($$.endall, done);\r\n      targetIds.forEach(function (id) {\r\n          // Reset fadein for future load\r\n          $$.withoutFadeIn[id] = false;\r\n          // Remove target's elements\r\n          if ($$.legend) {\r\n              $$.legend\r\n                  .selectAll('.' + CLASS.legendItem + $$.getTargetSelectorSuffix(id))\r\n                  .remove();\r\n          }\r\n          // Remove target\r\n          $$.data.targets = $$.data.targets.filter(function (t) {\r\n              return t.id !== id;\r\n          });\r\n      });\r\n  };\n\n  ChartInternal.prototype.getYDomainMin = function (targets) {\r\n      var $$ = this, config = $$.config, ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets), j, k, baseId, idsInGroup, id, hasNegativeValue;\r\n      if (config.data_groups.length > 0) {\r\n          hasNegativeValue = $$.hasNegativeValueInTargets(targets);\r\n          for (j = 0; j < config.data_groups.length; j++) {\r\n              // Determine baseId\r\n              idsInGroup = config.data_groups[j].filter(function (id) {\r\n                  return ids.indexOf(id) >= 0;\r\n              });\r\n              if (idsInGroup.length === 0) {\r\n                  continue;\r\n              }\r\n              baseId = idsInGroup[0];\r\n              // Consider negative values\r\n              if (hasNegativeValue && ys[baseId]) {\r\n                  ys[baseId].forEach(function (v, i) {\r\n                      ys[baseId][i] = v < 0 ? v : 0;\r\n                  });\r\n              }\r\n              // Compute min\r\n              for (k = 1; k < idsInGroup.length; k++) {\r\n                  id = idsInGroup[k];\r\n                  if (!ys[id]) {\r\n                      continue;\r\n                  }\r\n                  ys[id].forEach(function (v, i) {\r\n                      if ($$.axis.getId(id) === $$.axis.getId(baseId) &&\r\n                          ys[baseId] &&\r\n                          !(hasNegativeValue && +v > 0)) {\r\n                          ys[baseId][i] += +v;\r\n                      }\r\n                  });\r\n              }\r\n          }\r\n      }\r\n      return $$.d3.min(Object.keys(ys).map(function (key) {\r\n          return $$.d3.min(ys[key]);\r\n      }));\r\n  };\r\n  ChartInternal.prototype.getYDomainMax = function (targets) {\r\n      var $$ = this, config = $$.config, ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets), j, k, baseId, idsInGroup, id, hasPositiveValue;\r\n      if (config.data_groups.length > 0) {\r\n          hasPositiveValue = $$.hasPositiveValueInTargets(targets);\r\n          for (j = 0; j < config.data_groups.length; j++) {\r\n              // Determine baseId\r\n              idsInGroup = config.data_groups[j].filter(function (id) {\r\n                  return ids.indexOf(id) >= 0;\r\n              });\r\n              if (idsInGroup.length === 0) {\r\n                  continue;\r\n              }\r\n              baseId = idsInGroup[0];\r\n              // Consider positive values\r\n              if (hasPositiveValue && ys[baseId]) {\r\n                  ys[baseId].forEach(function (v, i) {\r\n                      ys[baseId][i] = v > 0 ? v : 0;\r\n                  });\r\n              }\r\n              // Compute max\r\n              for (k = 1; k < idsInGroup.length; k++) {\r\n                  id = idsInGroup[k];\r\n                  if (!ys[id]) {\r\n                      continue;\r\n                  }\r\n                  ys[id].forEach(function (v, i) {\r\n                      if ($$.axis.getId(id) === $$.axis.getId(baseId) &&\r\n                          ys[baseId] &&\r\n                          !(hasPositiveValue && +v < 0)) {\r\n                          ys[baseId][i] += +v;\r\n                      }\r\n                  });\r\n              }\r\n          }\r\n      }\r\n      return $$.d3.max(Object.keys(ys).map(function (key) {\r\n          return $$.d3.max(ys[key]);\r\n      }));\r\n  };\r\n  ChartInternal.prototype.getYDomain = function (targets, axisId, xDomain) {\r\n      var $$ = this, config = $$.config;\r\n      if ($$.isAxisNormalized(axisId)) {\r\n          return [0, 100];\r\n      }\r\n      var targetsByAxisId = targets.filter(function (t) {\r\n          return $$.axis.getId(t.id) === axisId;\r\n      }), yTargets = xDomain\r\n          ? $$.filterByXDomain(targetsByAxisId, xDomain)\r\n          : targetsByAxisId, yMin = axisId === 'y2' ? config.axis_y2_min : config.axis_y_min, yMax = axisId === 'y2' ? config.axis_y2_max : config.axis_y_max, yDomainMin = $$.getYDomainMin(yTargets), yDomainMax = $$.getYDomainMax(yTargets), domain, domainLength, padding_top, padding_bottom, center = axisId === 'y2' ? config.axis_y2_center : config.axis_y_center, yDomainAbs, lengths, diff, ratio, isAllPositive, isAllNegative, isZeroBased = ($$.hasType('bar', yTargets) && config.bar_zerobased) ||\r\n          ($$.hasType('area', yTargets) && config.area_zerobased), isInverted = axisId === 'y2' ? config.axis_y2_inverted : config.axis_y_inverted, showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated, showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;\r\n      // MEMO: avoid inverting domain unexpectedly\r\n      yDomainMin = isValue(yMin)\r\n          ? yMin\r\n          : isValue(yMax)\r\n              ? yDomainMin < yMax\r\n                  ? yDomainMin\r\n                  : yMax - 10\r\n              : yDomainMin;\r\n      yDomainMax = isValue(yMax)\r\n          ? yMax\r\n          : isValue(yMin)\r\n              ? yMin < yDomainMax\r\n                  ? yDomainMax\r\n                  : yMin + 10\r\n              : yDomainMax;\r\n      if (yTargets.length === 0) {\r\n          // use current domain if target of axisId is none\r\n          return axisId === 'y2' ? $$.y2.domain() : $$.y.domain();\r\n      }\r\n      if (isNaN(yDomainMin)) {\r\n          // set minimum to zero when not number\r\n          yDomainMin = 0;\r\n      }\r\n      if (isNaN(yDomainMax)) {\r\n          // set maximum to have same value as yDomainMin\r\n          yDomainMax = yDomainMin;\r\n      }\r\n      if (yDomainMin === yDomainMax) {\r\n          yDomainMin < 0 ? (yDomainMax = 0) : (yDomainMin = 0);\r\n      }\r\n      isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;\r\n      isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;\r\n      // Cancel zerobased if axis_*_min / axis_*_max specified\r\n      if ((isValue(yMin) && isAllPositive) || (isValue(yMax) && isAllNegative)) {\r\n          isZeroBased = false;\r\n      }\r\n      // Bar/Area chart should be 0-based if all positive|negative\r\n      if (isZeroBased) {\r\n          if (isAllPositive) {\r\n              yDomainMin = 0;\r\n          }\r\n          if (isAllNegative) {\r\n              yDomainMax = 0;\r\n          }\r\n      }\r\n      domainLength = Math.abs(yDomainMax - yDomainMin);\r\n      padding_top = padding_bottom = domainLength * 0.1;\r\n      if (typeof center !== 'undefined') {\r\n          yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));\r\n          yDomainMax = center + yDomainAbs;\r\n          yDomainMin = center - yDomainAbs;\r\n      }\r\n      // add padding for data label\r\n      if (showHorizontalDataLabel) {\r\n          lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'width');\r\n          diff = diffDomain($$.y.range());\r\n          ratio = [lengths[0] / diff, lengths[1] / diff];\r\n          padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));\r\n          padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));\r\n      }\r\n      else if (showVerticalDataLabel) {\r\n          lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'height');\r\n          var pixelsToAxisPadding = $$.getY(config[\"axis_\" + axisId + \"_type\"], \r\n          // input domain as pixels\r\n          [0, config.axis_rotated ? $$.width : $$.height], \r\n          // output range as axis padding\r\n          [0, domainLength]);\r\n          padding_top += pixelsToAxisPadding(lengths[1]);\r\n          padding_bottom += pixelsToAxisPadding(lengths[0]);\r\n      }\r\n      if (axisId === 'y' && notEmpty(config.axis_y_padding)) {\r\n          padding_top = $$.axis.getPadding(config.axis_y_padding, 'top', padding_top, domainLength);\r\n          padding_bottom = $$.axis.getPadding(config.axis_y_padding, 'bottom', padding_bottom, domainLength);\r\n      }\r\n      if (axisId === 'y2' && notEmpty(config.axis_y2_padding)) {\r\n          padding_top = $$.axis.getPadding(config.axis_y2_padding, 'top', padding_top, domainLength);\r\n          padding_bottom = $$.axis.getPadding(config.axis_y2_padding, 'bottom', padding_bottom, domainLength);\r\n      }\r\n      // Bar/Area chart should be 0-based if all positive|negative\r\n      if (isZeroBased) {\r\n          if (isAllPositive) {\r\n              padding_bottom = yDomainMin;\r\n          }\r\n          if (isAllNegative) {\r\n              padding_top = -yDomainMax;\r\n          }\r\n      }\r\n      domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];\r\n      return isInverted ? domain.reverse() : domain;\r\n  };\r\n  ChartInternal.prototype.getXDomainMin = function (targets) {\r\n      var $$ = this, config = $$.config;\r\n      return isDefined(config.axis_x_min)\r\n          ? $$.isTimeSeries()\r\n              ? this.parseDate(config.axis_x_min)\r\n              : config.axis_x_min\r\n          : $$.d3.min(targets, function (t) {\r\n              return $$.d3.min(t.values, function (v) {\r\n                  return v.x;\r\n              });\r\n          });\r\n  };\r\n  ChartInternal.prototype.getXDomainMax = function (targets) {\r\n      var $$ = this, config = $$.config;\r\n      return isDefined(config.axis_x_max)\r\n          ? $$.isTimeSeries()\r\n              ? this.parseDate(config.axis_x_max)\r\n              : config.axis_x_max\r\n          : $$.d3.max(targets, function (t) {\r\n              return $$.d3.max(t.values, function (v) {\r\n                  return v.x;\r\n              });\r\n          });\r\n  };\r\n  ChartInternal.prototype.getXDomainPadding = function (domain) {\r\n      var $$ = this, config = $$.config, diff = domain[1] - domain[0], maxDataCount, padding, paddingLeft, paddingRight;\r\n      if ($$.isCategorized()) {\r\n          padding = 0;\r\n      }\r\n      else if ($$.hasType('bar')) {\r\n          maxDataCount = $$.getMaxDataCount();\r\n          padding = maxDataCount > 1 ? diff / (maxDataCount - 1) / 2 : 0.5;\r\n      }\r\n      else {\r\n          padding = diff * 0.01;\r\n      }\r\n      if (typeof config.axis_x_padding === 'object' &&\r\n          notEmpty(config.axis_x_padding)) {\r\n          paddingLeft = isValue(config.axis_x_padding.left)\r\n              ? config.axis_x_padding.left\r\n              : padding;\r\n          paddingRight = isValue(config.axis_x_padding.right)\r\n              ? config.axis_x_padding.right\r\n              : padding;\r\n      }\r\n      else if (typeof config.axis_x_padding === 'number') {\r\n          paddingLeft = paddingRight = config.axis_x_padding;\r\n      }\r\n      else {\r\n          paddingLeft = paddingRight = padding;\r\n      }\r\n      return { left: paddingLeft, right: paddingRight };\r\n  };\r\n  ChartInternal.prototype.getXDomain = function (targets) {\r\n      var $$ = this, xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)], firstX = xDomain[0], lastX = xDomain[1], padding = $$.getXDomainPadding(xDomain), min = 0, max = 0;\r\n      // show center of x domain if min and max are the same\r\n      if (firstX - lastX === 0 && !$$.isCategorized()) {\r\n          if ($$.isTimeSeries()) {\r\n              firstX = new Date(firstX.getTime() * 0.5);\r\n              lastX = new Date(lastX.getTime() * 1.5);\r\n          }\r\n          else {\r\n              firstX = firstX === 0 ? 1 : firstX * 0.5;\r\n              lastX = lastX === 0 ? -1 : lastX * 1.5;\r\n          }\r\n      }\r\n      if (firstX || firstX === 0) {\r\n          min = $$.isTimeSeries()\r\n              ? new Date(firstX.getTime() - padding.left)\r\n              : firstX - padding.left;\r\n      }\r\n      if (lastX || lastX === 0) {\r\n          max = $$.isTimeSeries()\r\n              ? new Date(lastX.getTime() + padding.right)\r\n              : lastX + padding.right;\r\n      }\r\n      return [min, max];\r\n  };\r\n  ChartInternal.prototype.updateXDomain = function (targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {\r\n      var $$ = this, config = $$.config;\r\n      if (withUpdateOrgXDomain) {\r\n          $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));\r\n          $$.orgXDomain = $$.x.domain();\r\n          if (config.zoom_enabled) {\r\n              $$.zoom.update();\r\n          }\r\n          $$.subX.domain($$.x.domain());\r\n          if ($$.brush) {\r\n              $$.brush.updateScale($$.subX);\r\n          }\r\n      }\r\n      if (withUpdateXDomain) {\r\n          $$.x.domain(domain\r\n              ? domain\r\n              : !$$.brush || $$.brush.empty()\r\n                  ? $$.orgXDomain\r\n                  : $$.brush.selectionAsValue());\r\n      }\r\n      // Trim domain when too big by zoom mousemove event\r\n      if (withTrim) {\r\n          $$.x.domain($$.trimXDomain($$.x.orgDomain()));\r\n      }\r\n      return $$.x.domain();\r\n  };\r\n  ChartInternal.prototype.trimXDomain = function (domain) {\r\n      var zoomDomain = this.getZoomDomain(), min = zoomDomain[0], max = zoomDomain[1];\r\n      if (domain[0] <= min) {\r\n          domain[1] = +domain[1] + (min - domain[0]);\r\n          domain[0] = min;\r\n      }\r\n      if (max <= domain[1]) {\r\n          domain[0] = +domain[0] - (domain[1] - max);\r\n          domain[1] = max;\r\n      }\r\n      return domain;\r\n  };\n\n  ChartInternal.prototype.drag = function (mouse) {\r\n      var $$ = this, config = $$.config, main = $$.main, d3 = $$.d3;\r\n      var sx, sy, mx, my, minX, maxX, minY, maxY;\r\n      if ($$.hasArcType()) {\r\n          return;\r\n      }\r\n      if (!config.data_selection_enabled) {\r\n          return;\r\n      } // do nothing if not selectable\r\n      if (!config.data_selection_multiple) {\r\n          return;\r\n      } // skip when single selection because drag is used for multiple selection\r\n      sx = $$.dragStart[0];\r\n      sy = $$.dragStart[1];\r\n      mx = mouse[0];\r\n      my = mouse[1];\r\n      minX = Math.min(sx, mx);\r\n      maxX = Math.max(sx, mx);\r\n      minY = config.data_selection_grouped ? $$.margin.top : Math.min(sy, my);\r\n      maxY = config.data_selection_grouped ? $$.height : Math.max(sy, my);\r\n      main\r\n          .select('.' + CLASS.dragarea)\r\n          .attr('x', minX)\r\n          .attr('y', minY)\r\n          .attr('width', maxX - minX)\r\n          .attr('height', maxY - minY);\r\n      // TODO: binary search when multiple xs\r\n      main\r\n          .selectAll('.' + CLASS.shapes)\r\n          .selectAll('.' + CLASS.shape)\r\n          .each(function (d, i) {\r\n          if (!config.data_selection_isselectable(d)) {\r\n              return;\r\n          }\r\n          var shape = d3.select(this), isSelected = shape.classed(CLASS.SELECTED), isIncluded = shape.classed(CLASS.INCLUDED), _x, _y, _w, _h, toggle, isWithin = false, box;\r\n          if (shape.classed(CLASS.circle)) {\r\n              _x = shape.attr('cx') * 1;\r\n              _y = shape.attr('cy') * 1;\r\n              toggle = $$.togglePoint;\r\n              isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY;\r\n          }\r\n          else if (shape.classed(CLASS.bar)) {\r\n              box = getPathBox(this);\r\n              _x = box.x;\r\n              _y = box.y;\r\n              _w = box.width;\r\n              _h = box.height;\r\n              toggle = $$.togglePath;\r\n              isWithin =\r\n                  !(maxX < _x || _x + _w < minX) && !(maxY < _y || _y + _h < minY);\r\n          }\r\n          else {\r\n              // line/area selection not supported yet\r\n              return;\r\n          }\r\n          if (isWithin ^ isIncluded) {\r\n              shape.classed(CLASS.INCLUDED, !isIncluded);\r\n              // TODO: included/unincluded callback here\r\n              shape.classed(CLASS.SELECTED, !isSelected);\r\n              toggle.call($$, !isSelected, shape, d, i);\r\n          }\r\n      });\r\n  };\r\n  ChartInternal.prototype.dragstart = function (mouse) {\r\n      var $$ = this, config = $$.config;\r\n      if ($$.hasArcType()) {\r\n          return;\r\n      }\r\n      if (!config.data_selection_enabled) {\r\n          return;\r\n      } // do nothing if not selectable\r\n      $$.dragStart = mouse;\r\n      $$.main\r\n          .select('.' + CLASS.chart)\r\n          .append('rect')\r\n          .attr('class', CLASS.dragarea)\r\n          .style('opacity', 0.1);\r\n      $$.dragging = true;\r\n  };\r\n  ChartInternal.prototype.dragend = function () {\r\n      var $$ = this, config = $$.config;\r\n      if ($$.hasArcType()) {\r\n          return;\r\n      }\r\n      if (!config.data_selection_enabled) {\r\n          return;\r\n      } // do nothing if not selectable\r\n      $$.main\r\n          .select('.' + CLASS.dragarea)\r\n          .transition()\r\n          .duration(100)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      $$.main.selectAll('.' + CLASS.shape).classed(CLASS.INCLUDED, false);\r\n      $$.dragging = false;\r\n  };\n\n  ChartInternal.prototype.getYFormat = function (forArc) {\r\n      var $$ = this, formatForY = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.yFormat, formatForY2 = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.y2Format;\r\n      return function (v, ratio, id) {\r\n          var format = $$.axis.getId(id) === 'y2' ? formatForY2 : formatForY;\r\n          return format.call($$, v, ratio);\r\n      };\r\n  };\r\n  ChartInternal.prototype.yFormat = function (v) {\r\n      var $$ = this, config = $$.config, format = config.axis_y_tick_format\r\n          ? config.axis_y_tick_format\r\n          : $$.defaultValueFormat;\r\n      return format(v);\r\n  };\r\n  ChartInternal.prototype.y2Format = function (v) {\r\n      var $$ = this, config = $$.config, format = config.axis_y2_tick_format\r\n          ? config.axis_y2_tick_format\r\n          : $$.defaultValueFormat;\r\n      return format(v);\r\n  };\r\n  ChartInternal.prototype.defaultValueFormat = function (v) {\r\n      return isValue(v) ? +v : '';\r\n  };\r\n  ChartInternal.prototype.defaultArcValueFormat = function (v, ratio) {\r\n      return (ratio * 100).toFixed(1) + '%';\r\n  };\r\n  ChartInternal.prototype.dataLabelFormat = function (targetId) {\r\n      var $$ = this, data_labels = $$.config.data_labels, format, defaultFormat = function (v) {\r\n          return isValue(v) ? +v : '';\r\n      };\r\n      // find format according to axis id\r\n      if (typeof data_labels.format === 'function') {\r\n          format = data_labels.format;\r\n      }\r\n      else if (typeof data_labels.format === 'object') {\r\n          if (data_labels.format[targetId]) {\r\n              format =\r\n                  data_labels.format[targetId] === true\r\n                      ? defaultFormat\r\n                      : data_labels.format[targetId];\r\n          }\r\n          else {\r\n              format = function () {\r\n                  return '';\r\n              };\r\n          }\r\n      }\r\n      else {\r\n          format = defaultFormat;\r\n      }\r\n      return format;\r\n  };\n\n  ChartInternal.prototype.initGrid = function () {\r\n      var $$ = this, config = $$.config, d3 = $$.d3;\r\n      $$.grid = $$.main\r\n          .append('g')\r\n          .attr('clip-path', $$.clipPathForGrid)\r\n          .attr('class', CLASS.grid);\r\n      if (config.grid_x_show) {\r\n          $$.grid.append('g').attr('class', CLASS.xgrids);\r\n      }\r\n      if (config.grid_y_show) {\r\n          $$.grid.append('g').attr('class', CLASS.ygrids);\r\n      }\r\n      if (config.grid_focus_show) {\r\n          $$.grid\r\n              .append('g')\r\n              .attr('class', CLASS.xgridFocus)\r\n              .append('line')\r\n              .attr('class', CLASS.xgridFocus);\r\n      }\r\n      $$.xgrid = d3.selectAll([]);\r\n      if (!config.grid_lines_front) {\r\n          $$.initGridLines();\r\n      }\r\n  };\r\n  ChartInternal.prototype.initGridLines = function () {\r\n      var $$ = this, d3 = $$.d3;\r\n      $$.gridLines = $$.main\r\n          .append('g')\r\n          .attr('clip-path', $$.clipPathForGrid)\r\n          .attr('class', CLASS.grid + ' ' + CLASS.gridLines);\r\n      $$.gridLines.append('g').attr('class', CLASS.xgridLines);\r\n      $$.gridLines.append('g').attr('class', CLASS.ygridLines);\r\n      $$.xgridLines = d3.selectAll([]);\r\n  };\r\n  ChartInternal.prototype.updateXGrid = function (withoutUpdate) {\r\n      var $$ = this, config = $$.config, d3 = $$.d3, xgridData = $$.generateGridData(config.grid_x_type, $$.x), tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;\r\n      $$.xgridAttr = config.axis_rotated\r\n          ? {\r\n              x1: 0,\r\n              x2: $$.width,\r\n              y1: function (d) {\r\n                  return $$.x(d) - tickOffset;\r\n              },\r\n              y2: function (d) {\r\n                  return $$.x(d) - tickOffset;\r\n              }\r\n          }\r\n          : {\r\n              x1: function (d) {\r\n                  return $$.x(d) + tickOffset;\r\n              },\r\n              x2: function (d) {\r\n                  return $$.x(d) + tickOffset;\r\n              },\r\n              y1: 0,\r\n              y2: $$.height\r\n          };\r\n      $$.xgridAttr.opacity = function () {\r\n          var pos = +d3.select(this).attr(config.axis_rotated ? 'y1' : 'x1');\r\n          return pos === (config.axis_rotated ? $$.height : 0) ? 0 : 1;\r\n      };\r\n      var xgrid = $$.main\r\n          .select('.' + CLASS.xgrids)\r\n          .selectAll('.' + CLASS.xgrid)\r\n          .data(xgridData);\r\n      var xgridEnter = xgrid\r\n          .enter()\r\n          .append('line')\r\n          .attr('class', CLASS.xgrid)\r\n          .attr('x1', $$.xgridAttr.x1)\r\n          .attr('x2', $$.xgridAttr.x2)\r\n          .attr('y1', $$.xgridAttr.y1)\r\n          .attr('y2', $$.xgridAttr.y2)\r\n          .style('opacity', 0);\r\n      $$.xgrid = xgridEnter.merge(xgrid);\r\n      if (!withoutUpdate) {\r\n          $$.xgrid\r\n              .attr('x1', $$.xgridAttr.x1)\r\n              .attr('x2', $$.xgridAttr.x2)\r\n              .attr('y1', $$.xgridAttr.y1)\r\n              .attr('y2', $$.xgridAttr.y2)\r\n              .style('opacity', $$.xgridAttr.opacity);\r\n      }\r\n      xgrid.exit().remove();\r\n  };\r\n  ChartInternal.prototype.updateYGrid = function () {\r\n      var $$ = this, config = $$.config, gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);\r\n      var ygrid = $$.main\r\n          .select('.' + CLASS.ygrids)\r\n          .selectAll('.' + CLASS.ygrid)\r\n          .data(gridValues);\r\n      var ygridEnter = ygrid\r\n          .enter()\r\n          .append('line')\r\n          // TODO: x1, x2, y1, y2, opacity need to be set here maybe\r\n          .attr('class', CLASS.ygrid);\r\n      $$.ygrid = ygridEnter.merge(ygrid);\r\n      $$.ygrid\r\n          .attr('x1', config.axis_rotated ? $$.y : 0)\r\n          .attr('x2', config.axis_rotated ? $$.y : $$.width)\r\n          .attr('y1', config.axis_rotated ? 0 : $$.y)\r\n          .attr('y2', config.axis_rotated ? $$.height : $$.y);\r\n      ygrid.exit().remove();\r\n      $$.smoothLines($$.ygrid, 'grid');\r\n  };\r\n  ChartInternal.prototype.gridTextAnchor = function (d) {\r\n      return d.position ? d.position : 'end';\r\n  };\r\n  ChartInternal.prototype.gridTextDx = function (d) {\r\n      return d.position === 'start' ? 4 : d.position === 'middle' ? 0 : -4;\r\n  };\r\n  ChartInternal.prototype.xGridTextX = function (d) {\r\n      return d.position === 'start'\r\n          ? -this.height\r\n          : d.position === 'middle'\r\n              ? -this.height / 2\r\n              : 0;\r\n  };\r\n  ChartInternal.prototype.yGridTextX = function (d) {\r\n      return d.position === 'start'\r\n          ? 0\r\n          : d.position === 'middle'\r\n              ? this.width / 2\r\n              : this.width;\r\n  };\r\n  ChartInternal.prototype.updateGrid = function (duration) {\r\n      var $$ = this, main = $$.main, config = $$.config, xgridLine, xgridLineEnter, ygridLine, ygridLineEnter, xv = $$.xv.bind($$), yv = $$.yv.bind($$), xGridTextX = $$.xGridTextX.bind($$), yGridTextX = $$.yGridTextX.bind($$);\r\n      // hide if arc type\r\n      $$.grid.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');\r\n      main.select('line.' + CLASS.xgridFocus).style('visibility', 'hidden');\r\n      if (config.grid_x_show) {\r\n          $$.updateXGrid();\r\n      }\r\n      xgridLine = main\r\n          .select('.' + CLASS.xgridLines)\r\n          .selectAll('.' + CLASS.xgridLine)\r\n          .data(config.grid_x_lines);\r\n      // enter\r\n      xgridLineEnter = xgridLine\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', function (d) {\r\n          return CLASS.xgridLine + (d['class'] ? ' ' + d['class'] : '');\r\n      });\r\n      xgridLineEnter\r\n          .append('line')\r\n          .attr('x1', config.axis_rotated ? 0 : xv)\r\n          .attr('x2', config.axis_rotated ? $$.width : xv)\r\n          .attr('y1', config.axis_rotated ? xv : 0)\r\n          .attr('y2', config.axis_rotated ? xv : $$.height)\r\n          .style('opacity', 0);\r\n      xgridLineEnter\r\n          .append('text')\r\n          .attr('text-anchor', $$.gridTextAnchor)\r\n          .attr('transform', config.axis_rotated ? '' : 'rotate(-90)')\r\n          .attr('x', config.axis_rotated ? yGridTextX : xGridTextX)\r\n          .attr('y', xv)\r\n          .attr('dx', $$.gridTextDx)\r\n          .attr('dy', -5)\r\n          .style('opacity', 0);\r\n      // udpate\r\n      $$.xgridLines = xgridLineEnter.merge(xgridLine);\r\n      // done in d3.transition() of the end of this function\r\n      // exit\r\n      xgridLine\r\n          .exit()\r\n          .transition()\r\n          .duration(duration)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      // Y-Grid\r\n      if (config.grid_y_show) {\r\n          $$.updateYGrid();\r\n      }\r\n      ygridLine = main\r\n          .select('.' + CLASS.ygridLines)\r\n          .selectAll('.' + CLASS.ygridLine)\r\n          .data(config.grid_y_lines);\r\n      // enter\r\n      ygridLineEnter = ygridLine\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', function (d) {\r\n          return CLASS.ygridLine + (d['class'] ? ' ' + d['class'] : '');\r\n      });\r\n      ygridLineEnter\r\n          .append('line')\r\n          .attr('x1', config.axis_rotated ? yv : 0)\r\n          .attr('x2', config.axis_rotated ? yv : $$.width)\r\n          .attr('y1', config.axis_rotated ? 0 : yv)\r\n          .attr('y2', config.axis_rotated ? $$.height : yv)\r\n          .style('opacity', 0);\r\n      ygridLineEnter\r\n          .append('text')\r\n          .attr('text-anchor', $$.gridTextAnchor)\r\n          .attr('transform', config.axis_rotated ? 'rotate(-90)' : '')\r\n          .attr('x', config.axis_rotated ? xGridTextX : yGridTextX)\r\n          .attr('y', yv)\r\n          .attr('dx', $$.gridTextDx)\r\n          .attr('dy', -5)\r\n          .style('opacity', 0);\r\n      // update\r\n      $$.ygridLines = ygridLineEnter.merge(ygridLine);\r\n      $$.ygridLines\r\n          .select('line')\r\n          .transition()\r\n          .duration(duration)\r\n          .attr('x1', config.axis_rotated ? yv : 0)\r\n          .attr('x2', config.axis_rotated ? yv : $$.width)\r\n          .attr('y1', config.axis_rotated ? 0 : yv)\r\n          .attr('y2', config.axis_rotated ? $$.height : yv)\r\n          .style('opacity', 1);\r\n      $$.ygridLines\r\n          .select('text')\r\n          .transition()\r\n          .duration(duration)\r\n          .attr('x', config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$))\r\n          .attr('y', yv)\r\n          .text(function (d) {\r\n          return d.text;\r\n      })\r\n          .style('opacity', 1);\r\n      // exit\r\n      ygridLine\r\n          .exit()\r\n          .transition()\r\n          .duration(duration)\r\n          .style('opacity', 0)\r\n          .remove();\r\n  };\r\n  ChartInternal.prototype.redrawGrid = function (withTransition, transition) {\r\n      var $$ = this, config = $$.config, xv = $$.xv.bind($$), lines = $$.xgridLines.select('line'), texts = $$.xgridLines.select('text');\r\n      return [\r\n          (withTransition ? lines.transition(transition) : lines)\r\n              .attr('x1', config.axis_rotated ? 0 : xv)\r\n              .attr('x2', config.axis_rotated ? $$.width : xv)\r\n              .attr('y1', config.axis_rotated ? xv : 0)\r\n              .attr('y2', config.axis_rotated ? xv : $$.height)\r\n              .style('opacity', 1),\r\n          (withTransition ? texts.transition(transition) : texts)\r\n              .attr('x', config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$))\r\n              .attr('y', xv)\r\n              .text(function (d) {\r\n              return d.text;\r\n          })\r\n              .style('opacity', 1)\r\n      ];\r\n  };\r\n  ChartInternal.prototype.showXGridFocus = function (selectedData) {\r\n      var $$ = this, config = $$.config, dataToShow = selectedData.filter(function (d) {\r\n          return d && isValue(d.value);\r\n      }), focusEl = $$.main.selectAll('line.' + CLASS.xgridFocus), xx = $$.xx.bind($$);\r\n      if (!config.tooltip_show) {\r\n          return;\r\n      }\r\n      // Hide when stanford plot exists\r\n      if ($$.hasType('stanford') || $$.hasArcType()) {\r\n          return;\r\n      }\r\n      focusEl\r\n          .style('visibility', 'visible')\r\n          .data([dataToShow[0]])\r\n          .attr(config.axis_rotated ? 'y1' : 'x1', xx)\r\n          .attr(config.axis_rotated ? 'y2' : 'x2', xx);\r\n      $$.smoothLines(focusEl, 'grid');\r\n  };\r\n  ChartInternal.prototype.hideXGridFocus = function () {\r\n      this.main.select('line.' + CLASS.xgridFocus).style('visibility', 'hidden');\r\n  };\r\n  ChartInternal.prototype.updateXgridFocus = function () {\r\n      var $$ = this, config = $$.config;\r\n      $$.main\r\n          .select('line.' + CLASS.xgridFocus)\r\n          .attr('x1', config.axis_rotated ? 0 : -10)\r\n          .attr('x2', config.axis_rotated ? $$.width : -10)\r\n          .attr('y1', config.axis_rotated ? -10 : 0)\r\n          .attr('y2', config.axis_rotated ? -10 : $$.height);\r\n  };\r\n  ChartInternal.prototype.generateGridData = function (type, scale) {\r\n      var $$ = this, gridData = [], xDomain, firstYear, lastYear, i, tickNum = $$.main\r\n          .select('.' + CLASS.axisX)\r\n          .selectAll('.tick')\r\n          .size();\r\n      if (type === 'year') {\r\n          xDomain = $$.getXDomain();\r\n          firstYear = xDomain[0].getFullYear();\r\n          lastYear = xDomain[1].getFullYear();\r\n          for (i = firstYear; i <= lastYear; i++) {\r\n              gridData.push(new Date(i + '-01-01 00:00:00'));\r\n          }\r\n      }\r\n      else {\r\n          gridData = scale.ticks(10);\r\n          if (gridData.length > tickNum) {\r\n              // use only int\r\n              gridData = gridData.filter(function (d) {\r\n                  return ('' + d).indexOf('.') < 0;\r\n              });\r\n          }\r\n      }\r\n      return gridData;\r\n  };\r\n  ChartInternal.prototype.getGridFilterToRemove = function (params) {\r\n      return params\r\n          ? function (line) {\r\n              var found = false;\r\n              [].concat(params).forEach(function (param) {\r\n                  if (('value' in param && line.value === param.value) ||\r\n                      ('class' in param && line['class'] === param['class'])) {\r\n                      found = true;\r\n                  }\r\n              });\r\n              return found;\r\n          }\r\n          : function () {\r\n              return true;\r\n          };\r\n  };\r\n  ChartInternal.prototype.removeGridLines = function (params, forX) {\r\n      var $$ = this, config = $$.config, toRemove = $$.getGridFilterToRemove(params), toShow = function (line) {\r\n          return !toRemove(line);\r\n      }, classLines = forX ? CLASS.xgridLines : CLASS.ygridLines, classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;\r\n      $$.main\r\n          .select('.' + classLines)\r\n          .selectAll('.' + classLine)\r\n          .filter(toRemove)\r\n          .transition()\r\n          .duration(config.transition_duration)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      if (forX) {\r\n          config.grid_x_lines = config.grid_x_lines.filter(toShow);\r\n      }\r\n      else {\r\n          config.grid_y_lines = config.grid_y_lines.filter(toShow);\r\n      }\r\n  };\n\n  ChartInternal.prototype.initEventRect = function () {\r\n      var $$ = this, config = $$.config;\r\n      $$.main\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.eventRects)\r\n          .style('fill-opacity', 0);\r\n      $$.eventRect = $$.main\r\n          .select('.' + CLASS.eventRects)\r\n          .append('rect')\r\n          .attr('class', CLASS.eventRect);\r\n      // event rect handle zoom event as well\r\n      if (config.zoom_enabled && $$.zoom) {\r\n          $$.eventRect.call($$.zoom).on('dblclick.zoom', null);\r\n          if (config.zoom_initialRange) {\r\n              // WORKAROUND: Add transition to apply transform immediately when no subchart\r\n              $$.eventRect\r\n                  .transition()\r\n                  .duration(0)\r\n                  .call($$.zoom.transform, $$.zoomTransform(config.zoom_initialRange));\r\n          }\r\n      }\r\n  };\r\n  ChartInternal.prototype.redrawEventRect = function () {\r\n      var $$ = this, d3 = $$.d3, config = $$.config;\r\n      function mouseout() {\r\n          $$.svg.select('.' + CLASS.eventRect).style('cursor', null);\r\n          $$.hideXGridFocus();\r\n          $$.hideTooltip();\r\n          $$.unexpandCircles();\r\n          $$.unexpandBars();\r\n      }\r\n      var isHoveringDataPoint = function (mouse, closest) {\r\n          return closest &&\r\n              ($$.isBarType(closest.id) ||\r\n                  $$.dist(closest, mouse) < config.point_sensitivity);\r\n      };\r\n      var withName = function (d) { return (d ? $$.addName(Object.assign({}, d)) : null); };\r\n      // rects for mouseover\r\n      $$.main\r\n          .select('.' + CLASS.eventRects)\r\n          .style('cursor', config.zoom_enabled\r\n          ? config.axis_rotated\r\n              ? 'ns-resize'\r\n              : 'ew-resize'\r\n          : null);\r\n      $$.eventRect\r\n          .attr('x', 0)\r\n          .attr('y', 0)\r\n          .attr('width', $$.width)\r\n          .attr('height', $$.height)\r\n          .on('mouseout', config.interaction_enabled\r\n          ? function () {\r\n              if (!config) {\r\n                  return;\r\n              } // chart is destroyed\r\n              if ($$.hasArcType()) {\r\n                  return;\r\n              }\r\n              if ($$.mouseover) {\r\n                  config.data_onmouseout.call($$.api, $$.mouseover);\r\n                  $$.mouseover = undefined;\r\n              }\r\n              mouseout();\r\n          }\r\n          : null)\r\n          .on('mousemove', config.interaction_enabled\r\n          ? function () {\r\n              // do nothing when dragging\r\n              if ($$.dragging) {\r\n                  return;\r\n              }\r\n              var targetsToShow = $$.getTargetsToShow();\r\n              // do nothing if arc type\r\n              if ($$.hasArcType(targetsToShow)) {\r\n                  return;\r\n              }\r\n              var mouse = d3.mouse(this);\r\n              var closest = withName($$.findClosestFromTargets(targetsToShow, mouse));\r\n              var isMouseCloseToDataPoint = isHoveringDataPoint(mouse, closest);\r\n              // ensure onmouseout is always called if mousemove switch between 2 targets\r\n              if ($$.mouseover &&\r\n                  (!closest ||\r\n                      closest.id !== $$.mouseover.id ||\r\n                      closest.index !== $$.mouseover.index)) {\r\n                  config.data_onmouseout.call($$.api, $$.mouseover);\r\n                  $$.mouseover = undefined;\r\n              }\r\n              if (closest && !$$.mouseover) {\r\n                  config.data_onmouseover.call($$.api, closest);\r\n                  $$.mouseover = closest;\r\n              }\r\n              // show cursor as pointer if we're hovering a data point close enough\r\n              $$.svg\r\n                  .select('.' + CLASS.eventRect)\r\n                  .style('cursor', isMouseCloseToDataPoint ? 'pointer' : null);\r\n              // if tooltip not grouped, we want to display only data from closest data point\r\n              var showSingleDataPoint = !config.tooltip_grouped || $$.hasType('stanford', targetsToShow);\r\n              // find data to highlight\r\n              var selectedData;\r\n              if (showSingleDataPoint) {\r\n                  if (closest) {\r\n                      selectedData = [closest];\r\n                  }\r\n              }\r\n              else {\r\n                  var closestByX = void 0;\r\n                  if (closest) {\r\n                      // reuse closest value\r\n                      closestByX = closest;\r\n                  }\r\n                  else {\r\n                      // try to find the closest value by X values from the mouse position\r\n                      var mouseX = config.axis_rotated ? mouse[1] : mouse[0];\r\n                      closestByX = $$.findClosestFromTargetsByX(targetsToShow, $$.x.invert(mouseX));\r\n                  }\r\n                  // highlight all data for this 'x' value\r\n                  if (closestByX) {\r\n                      selectedData = $$.filterByX(targetsToShow, closestByX.x);\r\n                  }\r\n              }\r\n              // ensure we have data to show\r\n              if (!selectedData || selectedData.length === 0) {\r\n                  return mouseout();\r\n              }\r\n              // inject names for each point\r\n              selectedData = selectedData.map(withName);\r\n              // show tooltip\r\n              $$.showTooltip(selectedData, this);\r\n              // expand points\r\n              if (config.point_focus_expand_enabled) {\r\n                  $$.unexpandCircles();\r\n                  selectedData.forEach(function (d) {\r\n                      $$.expandCircles(d.index, d.id, false);\r\n                  });\r\n              }\r\n              // expand bars\r\n              $$.unexpandBars();\r\n              selectedData.forEach(function (d) {\r\n                  $$.expandBars(d.index, d.id, false);\r\n              });\r\n              // Show xgrid focus line\r\n              $$.showXGridFocus(selectedData);\r\n          }\r\n          : null)\r\n          .on('click', config.interaction_enabled\r\n          ? function () {\r\n              var targetsToShow = $$.getTargetsToShow();\r\n              if ($$.hasArcType(targetsToShow)) {\r\n                  return;\r\n              }\r\n              var mouse = d3.mouse(this);\r\n              var closest = withName($$.findClosestFromTargets(targetsToShow, mouse));\r\n              if (!isHoveringDataPoint(mouse, closest)) {\r\n                  return;\r\n              }\r\n              // select if selection enabled\r\n              var sameXData;\r\n              if (!config.data_selection_grouped || $$.isStanfordType(closest)) {\r\n                  sameXData = [closest];\r\n              }\r\n              else {\r\n                  sameXData = $$.filterByX(targetsToShow, closest.x);\r\n              }\r\n              // toggle selected state\r\n              sameXData.forEach(function (d) {\r\n                  $$.main\r\n                      .selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(d.id))\r\n                      .selectAll('.' + CLASS.shape + '-' + d.index)\r\n                      .each(function () {\r\n                      if (config.data_selection_grouped ||\r\n                          $$.isWithinShape(this, d)) {\r\n                          $$.toggleShape(this, d, d.index);\r\n                      }\r\n                  });\r\n              });\r\n              // call data_onclick on the closest data point\r\n              if (closest) {\r\n                  var shape = $$.main\r\n                      .selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id))\r\n                      .select('.' + CLASS.shape + '-' + closest.index);\r\n                  config.data_onclick.call($$.api, closest, shape.node());\r\n              }\r\n          }\r\n          : null)\r\n          .call(config.interaction_enabled && config.data_selection_draggable && $$.drag\r\n          ? d3\r\n              .drag()\r\n              .on('drag', function () {\r\n              $$.drag(d3.mouse(this));\r\n          })\r\n              .on('start', function () {\r\n              $$.dragstart(d3.mouse(this));\r\n          })\r\n              .on('end', function () {\r\n              $$.dragend();\r\n          })\r\n          : function () { });\r\n  };\r\n  ChartInternal.prototype.getMousePosition = function (data) {\r\n      var $$ = this;\r\n      return [$$.x(data.x), $$.getYScale(data.id)(data.value)];\r\n  };\r\n  ChartInternal.prototype.dispatchEvent = function (type, mouse) {\r\n      var $$ = this, selector = '.' + CLASS.eventRect, eventRect = $$.main.select(selector).node(), box = eventRect.getBoundingClientRect(), x = box.left + (mouse ? mouse[0] : 0), y = box.top + (mouse ? mouse[1] : 0), event = document.createEvent('MouseEvents');\r\n      event.initMouseEvent(type, true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);\r\n      eventRect.dispatchEvent(event);\r\n  };\n\n  ChartInternal.prototype.initLegend = function () {\r\n      var $$ = this;\r\n      $$.legendItemTextBox = {};\r\n      $$.legendHasRendered = false;\r\n      $$.legend = $$.svg.append('g').attr('transform', $$.getTranslate('legend'));\r\n      if (!$$.config.legend_show) {\r\n          $$.legend.style('visibility', 'hidden');\r\n          $$.hiddenLegendIds = $$.mapToIds($$.data.targets);\r\n          return;\r\n      }\r\n      // MEMO: call here to update legend box and tranlate for all\r\n      // MEMO: translate will be updated by this, so transform not needed in updateLegend()\r\n      $$.updateLegendWithDefaults();\r\n  };\r\n  ChartInternal.prototype.updateLegendWithDefaults = function () {\r\n      var $$ = this;\r\n      $$.updateLegend($$.mapToIds($$.data.targets), {\r\n          withTransform: false,\r\n          withTransitionForTransform: false,\r\n          withTransition: false\r\n      });\r\n  };\r\n  ChartInternal.prototype.updateSizeForLegend = function (legendHeight, legendWidth) {\r\n      var $$ = this, config = $$.config, insetLegendPosition = {\r\n          top: $$.isLegendTop\r\n              ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5\r\n              : $$.currentHeight -\r\n                  legendHeight -\r\n                  $$.getCurrentPaddingBottom() -\r\n                  config.legend_inset_y,\r\n          left: $$.isLegendLeft\r\n              ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5\r\n              : $$.currentWidth -\r\n                  legendWidth -\r\n                  $$.getCurrentPaddingRight() -\r\n                  config.legend_inset_x +\r\n                  0.5\r\n      };\r\n      $$.margin3 = {\r\n          top: $$.isLegendRight\r\n              ? 0\r\n              : $$.isLegendInset\r\n                  ? insetLegendPosition.top\r\n                  : $$.currentHeight - legendHeight,\r\n          right: NaN,\r\n          bottom: 0,\r\n          left: $$.isLegendRight\r\n              ? $$.currentWidth - legendWidth\r\n              : $$.isLegendInset\r\n                  ? insetLegendPosition.left\r\n                  : 0\r\n      };\r\n  };\r\n  ChartInternal.prototype.transformLegend = function (withTransition) {\r\n      var $$ = this;\r\n      (withTransition ? $$.legend.transition() : $$.legend).attr('transform', $$.getTranslate('legend'));\r\n  };\r\n  ChartInternal.prototype.updateLegendStep = function (step) {\r\n      this.legendStep = step;\r\n  };\r\n  ChartInternal.prototype.updateLegendItemWidth = function (w) {\r\n      this.legendItemWidth = w;\r\n  };\r\n  ChartInternal.prototype.updateLegendItemHeight = function (h) {\r\n      this.legendItemHeight = h;\r\n  };\r\n  ChartInternal.prototype.getLegendWidth = function () {\r\n      var $$ = this;\r\n      return $$.config.legend_show\r\n          ? $$.isLegendRight || $$.isLegendInset\r\n              ? $$.legendItemWidth * ($$.legendStep + 1)\r\n              : $$.currentWidth\r\n          : 0;\r\n  };\r\n  ChartInternal.prototype.getLegendHeight = function () {\r\n      var $$ = this, h = 0;\r\n      if ($$.config.legend_show) {\r\n          if ($$.isLegendRight) {\r\n              h = $$.currentHeight;\r\n          }\r\n          else {\r\n              h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);\r\n          }\r\n      }\r\n      return h;\r\n  };\r\n  ChartInternal.prototype.opacityForLegend = function (legendItem) {\r\n      return legendItem.classed(CLASS.legendItemHidden) ? null : 1;\r\n  };\r\n  ChartInternal.prototype.opacityForUnfocusedLegend = function (legendItem) {\r\n      return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;\r\n  };\r\n  ChartInternal.prototype.toggleFocusLegend = function (targetIds, focus) {\r\n      var $$ = this;\r\n      targetIds = $$.mapToTargetIds(targetIds);\r\n      $$.legend\r\n          .selectAll('.' + CLASS.legendItem)\r\n          .filter(function (id) {\r\n          return targetIds.indexOf(id) >= 0;\r\n      })\r\n          .classed(CLASS.legendItemFocused, focus)\r\n          .transition()\r\n          .duration(100)\r\n          .style('opacity', function () {\r\n          var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;\r\n          return opacity.call($$, $$.d3.select(this));\r\n      });\r\n  };\r\n  ChartInternal.prototype.revertLegend = function () {\r\n      var $$ = this, d3 = $$.d3;\r\n      $$.legend\r\n          .selectAll('.' + CLASS.legendItem)\r\n          .classed(CLASS.legendItemFocused, false)\r\n          .transition()\r\n          .duration(100)\r\n          .style('opacity', function () {\r\n          return $$.opacityForLegend(d3.select(this));\r\n      });\r\n  };\r\n  ChartInternal.prototype.showLegend = function (targetIds) {\r\n      var $$ = this, config = $$.config;\r\n      if (!config.legend_show) {\r\n          config.legend_show = true;\r\n          $$.legend.style('visibility', 'visible');\r\n          if (!$$.legendHasRendered) {\r\n              $$.updateLegendWithDefaults();\r\n          }\r\n      }\r\n      $$.removeHiddenLegendIds(targetIds);\r\n      $$.legend\r\n          .selectAll($$.selectorLegends(targetIds))\r\n          .style('visibility', 'visible')\r\n          .transition()\r\n          .style('opacity', function () {\r\n          return $$.opacityForLegend($$.d3.select(this));\r\n      });\r\n  };\r\n  ChartInternal.prototype.hideLegend = function (targetIds) {\r\n      var $$ = this, config = $$.config;\r\n      if (config.legend_show && isEmpty(targetIds)) {\r\n          config.legend_show = false;\r\n          $$.legend.style('visibility', 'hidden');\r\n      }\r\n      $$.addHiddenLegendIds(targetIds);\r\n      $$.legend\r\n          .selectAll($$.selectorLegends(targetIds))\r\n          .style('opacity', 0)\r\n          .style('visibility', 'hidden');\r\n  };\r\n  ChartInternal.prototype.clearLegendItemTextBoxCache = function () {\r\n      this.legendItemTextBox = {};\r\n  };\r\n  ChartInternal.prototype.updateLegend = function (targetIds, options, transitions) {\r\n      var $$ = this, config = $$.config;\r\n      var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect, x1ForLegendTile, x2ForLegendTile, yForLegendTile;\r\n      var paddingTop = 4, paddingRight = 10, maxWidth = 0, maxHeight = 0, posMin = 10, tileWidth = config.legend_item_tile_width + 5;\r\n      var l, totalLength = 0, offsets = {}, widths = {}, heights = {}, margins = [0], steps = {}, step = 0;\r\n      var withTransition, withTransitionForTransform;\r\n      var texts, rects, tiles, background;\r\n      // Skip elements when their name is set to null\r\n      targetIds = targetIds.filter(function (id) {\r\n          return !isDefined(config.data_names[id]) || config.data_names[id] !== null;\r\n      });\r\n      options = options || {};\r\n      withTransition = getOption(options, 'withTransition', true);\r\n      withTransitionForTransform = getOption(options, 'withTransitionForTransform', true);\r\n      function getTextBox(textElement, id) {\r\n          if (!$$.legendItemTextBox[id]) {\r\n              $$.legendItemTextBox[id] = $$.getTextRect(textElement.textContent, CLASS.legendItem, textElement);\r\n          }\r\n          return $$.legendItemTextBox[id];\r\n      }\r\n      function updatePositions(textElement, id, index) {\r\n          var reset = index === 0, isLast = index === targetIds.length - 1, box = getTextBox(textElement, id), itemWidth = box.width +\r\n              tileWidth +\r\n              (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight) +\r\n              config.legend_padding, itemHeight = box.height + paddingTop, itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth, areaLength = $$.isLegendRight || $$.isLegendInset\r\n              ? $$.getLegendHeight()\r\n              : $$.getLegendWidth(), margin, maxLength;\r\n          // MEMO: care about condifion of step, totalLength\r\n          function updateValues(id, withoutStep) {\r\n              if (!withoutStep) {\r\n                  margin = (areaLength - totalLength - itemLength) / 2;\r\n                  if (margin < posMin) {\r\n                      margin = (areaLength - itemLength) / 2;\r\n                      totalLength = 0;\r\n                      step++;\r\n                  }\r\n              }\r\n              steps[id] = step;\r\n              margins[step] = $$.isLegendInset ? 10 : margin;\r\n              offsets[id] = totalLength;\r\n              totalLength += itemLength;\r\n          }\r\n          if (reset) {\r\n              totalLength = 0;\r\n              step = 0;\r\n              maxWidth = 0;\r\n              maxHeight = 0;\r\n          }\r\n          if (config.legend_show && !$$.isLegendToShow(id)) {\r\n              widths[id] = heights[id] = steps[id] = offsets[id] = 0;\r\n              return;\r\n          }\r\n          widths[id] = itemWidth;\r\n          heights[id] = itemHeight;\r\n          if (!maxWidth || itemWidth >= maxWidth) {\r\n              maxWidth = itemWidth;\r\n          }\r\n          if (!maxHeight || itemHeight >= maxHeight) {\r\n              maxHeight = itemHeight;\r\n          }\r\n          maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;\r\n          if (config.legend_equally) {\r\n              Object.keys(widths).forEach(function (id) {\r\n                  widths[id] = maxWidth;\r\n              });\r\n              Object.keys(heights).forEach(function (id) {\r\n                  heights[id] = maxHeight;\r\n              });\r\n              margin = (areaLength - maxLength * targetIds.length) / 2;\r\n              if (margin < posMin) {\r\n                  totalLength = 0;\r\n                  step = 0;\r\n                  targetIds.forEach(function (id) {\r\n                      updateValues(id);\r\n                  });\r\n              }\r\n              else {\r\n                  updateValues(id, true);\r\n              }\r\n          }\r\n          else {\r\n              updateValues(id);\r\n          }\r\n      }\r\n      if ($$.isLegendInset) {\r\n          step = config.legend_inset_step\r\n              ? config.legend_inset_step\r\n              : targetIds.length;\r\n          $$.updateLegendStep(step);\r\n      }\r\n      if ($$.isLegendRight) {\r\n          xForLegend = function (id) {\r\n              return maxWidth * steps[id];\r\n          };\r\n          yForLegend = function (id) {\r\n              return margins[steps[id]] + offsets[id];\r\n          };\r\n      }\r\n      else if ($$.isLegendInset) {\r\n          xForLegend = function (id) {\r\n              return maxWidth * steps[id] + 10;\r\n          };\r\n          yForLegend = function (id) {\r\n              return margins[steps[id]] + offsets[id];\r\n          };\r\n      }\r\n      else {\r\n          xForLegend = function (id) {\r\n              return margins[steps[id]] + offsets[id];\r\n          };\r\n          yForLegend = function (id) {\r\n              return maxHeight * steps[id];\r\n          };\r\n      }\r\n      xForLegendText = function (id, i) {\r\n          return xForLegend(id, i) + 4 + config.legend_item_tile_width;\r\n      };\r\n      yForLegendText = function (id, i) {\r\n          return yForLegend(id, i) + 9;\r\n      };\r\n      xForLegendRect = function (id, i) {\r\n          return xForLegend(id, i);\r\n      };\r\n      yForLegendRect = function (id, i) {\r\n          return yForLegend(id, i) - 5;\r\n      };\r\n      x1ForLegendTile = function (id, i) {\r\n          return xForLegend(id, i) - 2;\r\n      };\r\n      x2ForLegendTile = function (id, i) {\r\n          return xForLegend(id, i) - 2 + config.legend_item_tile_width;\r\n      };\r\n      yForLegendTile = function (id, i) {\r\n          return yForLegend(id, i) + 4;\r\n      };\r\n      // Define g for legend area\r\n      l = $$.legend\r\n          .selectAll('.' + CLASS.legendItem)\r\n          .data(targetIds)\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', function (id) {\r\n          return $$.generateClass(CLASS.legendItem, id);\r\n      })\r\n          .style('visibility', function (id) {\r\n          return $$.isLegendToShow(id) ? 'visible' : 'hidden';\r\n      })\r\n          .style('cursor', function () {\r\n          return config.interaction_enabled ? 'pointer' : 'auto';\r\n      })\r\n          .on('click', config.interaction_enabled\r\n          ? function (id) {\r\n              if (config.legend_item_onclick) {\r\n                  config.legend_item_onclick.call($$, id);\r\n              }\r\n              else {\r\n                  if ($$.d3.event.altKey) {\r\n                      $$.api.hide();\r\n                      $$.api.show(id);\r\n                  }\r\n                  else {\r\n                      $$.api.toggle(id);\r\n                      $$.isTargetToShow(id) ? $$.api.focus(id) : $$.api.revert();\r\n                  }\r\n              }\r\n          }\r\n          : null)\r\n          .on('mouseover', config.interaction_enabled\r\n          ? function (id) {\r\n              if (config.legend_item_onmouseover) {\r\n                  config.legend_item_onmouseover.call($$, id);\r\n              }\r\n              else {\r\n                  $$.d3.select(this).classed(CLASS.legendItemFocused, true);\r\n                  if (!$$.transiting && $$.isTargetToShow(id)) {\r\n                      $$.api.focus(id);\r\n                  }\r\n              }\r\n          }\r\n          : null)\r\n          .on('mouseout', config.interaction_enabled\r\n          ? function (id) {\r\n              if (config.legend_item_onmouseout) {\r\n                  config.legend_item_onmouseout.call($$, id);\r\n              }\r\n              else {\r\n                  $$.d3.select(this).classed(CLASS.legendItemFocused, false);\r\n                  $$.api.revert();\r\n              }\r\n          }\r\n          : null);\r\n      l.append('text')\r\n          .text(function (id) {\r\n          return isDefined(config.data_names[id]) ? config.data_names[id] : id;\r\n      })\r\n          .each(function (id, i) {\r\n          updatePositions(this, id, i);\r\n      })\r\n          .style('pointer-events', 'none')\r\n          .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200)\r\n          .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);\r\n      l.append('rect')\r\n          .attr('class', CLASS.legendItemEvent)\r\n          .style('fill-opacity', 0)\r\n          .attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200)\r\n          .attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);\r\n      l.append('line')\r\n          .attr('class', CLASS.legendItemTile)\r\n          .style('stroke', $$.color)\r\n          .style('pointer-events', 'none')\r\n          .attr('x1', $$.isLegendRight || $$.isLegendInset ? x1ForLegendTile : -200)\r\n          .attr('y1', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile)\r\n          .attr('x2', $$.isLegendRight || $$.isLegendInset ? x2ForLegendTile : -200)\r\n          .attr('y2', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile)\r\n          .attr('stroke-width', config.legend_item_tile_height);\r\n      // Set background for inset legend\r\n      background = $$.legend.select('.' + CLASS.legendBackground + ' rect');\r\n      if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {\r\n          background = $$.legend\r\n              .insert('g', '.' + CLASS.legendItem)\r\n              .attr('class', CLASS.legendBackground)\r\n              .append('rect');\r\n      }\r\n      texts = $$.legend\r\n          .selectAll('text')\r\n          .data(targetIds)\r\n          .text(function (id) {\r\n          return isDefined(config.data_names[id]) ? config.data_names[id] : id;\r\n      }) // MEMO: needed for update\r\n          .each(function (id, i) {\r\n          updatePositions(this, id, i);\r\n      });\r\n      (withTransition ? texts.transition() : texts)\r\n          .attr('x', xForLegendText)\r\n          .attr('y', yForLegendText);\r\n      rects = $$.legend.selectAll('rect.' + CLASS.legendItemEvent).data(targetIds);\r\n      (withTransition ? rects.transition() : rects)\r\n          .attr('width', function (id) {\r\n          return widths[id];\r\n      })\r\n          .attr('height', function (id) {\r\n          return heights[id];\r\n      })\r\n          .attr('x', xForLegendRect)\r\n          .attr('y', yForLegendRect);\r\n      tiles = $$.legend.selectAll('line.' + CLASS.legendItemTile).data(targetIds);\r\n      (withTransition ? tiles.transition() : tiles)\r\n          .style('stroke', $$.levelColor\r\n          ? function (id) {\r\n              return $$.levelColor($$.cache[id].values.reduce(function (total, item) {\r\n                  return total + item.value;\r\n              }, 0));\r\n          }\r\n          : $$.color)\r\n          .attr('x1', x1ForLegendTile)\r\n          .attr('y1', yForLegendTile)\r\n          .attr('x2', x2ForLegendTile)\r\n          .attr('y2', yForLegendTile);\r\n      if (background) {\r\n          (withTransition ? background.transition() : background)\r\n              .attr('height', $$.getLegendHeight() - 12)\r\n              .attr('width', maxWidth * (step + 1) + 10);\r\n      }\r\n      // toggle legend state\r\n      $$.legend\r\n          .selectAll('.' + CLASS.legendItem)\r\n          .classed(CLASS.legendItemHidden, function (id) {\r\n          return !$$.isTargetToShow(id);\r\n      });\r\n      // Update all to reflect change of legend\r\n      $$.updateLegendItemWidth(maxWidth);\r\n      $$.updateLegendItemHeight(maxHeight);\r\n      $$.updateLegendStep(step);\r\n      // Update size and scale\r\n      $$.updateSizes();\r\n      $$.updateScales();\r\n      $$.updateSvgSize();\r\n      // Update g positions\r\n      $$.transformAll(withTransitionForTransform, transitions);\r\n      $$.legendHasRendered = true;\r\n  };\n\n  ChartInternal.prototype.initRegion = function () {\r\n      var $$ = this;\r\n      $$.region = $$.main\r\n          .append('g')\r\n          .attr('clip-path', $$.clipPath)\r\n          .attr('class', CLASS.regions);\r\n  };\r\n  ChartInternal.prototype.updateRegion = function (duration) {\r\n      var $$ = this, config = $$.config;\r\n      // hide if arc type\r\n      $$.region.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');\r\n      var mainRegion = $$.main\r\n          .select('.' + CLASS.regions)\r\n          .selectAll('.' + CLASS.region)\r\n          .data(config.regions);\r\n      var g = mainRegion.enter().append('g');\r\n      g.append('rect')\r\n          .attr('x', $$.regionX.bind($$))\r\n          .attr('y', $$.regionY.bind($$))\r\n          .attr('width', $$.regionWidth.bind($$))\r\n          .attr('height', $$.regionHeight.bind($$))\r\n          .style('fill-opacity', function (d) {\r\n          return isValue(d.opacity) ? d.opacity : 0.1;\r\n      });\r\n      g.append('text').text($$.labelRegion.bind($$));\r\n      $$.mainRegion = g.merge(mainRegion).attr('class', $$.classRegion.bind($$));\r\n      mainRegion\r\n          .exit()\r\n          .transition()\r\n          .duration(duration)\r\n          .style('opacity', 0)\r\n          .remove();\r\n  };\r\n  ChartInternal.prototype.redrawRegion = function (withTransition, transition) {\r\n      var $$ = this, regions = $$.mainRegion, regionLabels = $$.mainRegion.selectAll('text');\r\n      return [\r\n          (withTransition ? regions.transition(transition) : regions)\r\n              .attr('x', $$.regionX.bind($$))\r\n              .attr('y', $$.regionY.bind($$))\r\n              .attr('width', $$.regionWidth.bind($$))\r\n              .attr('height', $$.regionHeight.bind($$))\r\n              .style('fill-opacity', function (d) {\r\n              return isValue(d.opacity) ? d.opacity : 0.1;\r\n          }),\r\n          (withTransition ? regionLabels.transition(transition) : regionLabels)\r\n              .attr('x', $$.labelOffsetX.bind($$))\r\n              .attr('y', $$.labelOffsetY.bind($$))\r\n              .attr('transform', $$.labelTransform.bind($$))\r\n              .attr('style', 'text-anchor: left;')\r\n      ];\r\n  };\r\n  ChartInternal.prototype.regionX = function (d) {\r\n      var $$ = this, config = $$.config, xPos, yScale = d.axis === 'y' ? $$.y : $$.y2;\r\n      if (d.axis === 'y' || d.axis === 'y2') {\r\n          xPos = config.axis_rotated ? ('start' in d ? yScale(d.start) : 0) : 0;\r\n      }\r\n      else {\r\n          xPos = config.axis_rotated\r\n              ? 0\r\n              : 'start' in d\r\n                  ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start)\r\n                  : 0;\r\n      }\r\n      return xPos;\r\n  };\r\n  ChartInternal.prototype.regionY = function (d) {\r\n      var $$ = this, config = $$.config, yPos, yScale = d.axis === 'y' ? $$.y : $$.y2;\r\n      if (d.axis === 'y' || d.axis === 'y2') {\r\n          yPos = config.axis_rotated ? 0 : 'end' in d ? yScale(d.end) : 0;\r\n      }\r\n      else {\r\n          yPos = config.axis_rotated\r\n              ? 'start' in d\r\n                  ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start)\r\n                  : 0\r\n              : 0;\r\n      }\r\n      return yPos;\r\n  };\r\n  ChartInternal.prototype.regionWidth = function (d) {\r\n      var $$ = this, config = $$.config, start = $$.regionX(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;\r\n      if (d.axis === 'y' || d.axis === 'y2') {\r\n          end = config.axis_rotated\r\n              ? 'end' in d\r\n                  ? yScale(d.end)\r\n                  : $$.width\r\n              : $$.width;\r\n      }\r\n      else {\r\n          end = config.axis_rotated\r\n              ? $$.width\r\n              : 'end' in d\r\n                  ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end)\r\n                  : $$.width;\r\n      }\r\n      return end < start ? 0 : end - start;\r\n  };\r\n  ChartInternal.prototype.regionHeight = function (d) {\r\n      var $$ = this, config = $$.config, start = this.regionY(d), end, yScale = d.axis === 'y' ? $$.y : $$.y2;\r\n      if (d.axis === 'y' || d.axis === 'y2') {\r\n          end = config.axis_rotated\r\n              ? $$.height\r\n              : 'start' in d\r\n                  ? yScale(d.start)\r\n                  : $$.height;\r\n      }\r\n      else {\r\n          end = config.axis_rotated\r\n              ? 'end' in d\r\n                  ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end)\r\n                  : $$.height\r\n              : $$.height;\r\n      }\r\n      return end < start ? 0 : end - start;\r\n  };\r\n  ChartInternal.prototype.isRegionOnX = function (d) {\r\n      return !d.axis || d.axis === 'x';\r\n  };\r\n  ChartInternal.prototype.labelRegion = function (d) {\r\n      return 'label' in d ? d.label : '';\r\n  };\r\n  ChartInternal.prototype.labelTransform = function (d) {\r\n      return 'vertical' in d && d.vertical ? 'rotate(90)' : '';\r\n  };\r\n  ChartInternal.prototype.labelOffsetX = function (d) {\r\n      var paddingX = 'paddingX' in d ? d.paddingX : 3;\r\n      var paddingY = 'paddingY' in d ? d.paddingY : 3;\r\n      return 'vertical' in d && d.vertical\r\n          ? this.regionY(d) + paddingY\r\n          : this.regionX(d) + paddingX;\r\n  };\r\n  ChartInternal.prototype.labelOffsetY = function (d) {\r\n      var paddingX = 'paddingX' in d ? d.paddingX : 3;\r\n      var paddingY = 'paddingY' in d ? d.paddingY : 3;\r\n      return 'vertical' in d && d.vertical\r\n          ? -(this.regionX(d) + paddingX)\r\n          : this.regionY(d) + 10 + paddingY;\r\n  };\n\n  function c3LogScale(d3, linearScale, logScale) {\r\n      var PROJECTION = [0.01, 10];\r\n      if (!linearScale) {\r\n          linearScale = d3.scaleLinear();\r\n          linearScale.range(PROJECTION);\r\n      }\r\n      if (!logScale) {\r\n          logScale = d3.scaleLog();\r\n          logScale.domain(PROJECTION);\r\n          logScale.nice();\r\n      }\r\n      // copied from https://github.com/compute-io/logspace\r\n      function logspace(a, b, len) {\r\n          var arr, end, tmp, d;\r\n          if (arguments.length < 3) {\r\n              len = 10;\r\n          }\r\n          else {\r\n              if (len === 0) {\r\n                  return [];\r\n              }\r\n          }\r\n          // Calculate the increment:\r\n          end = len - 1;\r\n          d = (b - a) / end;\r\n          // Build the output array...\r\n          arr = new Array(len);\r\n          tmp = a;\r\n          arr[0] = Math.pow(10, tmp);\r\n          for (var i = 1; i < end; i++) {\r\n              tmp += d;\r\n              arr[i] = Math.pow(10, tmp);\r\n          }\r\n          arr[end] = Math.pow(10, b);\r\n          return arr;\r\n      }\r\n      function scale(x) {\r\n          return logScale(linearScale(x));\r\n      }\r\n      scale.domain = function (x) {\r\n          if (!arguments.length) {\r\n              return linearScale.domain();\r\n          }\r\n          linearScale.domain(x);\r\n          return scale;\r\n      };\r\n      scale.range = function (x) {\r\n          if (!arguments.length) {\r\n              return logScale.range();\r\n          }\r\n          logScale.range(x);\r\n          return scale;\r\n      };\r\n      scale.ticks = function (m) {\r\n          return logspace(-2, 1, m || 10).map(function (v) {\r\n              return linearScale.invert(v);\r\n          });\r\n      };\r\n      scale.copy = function () {\r\n          return c3LogScale(d3, linearScale.copy(), logScale.copy());\r\n      };\r\n      return scale;\r\n  }\r\n  ChartInternal.prototype.getScale = function (min, max, forTimeseries) {\r\n      return (forTimeseries ? this.d3.scaleTime() : this.d3.scaleLinear()).range([\r\n          min,\r\n          max\r\n      ]);\r\n  };\r\n  ChartInternal.prototype.getX = function (min, max, domain, offset) {\r\n      var $$ = this, scale = $$.getScale(min, max, $$.isTimeSeries()), _scale = domain ? scale.domain(domain) : scale, key;\r\n      // Define customized scale if categorized axis\r\n      if ($$.isCategorized()) {\r\n          offset =\r\n              offset ||\r\n                  function () {\r\n                      return 0;\r\n                  };\r\n          scale = function (d, raw) {\r\n              var v = _scale(d) + offset(d);\r\n              return raw ? v : Math.ceil(v);\r\n          };\r\n      }\r\n      else {\r\n          scale = function (d, raw) {\r\n              var v = _scale(d);\r\n              return raw ? v : Math.ceil(v);\r\n          };\r\n      }\r\n      // define functions\r\n      for (key in _scale) {\r\n          scale[key] = _scale[key];\r\n      }\r\n      scale.orgDomain = function () {\r\n          return _scale.domain();\r\n      };\r\n      // define custom domain() for categorized axis\r\n      if ($$.isCategorized()) {\r\n          scale.domain = function (domain) {\r\n              if (!arguments.length) {\r\n                  domain = this.orgDomain();\r\n                  return [domain[0], domain[1] + 1];\r\n              }\r\n              _scale.domain(domain);\r\n              return scale;\r\n          };\r\n      }\r\n      return scale;\r\n  };\r\n  /**\r\n   * Creates and configures a D3 scale instance for the given type.\r\n   *\r\n   * By defaults it returns a Linear scale.\r\n   *\r\n   * @param {String} type Type of d3-scale to create. Type can be 'linear', 'time', 'timeseries' or 'log'.\r\n   * @param {Array} domain The scale domain such as [from, to]\r\n   * @param {Array} range The scale's range such as [from, to]\r\n   *\r\n   * @return A d3-scale instance\r\n   */\r\n  ChartInternal.prototype.getY = function (type, domain, range) {\r\n      var scale;\r\n      if (type === 'timeseries' || type === 'time') {\r\n          scale = this.d3.scaleTime();\r\n      }\r\n      else if (type === 'log') {\r\n          scale = c3LogScale(this.d3);\r\n      }\r\n      else if (type === 'linear' || type === undefined) {\r\n          scale = this.d3.scaleLinear();\r\n      }\r\n      else {\r\n          throw new Error(\"Invalid Y axis type: \\\"\" + type + \"\\\"\");\r\n      }\r\n      if (domain) {\r\n          scale.domain(domain);\r\n      }\r\n      if (range) {\r\n          scale.range(range);\r\n      }\r\n      return scale;\r\n  };\r\n  ChartInternal.prototype.getYScale = function (id) {\r\n      return this.axis.getId(id) === 'y2' ? this.y2 : this.y;\r\n  };\r\n  ChartInternal.prototype.getSubYScale = function (id) {\r\n      return this.axis.getId(id) === 'y2' ? this.subY2 : this.subY;\r\n  };\r\n  ChartInternal.prototype.updateScales = function () {\r\n      var $$ = this, config = $$.config, forInit = !$$.x;\r\n      // update edges\r\n      $$.xMin = config.axis_rotated ? 1 : 0;\r\n      $$.xMax = config.axis_rotated ? $$.height : $$.width;\r\n      $$.yMin = config.axis_rotated ? 0 : $$.height;\r\n      $$.yMax = config.axis_rotated ? $$.width : 1;\r\n      $$.subXMin = $$.xMin;\r\n      $$.subXMax = $$.xMax;\r\n      $$.subYMin = config.axis_rotated ? 0 : $$.height2;\r\n      $$.subYMax = config.axis_rotated ? $$.width2 : 1;\r\n      // update scales\r\n      $$.x = $$.getX($$.xMin, $$.xMax, forInit ? undefined : $$.x.orgDomain(), function () {\r\n          return $$.xAxis.tickOffset();\r\n      });\r\n      $$.y = $$.getY(config.axis_y_type, forInit ? config.axis_y_default : $$.y.domain(), [$$.yMin, $$.yMax]);\r\n      $$.y2 = $$.getY(config.axis_y2_type, forInit ? config.axis_y2_default : $$.y2.domain(), [$$.yMin, $$.yMax]);\r\n      $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function (d) {\r\n          return d % 1 ? 0 : $$.subXAxis.tickOffset();\r\n      });\r\n      $$.subY = $$.getY(config.axis_y_type, forInit ? config.axis_y_default : $$.subY.domain(), [$$.subYMin, $$.subYMax]);\r\n      $$.subY2 = $$.getY(config.axis_y2_type, forInit ? config.axis_y2_default : $$.subY2.domain(), [$$.subYMin, $$.subYMax]);\r\n      // update axes\r\n      $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();\r\n      $$.xAxisTickValues = $$.axis.getXAxisTickValues();\r\n      $$.yAxisTickValues = $$.axis.getYAxisTickValues();\r\n      $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();\r\n      $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);\r\n      $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);\r\n      $$.yAxis = $$.axis.getYAxis('y', $$.y, $$.yOrient, $$.yAxisTickValues, config.axis_y_tick_outer);\r\n      $$.y2Axis = $$.axis.getYAxis('y2', $$.y2, $$.y2Orient, $$.y2AxisTickValues, config.axis_y2_tick_outer);\r\n      // Set initialized scales to brush and zoom\r\n      if (!forInit) {\r\n          if ($$.brush) {\r\n              $$.brush.updateScale($$.subX);\r\n          }\r\n      }\r\n      // update for arc\r\n      if ($$.updateArc) {\r\n          $$.updateArc();\r\n      }\r\n  };\n\n  ChartInternal.prototype.selectPoint = function (target, d, i) {\r\n      var $$ = this, config = $$.config, cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$), cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$), r = $$.pointSelectR.bind($$);\r\n      config.data_onselected.call($$.api, d, target.node());\r\n      // add selected-circle on low layer g\r\n      $$.main\r\n          .select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id))\r\n          .selectAll('.' + CLASS.selectedCircle + '-' + i)\r\n          .data([d])\r\n          .enter()\r\n          .append('circle')\r\n          .attr('class', function () {\r\n          return $$.generateClass(CLASS.selectedCircle, i);\r\n      })\r\n          .attr('cx', cx)\r\n          .attr('cy', cy)\r\n          .attr('stroke', function () {\r\n          return $$.color(d);\r\n      })\r\n          .attr('r', function (d) {\r\n          return $$.pointSelectR(d) * 1.4;\r\n      })\r\n          .transition()\r\n          .duration(100)\r\n          .attr('r', r);\r\n  };\r\n  ChartInternal.prototype.unselectPoint = function (target, d, i) {\r\n      var $$ = this;\r\n      $$.config.data_onunselected.call($$.api, d, target.node());\r\n      // remove selected-circle from low layer g\r\n      $$.main\r\n          .select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id))\r\n          .selectAll('.' + CLASS.selectedCircle + '-' + i)\r\n          .transition()\r\n          .duration(100)\r\n          .attr('r', 0)\r\n          .remove();\r\n  };\r\n  ChartInternal.prototype.togglePoint = function (selected, target, d, i) {\r\n      selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);\r\n  };\r\n  ChartInternal.prototype.selectPath = function (target, d) {\r\n      var $$ = this;\r\n      $$.config.data_onselected.call($$, d, target.node());\r\n      if ($$.config.interaction_brighten) {\r\n          target\r\n              .transition()\r\n              .duration(100)\r\n              .style('fill', function () {\r\n              return $$.d3.rgb($$.color(d)).brighter(0.75);\r\n          });\r\n      }\r\n  };\r\n  ChartInternal.prototype.unselectPath = function (target, d) {\r\n      var $$ = this;\r\n      $$.config.data_onunselected.call($$, d, target.node());\r\n      if ($$.config.interaction_brighten) {\r\n          target\r\n              .transition()\r\n              .duration(100)\r\n              .style('fill', function () {\r\n              return $$.color(d);\r\n          });\r\n      }\r\n  };\r\n  ChartInternal.prototype.togglePath = function (selected, target, d, i) {\r\n      selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);\r\n  };\r\n  ChartInternal.prototype.getToggle = function (that, d) {\r\n      var $$ = this, toggle;\r\n      if (that.nodeName === 'circle') {\r\n          if ($$.isStepType(d)) {\r\n              // circle is hidden in step chart, so treat as within the click area\r\n              toggle = function () { }; // TODO: how to select step chart?\r\n          }\r\n          else {\r\n              toggle = $$.togglePoint;\r\n          }\r\n      }\r\n      else if (that.nodeName === 'path') {\r\n          toggle = $$.togglePath;\r\n      }\r\n      return toggle;\r\n  };\r\n  ChartInternal.prototype.toggleShape = function (that, d, i) {\r\n      var $$ = this, d3 = $$.d3, config = $$.config, shape = d3.select(that), isSelected = shape.classed(CLASS.SELECTED), toggle = $$.getToggle(that, d).bind($$);\r\n      if (config.data_selection_enabled && config.data_selection_isselectable(d)) {\r\n          if (!config.data_selection_multiple) {\r\n              $$.main\r\n                  .selectAll('.' +\r\n                  CLASS.shapes +\r\n                  (config.data_selection_grouped\r\n                      ? $$.getTargetSelectorSuffix(d.id)\r\n                      : ''))\r\n                  .selectAll('.' + CLASS.shape)\r\n                  .each(function (d, i) {\r\n                  var shape = d3.select(this);\r\n                  if (shape.classed(CLASS.SELECTED)) {\r\n                      toggle(false, shape.classed(CLASS.SELECTED, false), d, i);\r\n                  }\r\n              });\r\n          }\r\n          shape.classed(CLASS.SELECTED, !isSelected);\r\n          toggle(!isSelected, shape, d, i);\r\n      }\r\n  };\n\n  ChartInternal.prototype.initBar = function () {\r\n      var $$ = this;\r\n      $$.main\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.chartBars);\r\n  };\r\n  ChartInternal.prototype.updateTargetsForBar = function (targets) {\r\n      var $$ = this, config = $$.config, mainBars, mainBarEnter, classChartBar = $$.classChartBar.bind($$), classBars = $$.classBars.bind($$), classFocus = $$.classFocus.bind($$);\r\n      mainBars = $$.main\r\n          .select('.' + CLASS.chartBars)\r\n          .selectAll('.' + CLASS.chartBar)\r\n          .data(targets)\r\n          .attr('class', function (d) {\r\n          return classChartBar(d) + classFocus(d);\r\n      });\r\n      mainBarEnter = mainBars\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', classChartBar)\r\n          .style('pointer-events', 'none');\r\n      // Bars for each data\r\n      mainBarEnter\r\n          .append('g')\r\n          .attr('class', classBars)\r\n          .style('cursor', function (d) {\r\n          return config.data_selection_isselectable(d) ? 'pointer' : null;\r\n      });\r\n  };\r\n  ChartInternal.prototype.updateBar = function (durationForExit) {\r\n      var $$ = this, barData = $$.barData.bind($$), classBar = $$.classBar.bind($$), initialOpacity = $$.initialOpacity.bind($$), color = function (d) {\r\n          return $$.color(d.id);\r\n      };\r\n      var mainBar = $$.main\r\n          .selectAll('.' + CLASS.bars)\r\n          .selectAll('.' + CLASS.bar)\r\n          .data(barData);\r\n      var mainBarEnter = mainBar\r\n          .enter()\r\n          .append('path')\r\n          .attr('class', classBar)\r\n          .style('stroke', color)\r\n          .style('fill', color);\r\n      $$.mainBar = mainBarEnter.merge(mainBar).style('opacity', initialOpacity);\r\n      mainBar\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('opacity', 0);\r\n  };\r\n  ChartInternal.prototype.redrawBar = function (drawBar, withTransition, transition) {\r\n      var $$ = this;\r\n      return [\r\n          (withTransition ? this.mainBar.transition(transition) : this.mainBar)\r\n              .attr('d', drawBar)\r\n              .style('stroke', this.color)\r\n              .style('fill', this.color)\r\n              .style('opacity', function (d) { return ($$.isTargetToShow(d.id) ? 1 : 0); })\r\n      ];\r\n  };\r\n  ChartInternal.prototype.getBarW = function (axis, barTargetsNum) {\r\n      var $$ = this, config = $$.config, w = typeof config.bar_width === 'number'\r\n          ? config.bar_width\r\n          : barTargetsNum\r\n              ? (axis.tickInterval() * config.bar_width_ratio) / barTargetsNum\r\n              : 0;\r\n      return config.bar_width_max && w > config.bar_width_max\r\n          ? config.bar_width_max\r\n          : w;\r\n  };\r\n  ChartInternal.prototype.getBars = function (i, id) {\r\n      var $$ = this;\r\n      return (id\r\n          ? $$.main.selectAll('.' + CLASS.bars + $$.getTargetSelectorSuffix(id))\r\n          : $$.main).selectAll('.' + CLASS.bar + (isValue(i) ? '-' + i : ''));\r\n  };\r\n  ChartInternal.prototype.expandBars = function (i, id, reset) {\r\n      var $$ = this;\r\n      if (reset) {\r\n          $$.unexpandBars();\r\n      }\r\n      $$.getBars(i, id).classed(CLASS.EXPANDED, true);\r\n  };\r\n  ChartInternal.prototype.unexpandBars = function (i) {\r\n      var $$ = this;\r\n      $$.getBars(i).classed(CLASS.EXPANDED, false);\r\n  };\r\n  ChartInternal.prototype.generateDrawBar = function (barIndices, isSub) {\r\n      var $$ = this, config = $$.config, getPoints = $$.generateGetBarPoints(barIndices, isSub);\r\n      return function (d, i) {\r\n          // 4 points that make a bar\r\n          var points = getPoints(d, i);\r\n          // switch points if axis is rotated, not applicable for sub chart\r\n          var indexX = config.axis_rotated ? 1 : 0;\r\n          var indexY = config.axis_rotated ? 0 : 1;\r\n          var path = 'M ' +\r\n              points[0][indexX] +\r\n              ',' +\r\n              points[0][indexY] +\r\n              ' ' +\r\n              'L' +\r\n              points[1][indexX] +\r\n              ',' +\r\n              points[1][indexY] +\r\n              ' ' +\r\n              'L' +\r\n              points[2][indexX] +\r\n              ',' +\r\n              points[2][indexY] +\r\n              ' ' +\r\n              'L' +\r\n              points[3][indexX] +\r\n              ',' +\r\n              points[3][indexY] +\r\n              ' ' +\r\n              'z';\r\n          return path;\r\n      };\r\n  };\r\n  ChartInternal.prototype.generateGetBarPoints = function (barIndices, isSub) {\r\n      var $$ = this, axis = isSub ? $$.subXAxis : $$.xAxis, barTargetsNum = barIndices.__max__ + 1, barW = $$.getBarW(axis, barTargetsNum), barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub), barY = $$.getShapeY(!!isSub), barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub), barSpaceOffset = barW * ($$.config.bar_space / 2), yScale = isSub ? $$.getSubYScale : $$.getYScale;\r\n      return function (d, i) {\r\n          var y0 = yScale.call($$, d.id)(0), offset = barOffset(d, i) || y0, // offset is for stacked bar chart\r\n          posX = barX(d), posY = barY(d);\r\n          // fix posY not to overflow opposite quadrant\r\n          if ($$.config.axis_rotated) {\r\n              if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) {\r\n                  posY = y0;\r\n              }\r\n          }\r\n          posY -= y0 - offset;\r\n          // 4 points that make a bar\r\n          return [\r\n              [posX + barSpaceOffset, offset],\r\n              [posX + barSpaceOffset, posY],\r\n              [posX + barW - barSpaceOffset, posY],\r\n              [posX + barW - barSpaceOffset, offset]\r\n          ];\r\n      };\r\n  };\r\n  /**\r\n   * Returns whether the data point is within the given bar shape.\r\n   *\r\n   * @param mouse\r\n   * @param barShape\r\n   * @return {boolean}\r\n   */\r\n  ChartInternal.prototype.isWithinBar = function (mouse, barShape) {\r\n      return isWithinBox(mouse, getBBox(barShape), 2);\r\n  };\n\n  ChartInternal.prototype.getShapeIndices = function (typeFilter) {\r\n      var $$ = this, config = $$.config, indices = {}, i = 0, j, k;\r\n      $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function (d) {\r\n          for (j = 0; j < config.data_groups.length; j++) {\r\n              if (config.data_groups[j].indexOf(d.id) < 0) {\r\n                  continue;\r\n              }\r\n              for (k = 0; k < config.data_groups[j].length; k++) {\r\n                  if (config.data_groups[j][k] in indices) {\r\n                      indices[d.id] = indices[config.data_groups[j][k]];\r\n                      break;\r\n                  }\r\n              }\r\n          }\r\n          if (isUndefined(indices[d.id])) {\r\n              indices[d.id] = i++;\r\n          }\r\n      });\r\n      indices.__max__ = i - 1;\r\n      return indices;\r\n  };\r\n  ChartInternal.prototype.getShapeX = function (offset, targetsNum, indices, isSub) {\r\n      var $$ = this, scale = isSub ? $$.subX : $$.x;\r\n      return function (d) {\r\n          var index = d.id in indices ? indices[d.id] : 0;\r\n          return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index) : 0;\r\n      };\r\n  };\r\n  ChartInternal.prototype.getShapeY = function (isSub) {\r\n      var $$ = this;\r\n      return function (d) {\r\n          var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);\r\n          return scale($$.isTargetNormalized(d.id) ? $$.getRatio('index', d, true) : d.value);\r\n      };\r\n  };\r\n  ChartInternal.prototype.getShapeOffset = function (typeFilter, indices, isSub) {\r\n      var $$ = this, targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))), targetIds = targets.map(function (t) {\r\n          return t.id;\r\n      });\r\n      return function (d, i) {\r\n          var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id), y0 = scale(0), offset = y0;\r\n          targets.forEach(function (t) {\r\n              var rowValues = $$.isStepType(d)\r\n                  ? $$.convertValuesToStep(t.values)\r\n                  : t.values;\r\n              var isTargetNormalized = $$.isTargetNormalized(d.id);\r\n              var values = rowValues.map(function (v) {\r\n                  return isTargetNormalized ? $$.getRatio('index', v, true) : v.value;\r\n              });\r\n              if (t.id === d.id || indices[t.id] !== indices[d.id]) {\r\n                  return;\r\n              }\r\n              if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {\r\n                  // check if the x values line up\r\n                  if (isUndefined(rowValues[i]) || +rowValues[i].x !== +d.x) {\r\n                      // \"+\" for timeseries\r\n                      // if not, try to find the value that does line up\r\n                      i = -1;\r\n                      rowValues.forEach(function (v, j) {\r\n                          var x1 = v.x.constructor === Date ? +v.x : v.x;\r\n                          var x2 = d.x.constructor === Date ? +d.x : d.x;\r\n                          if (x1 === x2) {\r\n                              i = j;\r\n                          }\r\n                      });\r\n                  }\r\n                  if (i in rowValues && rowValues[i].value * d.value >= 0) {\r\n                      offset += scale(values[i]) - y0;\r\n                  }\r\n              }\r\n          });\r\n          return offset;\r\n      };\r\n  };\r\n  ChartInternal.prototype.isWithinShape = function (that, d) {\r\n      var $$ = this, shape = $$.d3.select(that), isWithin;\r\n      if (!$$.isTargetToShow(d.id)) {\r\n          isWithin = false;\r\n      }\r\n      else if (that.nodeName === 'circle') {\r\n          isWithin = $$.isStepType(d)\r\n              ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value))\r\n              : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);\r\n      }\r\n      else if (that.nodeName === 'path') {\r\n          isWithin = shape.classed(CLASS.bar)\r\n              ? $$.isWithinBar($$.d3.mouse(that), that)\r\n              : true;\r\n      }\r\n      return isWithin;\r\n  };\r\n  ChartInternal.prototype.getInterpolate = function (d) {\r\n      var $$ = this, d3 = $$.d3, types = {\r\n          linear: d3.curveLinear,\r\n          'linear-closed': d3.curveLinearClosed,\r\n          basis: d3.curveBasis,\r\n          'basis-open': d3.curveBasisOpen,\r\n          'basis-closed': d3.curveBasisClosed,\r\n          bundle: d3.curveBundle,\r\n          cardinal: d3.curveCardinal,\r\n          'cardinal-open': d3.curveCardinalOpen,\r\n          'cardinal-closed': d3.curveCardinalClosed,\r\n          monotone: d3.curveMonotoneX,\r\n          step: d3.curveStep,\r\n          'step-before': d3.curveStepBefore,\r\n          'step-after': d3.curveStepAfter\r\n      }, type;\r\n      if ($$.isSplineType(d)) {\r\n          type = types[$$.config.spline_interpolation_type] || types.cardinal;\r\n      }\r\n      else if ($$.isStepType(d)) {\r\n          type = types[$$.config.line_step_type];\r\n      }\r\n      else {\r\n          type = types.linear;\r\n      }\r\n      return type;\r\n  };\n\n  ChartInternal.prototype.initLine = function () {\r\n      var $$ = this;\r\n      $$.main\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.chartLines);\r\n  };\r\n  ChartInternal.prototype.updateTargetsForLine = function (targets) {\r\n      var $$ = this, config = $$.config, mainLines, mainLineEnter, classChartLine = $$.classChartLine.bind($$), classLines = $$.classLines.bind($$), classAreas = $$.classAreas.bind($$), classCircles = $$.classCircles.bind($$), classFocus = $$.classFocus.bind($$);\r\n      mainLines = $$.main\r\n          .select('.' + CLASS.chartLines)\r\n          .selectAll('.' + CLASS.chartLine)\r\n          .data(targets)\r\n          .attr('class', function (d) {\r\n          return classChartLine(d) + classFocus(d);\r\n      });\r\n      mainLineEnter = mainLines\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', classChartLine)\r\n          .style('opacity', 0)\r\n          .style('pointer-events', 'none');\r\n      // Lines for each data\r\n      mainLineEnter.append('g').attr('class', classLines);\r\n      // Areas\r\n      mainLineEnter.append('g').attr('class', classAreas);\r\n      // Circles for each data point on lines\r\n      mainLineEnter.append('g').attr('class', function (d) {\r\n          return $$.generateClass(CLASS.selectedCircles, d.id);\r\n      });\r\n      mainLineEnter\r\n          .append('g')\r\n          .attr('class', classCircles)\r\n          .style('cursor', function (d) {\r\n          return config.data_selection_isselectable(d) ? 'pointer' : null;\r\n      });\r\n      // Update date for selected circles\r\n      targets.forEach(function (t) {\r\n          $$.main\r\n              .selectAll('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id))\r\n              .selectAll('.' + CLASS.selectedCircle)\r\n              .each(function (d) {\r\n              d.value = t.values[d.index].value;\r\n          });\r\n      });\r\n      // MEMO: can not keep same color...\r\n      //mainLineUpdate.exit().remove();\r\n  };\r\n  ChartInternal.prototype.updateLine = function (durationForExit) {\r\n      var $$ = this;\r\n      var mainLine = $$.main\r\n          .selectAll('.' + CLASS.lines)\r\n          .selectAll('.' + CLASS.line)\r\n          .data($$.lineData.bind($$));\r\n      var mainLineEnter = mainLine\r\n          .enter()\r\n          .append('path')\r\n          .attr('class', $$.classLine.bind($$))\r\n          .style('stroke', $$.color);\r\n      $$.mainLine = mainLineEnter\r\n          .merge(mainLine)\r\n          .style('opacity', $$.initialOpacity.bind($$))\r\n          .style('shape-rendering', function (d) {\r\n          return $$.isStepType(d) ? 'crispEdges' : '';\r\n      })\r\n          .attr('transform', null);\r\n      mainLine\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('opacity', 0);\r\n  };\r\n  ChartInternal.prototype.redrawLine = function (drawLine, withTransition, transition) {\r\n      return [\r\n          (withTransition ? this.mainLine.transition(transition) : this.mainLine)\r\n              .attr('d', drawLine)\r\n              .style('stroke', this.color)\r\n              .style('opacity', 1)\r\n      ];\r\n  };\r\n  ChartInternal.prototype.generateDrawLine = function (lineIndices, isSub) {\r\n      var $$ = this, config = $$.config, line = $$.d3.line(), getPoints = $$.generateGetLinePoints(lineIndices, isSub), yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale, xValue = function (d) {\r\n          return (isSub ? $$.subxx : $$.xx).call($$, d);\r\n      }, yValue = function (d, i) {\r\n          return config.data_groups.length > 0\r\n              ? getPoints(d, i)[0][1]\r\n              : yScaleGetter.call($$, d.id)(d.value);\r\n      };\r\n      line = config.axis_rotated\r\n          ? line.x(yValue).y(xValue)\r\n          : line.x(xValue).y(yValue);\r\n      if (!config.line_connectNull) {\r\n          line = line.defined(function (d) {\r\n              return d.value != null;\r\n          });\r\n      }\r\n      return function (d) {\r\n          var values = config.line_connectNull\r\n              ? $$.filterRemoveNull(d.values)\r\n              : d.values, x = isSub ? $$.subX : $$.x, y = yScaleGetter.call($$, d.id), x0 = 0, y0 = 0, path;\r\n          if ($$.isLineType(d)) {\r\n              if (config.data_regions[d.id]) {\r\n                  path = $$.lineWithRegions(values, x, y, config.data_regions[d.id]);\r\n              }\r\n              else {\r\n                  if ($$.isStepType(d)) {\r\n                      values = $$.convertValuesToStep(values);\r\n                  }\r\n                  path = line.curve($$.getInterpolate(d))(values);\r\n              }\r\n          }\r\n          else {\r\n              if (values[0]) {\r\n                  x0 = x(values[0].x);\r\n                  y0 = y(values[0].value);\r\n              }\r\n              path = config.axis_rotated ? 'M ' + y0 + ' ' + x0 : 'M ' + x0 + ' ' + y0;\r\n          }\r\n          return path ? path : 'M 0 0';\r\n      };\r\n  };\r\n  ChartInternal.prototype.generateGetLinePoints = function (lineIndices, isSub) {\r\n      // partial duplication of generateGetBarPoints\r\n      var $$ = this, config = $$.config, lineTargetsNum = lineIndices.__max__ + 1, x = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub), y = $$.getShapeY(!!isSub), lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub), yScale = isSub ? $$.getSubYScale : $$.getYScale;\r\n      return function (d, i) {\r\n          var y0 = yScale.call($$, d.id)(0), offset = lineOffset(d, i) || y0, // offset is for stacked area chart\r\n          posX = x(d), posY = y(d);\r\n          // fix posY not to overflow opposite quadrant\r\n          if (config.axis_rotated) {\r\n              if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) {\r\n                  posY = y0;\r\n              }\r\n          }\r\n          // 1 point that marks the line position\r\n          return [\r\n              [posX, posY - (y0 - offset)],\r\n              [posX, posY - (y0 - offset)],\r\n              [posX, posY - (y0 - offset)],\r\n              [posX, posY - (y0 - offset)] // needed for compatibility\r\n          ];\r\n      };\r\n  };\r\n  ChartInternal.prototype.lineWithRegions = function (d, x, y, _regions) {\r\n      var $$ = this, config = $$.config, prev = -1, i, j, s = 'M', sWithRegion, xp, yp, dx, dy, dd, diff, diffx2, xOffset = $$.isCategorized() ? 0.5 : 0, xValue, yValue, regions = [];\r\n      function isWithinRegions(x, regions) {\r\n          var i;\r\n          for (i = 0; i < regions.length; i++) {\r\n              if (regions[i].start < x && x <= regions[i].end) {\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      }\r\n      // Check start/end of regions\r\n      if (isDefined(_regions)) {\r\n          for (i = 0; i < _regions.length; i++) {\r\n              regions[i] = {};\r\n              if (isUndefined(_regions[i].start)) {\r\n                  regions[i].start = d[0].x;\r\n              }\r\n              else {\r\n                  regions[i].start = $$.isTimeSeries()\r\n                      ? $$.parseDate(_regions[i].start)\r\n                      : _regions[i].start;\r\n              }\r\n              if (isUndefined(_regions[i].end)) {\r\n                  regions[i].end = d[d.length - 1].x;\r\n              }\r\n              else {\r\n                  regions[i].end = $$.isTimeSeries()\r\n                      ? $$.parseDate(_regions[i].end)\r\n                      : _regions[i].end;\r\n              }\r\n          }\r\n      }\r\n      // Set scales\r\n      xValue = config.axis_rotated\r\n          ? function (d) {\r\n              return y(d.value);\r\n          }\r\n          : function (d) {\r\n              return x(d.x);\r\n          };\r\n      yValue = config.axis_rotated\r\n          ? function (d) {\r\n              return x(d.x);\r\n          }\r\n          : function (d) {\r\n              return y(d.value);\r\n          };\r\n      // Define svg generator function for region\r\n      function generateM(points) {\r\n          return ('M' +\r\n              points[0][0] +\r\n              ' ' +\r\n              points[0][1] +\r\n              ' ' +\r\n              points[1][0] +\r\n              ' ' +\r\n              points[1][1]);\r\n      }\r\n      if ($$.isTimeSeries()) {\r\n          sWithRegion = function (d0, d1, j, diff) {\r\n              var x0 = d0.x.getTime(), x_diff = d1.x - d0.x, xv0 = new Date(x0 + x_diff * j), xv1 = new Date(x0 + x_diff * (j + diff)), points;\r\n              if (config.axis_rotated) {\r\n                  points = [\r\n                      [y(yp(j)), x(xv0)],\r\n                      [y(yp(j + diff)), x(xv1)]\r\n                  ];\r\n              }\r\n              else {\r\n                  points = [\r\n                      [x(xv0), y(yp(j))],\r\n                      [x(xv1), y(yp(j + diff))]\r\n                  ];\r\n              }\r\n              return generateM(points);\r\n          };\r\n      }\r\n      else {\r\n          sWithRegion = function (d0, d1, j, diff) {\r\n              var points;\r\n              if (config.axis_rotated) {\r\n                  points = [\r\n                      [y(yp(j), true), x(xp(j))],\r\n                      [y(yp(j + diff), true), x(xp(j + diff))]\r\n                  ];\r\n              }\r\n              else {\r\n                  points = [\r\n                      [x(xp(j), true), y(yp(j))],\r\n                      [x(xp(j + diff), true), y(yp(j + diff))]\r\n                  ];\r\n              }\r\n              return generateM(points);\r\n          };\r\n      }\r\n      // Generate\r\n      for (i = 0; i < d.length; i++) {\r\n          // Draw as normal\r\n          if (isUndefined(regions) || !isWithinRegions(d[i].x, regions)) {\r\n              s += ' ' + xValue(d[i]) + ' ' + yValue(d[i]);\r\n          }\r\n          // Draw with region // TODO: Fix for horizotal charts\r\n          else {\r\n              xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());\r\n              yp = $$.getScale(d[i - 1].value, d[i].value);\r\n              dx = x(d[i].x) - x(d[i - 1].x);\r\n              dy = y(d[i].value) - y(d[i - 1].value);\r\n              dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\r\n              diff = 2 / dd;\r\n              diffx2 = diff * 2;\r\n              for (j = diff; j <= 1; j += diffx2) {\r\n                  s += sWithRegion(d[i - 1], d[i], j, diff);\r\n              }\r\n          }\r\n          prev = d[i].x;\r\n      }\r\n      return s;\r\n  };\r\n  ChartInternal.prototype.updateArea = function (durationForExit) {\r\n      var $$ = this, d3 = $$.d3;\r\n      var mainArea = $$.main\r\n          .selectAll('.' + CLASS.areas)\r\n          .selectAll('.' + CLASS.area)\r\n          .data($$.lineData.bind($$));\r\n      var mainAreaEnter = mainArea\r\n          .enter()\r\n          .append('path')\r\n          .attr('class', $$.classArea.bind($$))\r\n          .style('fill', $$.color)\r\n          .style('opacity', function () {\r\n          $$.orgAreaOpacity = +d3.select(this).style('opacity');\r\n          return 0;\r\n      });\r\n      $$.mainArea = mainAreaEnter\r\n          .merge(mainArea)\r\n          .style('opacity', $$.orgAreaOpacity);\r\n      mainArea\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('opacity', 0);\r\n  };\r\n  ChartInternal.prototype.redrawArea = function (drawArea, withTransition, transition) {\r\n      return [\r\n          (withTransition ? this.mainArea.transition(transition) : this.mainArea)\r\n              .attr('d', drawArea)\r\n              .style('fill', this.color)\r\n              .style('opacity', this.orgAreaOpacity)\r\n      ];\r\n  };\r\n  ChartInternal.prototype.generateDrawArea = function (areaIndices, isSub) {\r\n      var $$ = this, config = $$.config, area = $$.d3.area(), getPoints = $$.generateGetAreaPoints(areaIndices, isSub), yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale, xValue = function (d) {\r\n          return (isSub ? $$.subxx : $$.xx).call($$, d);\r\n      }, value0 = function (d, i) {\r\n          return config.data_groups.length > 0\r\n              ? getPoints(d, i)[0][1]\r\n              : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));\r\n      }, value1 = function (d, i) {\r\n          return config.data_groups.length > 0\r\n              ? getPoints(d, i)[1][1]\r\n              : yScaleGetter.call($$, d.id)(d.value);\r\n      };\r\n      area = config.axis_rotated\r\n          ? area\r\n              .x0(value0)\r\n              .x1(value1)\r\n              .y(xValue)\r\n          : area\r\n              .x(xValue)\r\n              .y0(config.area_above ? 0 : value0)\r\n              .y1(value1);\r\n      if (!config.line_connectNull) {\r\n          area = area.defined(function (d) {\r\n              return d.value !== null;\r\n          });\r\n      }\r\n      return function (d) {\r\n          var values = config.line_connectNull\r\n              ? $$.filterRemoveNull(d.values)\r\n              : d.values, x0 = 0, y0 = 0, path;\r\n          if ($$.isAreaType(d)) {\r\n              if ($$.isStepType(d)) {\r\n                  values = $$.convertValuesToStep(values);\r\n              }\r\n              path = area.curve($$.getInterpolate(d))(values);\r\n          }\r\n          else {\r\n              if (values[0]) {\r\n                  x0 = $$.x(values[0].x);\r\n                  y0 = $$.getYScale(d.id)(values[0].value);\r\n              }\r\n              path = config.axis_rotated ? 'M ' + y0 + ' ' + x0 : 'M ' + x0 + ' ' + y0;\r\n          }\r\n          return path ? path : 'M 0 0';\r\n      };\r\n  };\r\n  ChartInternal.prototype.getAreaBaseValue = function () {\r\n      return 0;\r\n  };\r\n  ChartInternal.prototype.generateGetAreaPoints = function (areaIndices, isSub) {\r\n      // partial duplication of generateGetBarPoints\r\n      var $$ = this, config = $$.config, areaTargetsNum = areaIndices.__max__ + 1, x = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub), y = $$.getShapeY(!!isSub), areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub), yScale = isSub ? $$.getSubYScale : $$.getYScale;\r\n      return function (d, i) {\r\n          var y0 = yScale.call($$, d.id)(0), offset = areaOffset(d, i) || y0, // offset is for stacked area chart\r\n          posX = x(d), posY = y(d);\r\n          // fix posY not to overflow opposite quadrant\r\n          if (config.axis_rotated) {\r\n              if ((0 < d.value && posY < y0) || (d.value < 0 && y0 < posY)) {\r\n                  posY = y0;\r\n              }\r\n          }\r\n          // 1 point that marks the area position\r\n          return [\r\n              [posX, offset],\r\n              [posX, posY - (y0 - offset)],\r\n              [posX, posY - (y0 - offset)],\r\n              [posX, offset] // needed for compatibility\r\n          ];\r\n      };\r\n  };\r\n  ChartInternal.prototype.updateCircle = function (cx, cy) {\r\n      var $$ = this;\r\n      var mainCircle = $$.main\r\n          .selectAll('.' + CLASS.circles)\r\n          .selectAll('.' + CLASS.circle)\r\n          .data($$.lineOrScatterOrStanfordData.bind($$));\r\n      var mainCircleEnter = mainCircle\r\n          .enter()\r\n          .append('circle')\r\n          .attr('shape-rendering', $$.isStanfordGraphType() ? 'crispEdges' : '')\r\n          .attr('class', $$.classCircle.bind($$))\r\n          .attr('cx', cx)\r\n          .attr('cy', cy)\r\n          .attr('r', $$.pointR.bind($$))\r\n          .style('color', $$.isStanfordGraphType() ? $$.getStanfordPointColor.bind($$) : $$.color);\r\n      $$.mainCircle = mainCircleEnter\r\n          .merge(mainCircle)\r\n          .style('opacity', $$.isStanfordGraphType() ? 1 : $$.initialOpacityForCircle.bind($$));\r\n      mainCircle.exit().style('opacity', 0);\r\n  };\r\n  ChartInternal.prototype.redrawCircle = function (cx, cy, withTransition, transition) {\r\n      var $$ = this, selectedCircles = $$.main.selectAll('.' + CLASS.selectedCircle);\r\n      return [\r\n          (withTransition ? $$.mainCircle.transition(transition) : $$.mainCircle)\r\n              .style('opacity', this.opacityForCircle.bind($$))\r\n              .style('color', $$.isStanfordGraphType() ? $$.getStanfordPointColor.bind($$) : $$.color)\r\n              .attr('cx', cx)\r\n              .attr('cy', cy),\r\n          (withTransition ? selectedCircles.transition(transition) : selectedCircles)\r\n              .attr('cx', cx)\r\n              .attr('cy', cy)\r\n      ];\r\n  };\r\n  ChartInternal.prototype.circleX = function (d) {\r\n      return d.x || d.x === 0 ? this.x(d.x) : null;\r\n  };\r\n  ChartInternal.prototype.updateCircleY = function () {\r\n      var $$ = this, lineIndices, getPoints;\r\n      if ($$.config.data_groups.length > 0) {\r\n          (lineIndices = $$.getShapeIndices($$.isLineType)),\r\n              (getPoints = $$.generateGetLinePoints(lineIndices));\r\n          $$.circleY = function (d, i) {\r\n              return getPoints(d, i)[0][1];\r\n          };\r\n      }\r\n      else {\r\n          $$.circleY = function (d) {\r\n              return $$.getYScale(d.id)(d.value);\r\n          };\r\n      }\r\n  };\r\n  ChartInternal.prototype.getCircles = function (i, id) {\r\n      var $$ = this;\r\n      return (id\r\n          ? $$.main.selectAll('.' + CLASS.circles + $$.getTargetSelectorSuffix(id))\r\n          : $$.main).selectAll('.' + CLASS.circle + (isValue(i) ? '-' + i : ''));\r\n  };\r\n  ChartInternal.prototype.expandCircles = function (i, id, reset) {\r\n      var $$ = this, r = $$.pointExpandedR.bind($$);\r\n      if (reset) {\r\n          $$.unexpandCircles();\r\n      }\r\n      $$.getCircles(i, id)\r\n          .classed(CLASS.EXPANDED, true)\r\n          .attr('r', r);\r\n  };\r\n  ChartInternal.prototype.unexpandCircles = function (i) {\r\n      var $$ = this, r = $$.pointR.bind($$);\r\n      $$.getCircles(i)\r\n          .filter(function () {\r\n          return $$.d3.select(this).classed(CLASS.EXPANDED);\r\n      })\r\n          .classed(CLASS.EXPANDED, false)\r\n          .attr('r', r);\r\n  };\r\n  ChartInternal.prototype.pointR = function (d) {\r\n      var $$ = this, config = $$.config;\r\n      return $$.isStepType(d)\r\n          ? 0\r\n          : isFunction(config.point_r)\r\n              ? config.point_r(d)\r\n              : config.point_r;\r\n  };\r\n  ChartInternal.prototype.pointExpandedR = function (d) {\r\n      var $$ = this, config = $$.config;\r\n      if (config.point_focus_expand_enabled) {\r\n          return isFunction(config.point_focus_expand_r)\r\n              ? config.point_focus_expand_r(d)\r\n              : config.point_focus_expand_r\r\n                  ? config.point_focus_expand_r\r\n                  : $$.pointR(d) * 1.75;\r\n      }\r\n      else {\r\n          return $$.pointR(d);\r\n      }\r\n  };\r\n  ChartInternal.prototype.pointSelectR = function (d) {\r\n      var $$ = this, config = $$.config;\r\n      return isFunction(config.point_select_r)\r\n          ? config.point_select_r(d)\r\n          : config.point_select_r\r\n              ? config.point_select_r\r\n              : $$.pointR(d) * 4;\r\n  };\r\n  ChartInternal.prototype.isWithinCircle = function (that, r) {\r\n      var d3 = this.d3, mouse = d3.mouse(that), d3_this = d3.select(that), cx = +d3_this.attr('cx'), cy = +d3_this.attr('cy');\r\n      return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;\r\n  };\r\n  ChartInternal.prototype.isWithinStep = function (that, y) {\r\n      return Math.abs(y - this.d3.mouse(that)[1]) < 30;\r\n  };\n\n  ChartInternal.prototype.getCurrentWidth = function () {\r\n      var $$ = this, config = $$.config;\r\n      return config.size_width ? config.size_width : $$.getParentWidth();\r\n  };\r\n  ChartInternal.prototype.getCurrentHeight = function () {\r\n      var $$ = this, config = $$.config, h = config.size_height ? config.size_height : $$.getParentHeight();\r\n      return h > 0\r\n          ? h\r\n          : 320 / ($$.hasType('gauge') && !config.gauge_fullCircle ? 2 : 1);\r\n  };\r\n  ChartInternal.prototype.getCurrentPaddingTop = function () {\r\n      var $$ = this, config = $$.config, padding = isValue(config.padding_top) ? config.padding_top : 0;\r\n      if ($$.title && $$.title.node()) {\r\n          padding += $$.getTitlePadding();\r\n      }\r\n      return padding;\r\n  };\r\n  ChartInternal.prototype.getCurrentPaddingBottom = function () {\r\n      var config = this.config;\r\n      return isValue(config.padding_bottom) ? config.padding_bottom : 0;\r\n  };\r\n  ChartInternal.prototype.getCurrentPaddingLeft = function (withoutRecompute) {\r\n      var $$ = this, config = $$.config;\r\n      if (isValue(config.padding_left)) {\r\n          return config.padding_left;\r\n      }\r\n      else if (config.axis_rotated) {\r\n          return !config.axis_x_show || config.axis_x_inner\r\n              ? 1\r\n              : Math.max(ceil10($$.getAxisWidthByAxisId('x', withoutRecompute)), 40);\r\n      }\r\n      else if (!config.axis_y_show || config.axis_y_inner) {\r\n          // && !config.axis_rotated\r\n          return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;\r\n      }\r\n      else {\r\n          return ceil10($$.getAxisWidthByAxisId('y', withoutRecompute));\r\n      }\r\n  };\r\n  ChartInternal.prototype.getCurrentPaddingRight = function () {\r\n      var $$ = this, config = $$.config, padding = 0, defaultPadding = 10, legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;\r\n      if (isValue(config.padding_right)) {\r\n          padding = config.padding_right + 1; // 1 is needed not to hide tick line\r\n      }\r\n      else if (config.axis_rotated) {\r\n          padding = defaultPadding + legendWidthOnRight;\r\n      }\r\n      else if (!config.axis_y2_show || config.axis_y2_inner) {\r\n          // && !config.axis_rotated\r\n          padding =\r\n              2 +\r\n                  legendWidthOnRight +\r\n                  ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);\r\n      }\r\n      else {\r\n          padding = ceil10($$.getAxisWidthByAxisId('y2')) + legendWidthOnRight;\r\n      }\r\n      if ($$.colorScale && $$.colorScale.node()) {\r\n          padding += $$.getColorScalePadding();\r\n      }\r\n      return padding;\r\n  };\r\n  ChartInternal.prototype.getParentRectValue = function (key) {\r\n      var parent = this.selectChart.node(), v;\r\n      while (parent && parent.tagName !== 'BODY') {\r\n          try {\r\n              v = parent.getBoundingClientRect()[key];\r\n          }\r\n          catch (e) {\r\n              if (key === 'width') {\r\n                  // In IE in certain cases getBoundingClientRect\r\n                  // will cause an \"unspecified error\"\r\n                  v = parent.offsetWidth;\r\n              }\r\n          }\r\n          if (v) {\r\n              break;\r\n          }\r\n          parent = parent.parentNode;\r\n      }\r\n      return v;\r\n  };\r\n  ChartInternal.prototype.getParentWidth = function () {\r\n      return this.getParentRectValue('width');\r\n  };\r\n  ChartInternal.prototype.getParentHeight = function () {\r\n      var h = this.selectChart.style('height');\r\n      return h.indexOf('px') > 0 ? +h.replace('px', '') : 0;\r\n  };\r\n  ChartInternal.prototype.getSvgLeft = function (withoutRecompute) {\r\n      var $$ = this, config = $$.config, hasLeftAxisRect = config.axis_rotated || (!config.axis_rotated && !config.axis_y_inner), leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY, leftAxis = $$.main.select('.' + leftAxisClass).node(), svgRect = leftAxis && hasLeftAxisRect\r\n          ? leftAxis.getBoundingClientRect()\r\n          : { right: 0 }, chartRect = $$.selectChart.node().getBoundingClientRect(), hasArc = $$.hasArcType(), svgLeft = svgRect.right -\r\n          chartRect.left -\r\n          (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));\r\n      return svgLeft > 0 ? svgLeft : 0;\r\n  };\r\n  ChartInternal.prototype.getAxisWidthByAxisId = function (id, withoutRecompute) {\r\n      var $$ = this, position = $$.axis.getLabelPositionById(id);\r\n      return ($$.axis.getMaxTickWidth(id, withoutRecompute) + (position.isInner ? 20 : 40));\r\n  };\r\n  ChartInternal.prototype.getHorizontalAxisHeight = function (axisId, isSubchart) {\r\n      var $$ = this, config = $$.config, h = 30;\r\n      if (axisId === 'x' && !(isDefined(isSubchart) && isSubchart ? config.subchart_axis_x_show : config.axis_x_show)) {\r\n          return 8;\r\n      }\r\n      if (axisId === 'x' && config.axis_x_height) {\r\n          return config.axis_x_height;\r\n      }\r\n      if (axisId === 'y' && !config.axis_y_show) {\r\n          return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1;\r\n      }\r\n      if (axisId === 'y2' && !config.axis_y2_show) {\r\n          return $$.rotated_padding_top;\r\n      }\r\n      // Calculate x axis height when tick rotated\r\n      if (axisId === 'x' && !config.axis_rotated && config.axis_x_tick_rotate) {\r\n          h =\r\n              30 +\r\n                  $$.axis.getMaxTickWidth(axisId) *\r\n                      Math.cos((Math.PI * (90 - Math.abs(config.axis_x_tick_rotate))) / 180);\r\n      }\r\n      // Calculate y axis height when tick rotated\r\n      if (axisId === 'y' && config.axis_rotated && config.axis_y_tick_rotate) {\r\n          h =\r\n              30 +\r\n                  $$.axis.getMaxTickWidth(axisId) *\r\n                      Math.cos((Math.PI * (90 - Math.abs(config.axis_y_tick_rotate))) / 180);\r\n      }\r\n      return (h +\r\n          ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) +\r\n          (axisId === 'y2' ? -10 : 0));\r\n  };\n\n  ChartInternal.prototype.initBrush = function (scale) {\r\n      var $$ = this, d3 = $$.d3;\r\n      // TODO: dynamically change brushY/brushX according to axis_rotated.\r\n      $$.brush = ($$.config.axis_rotated ? d3.brushY() : d3.brushX())\r\n          .on('brush', function () {\r\n          var event = d3.event.sourceEvent;\r\n          if (event && event.type === 'zoom') {\r\n              return;\r\n          }\r\n          $$.redrawForBrush();\r\n      })\r\n          .on('end', function () {\r\n          var event = d3.event.sourceEvent;\r\n          if (event && event.type === 'zoom') {\r\n              return;\r\n          }\r\n          if ($$.brush.empty() && event && event.type !== 'end') {\r\n              $$.brush.clear();\r\n          }\r\n      });\r\n      $$.brush.updateExtent = function () {\r\n          var range = this.scale.range(), extent;\r\n          if ($$.config.axis_rotated) {\r\n              extent = [\r\n                  [0, range[0]],\r\n                  [$$.width2, range[1]]\r\n              ];\r\n          }\r\n          else {\r\n              extent = [\r\n                  [range[0], 0],\r\n                  [range[1], $$.height2]\r\n              ];\r\n          }\r\n          this.extent(extent);\r\n          return this;\r\n      };\r\n      $$.brush.updateScale = function (scale) {\r\n          this.scale = scale;\r\n          return this;\r\n      };\r\n      $$.brush.update = function (scale) {\r\n          this.updateScale(scale || $$.subX).updateExtent();\r\n          $$.context.select('.' + CLASS.brush).call(this);\r\n      };\r\n      $$.brush.clear = function () {\r\n          $$.context.select('.' + CLASS.brush).call($$.brush.move, null);\r\n      };\r\n      $$.brush.selection = function () {\r\n          return d3.brushSelection($$.context.select('.' + CLASS.brush).node());\r\n      };\r\n      $$.brush.selectionAsValue = function (selectionAsValue, withTransition) {\r\n          var selection, brush;\r\n          if (selectionAsValue) {\r\n              if ($$.context) {\r\n                  selection = [\r\n                      this.scale(selectionAsValue[0]),\r\n                      this.scale(selectionAsValue[1])\r\n                  ];\r\n                  brush = $$.context.select('.' + CLASS.brush);\r\n                  if (withTransition) {\r\n                      brush = brush.transition();\r\n                  }\r\n                  $$.brush.move(brush, selection);\r\n              }\r\n              return [];\r\n          }\r\n          selection = $$.brush.selection() || [0, 0];\r\n          return [this.scale.invert(selection[0]), this.scale.invert(selection[1])];\r\n      };\r\n      $$.brush.empty = function () {\r\n          var selection = $$.brush.selection();\r\n          return !selection || selection[0] === selection[1];\r\n      };\r\n      return $$.brush.updateScale(scale);\r\n  };\r\n  ChartInternal.prototype.initSubchart = function () {\r\n      var $$ = this, config = $$.config, context = ($$.context = $$.svg\r\n          .append('g')\r\n          .attr('transform', $$.getTranslate('context')));\r\n      // set style\r\n      context.style('visibility', 'visible');\r\n      // Define g for chart area\r\n      context\r\n          .append('g')\r\n          .attr('clip-path', $$.clipPathForSubchart)\r\n          .attr('class', CLASS.chart);\r\n      // Define g for bar chart area\r\n      context\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.chartBars);\r\n      // Define g for line chart area\r\n      context\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.chartLines);\r\n      // Add extent rect for Brush\r\n      context\r\n          .append('g')\r\n          .attr('clip-path', $$.clipPath)\r\n          .attr('class', CLASS.brush);\r\n      // ATTENTION: This must be called AFTER chart added\r\n      // Add Axis\r\n      $$.axes.subx = context\r\n          .append('g')\r\n          .attr('class', CLASS.axisX)\r\n          .attr('transform', $$.getTranslate('subx'))\r\n          .attr('clip-path', config.axis_rotated ? '' : $$.clipPathForXAxis)\r\n          .style('visibility', config.subchart_axis_x_show ? 'visible' : 'hidden');\r\n  };\r\n  ChartInternal.prototype.initSubchartBrush = function () {\r\n      var $$ = this;\r\n      // Add extent rect for Brush\r\n      $$.initBrush($$.subX).updateExtent();\r\n      $$.context.select('.' + CLASS.brush).call($$.brush);\r\n  };\r\n  ChartInternal.prototype.updateTargetsForSubchart = function (targets) {\r\n      var $$ = this, context = $$.context, config = $$.config, contextLineEnter, contextLine, contextBarEnter, contextBar, classChartBar = $$.classChartBar.bind($$), classBars = $$.classBars.bind($$), classChartLine = $$.classChartLine.bind($$), classLines = $$.classLines.bind($$), classAreas = $$.classAreas.bind($$);\r\n      //-- Bar --//\r\n      contextBar = context\r\n          .select('.' + CLASS.chartBars)\r\n          .selectAll('.' + CLASS.chartBar)\r\n          .data(targets);\r\n      contextBarEnter = contextBar\r\n          .enter()\r\n          .append('g')\r\n          .style('opacity', 0);\r\n      contextBarEnter.merge(contextBar).attr('class', classChartBar);\r\n      // Bars for each data\r\n      contextBarEnter.append('g').attr('class', classBars);\r\n      //-- Line --//\r\n      contextLine = context\r\n          .select('.' + CLASS.chartLines)\r\n          .selectAll('.' + CLASS.chartLine)\r\n          .data(targets);\r\n      contextLineEnter = contextLine\r\n          .enter()\r\n          .append('g')\r\n          .style('opacity', 0);\r\n      contextLineEnter.merge(contextLine).attr('class', classChartLine);\r\n      // Lines for each data\r\n      contextLineEnter.append('g').attr('class', classLines);\r\n      // Area\r\n      contextLineEnter.append('g').attr('class', classAreas);\r\n      //-- Brush --//\r\n      context\r\n          .selectAll('.' + CLASS.brush + ' rect')\r\n          .attr(config.axis_rotated ? 'width' : 'height', config.axis_rotated ? $$.width2 : $$.height2);\r\n  };\r\n  ChartInternal.prototype.updateBarForSubchart = function (durationForExit) {\r\n      var $$ = this;\r\n      var contextBar = $$.context\r\n          .selectAll('.' + CLASS.bars)\r\n          .selectAll('.' + CLASS.bar)\r\n          .data($$.barData.bind($$));\r\n      var contextBarEnter = contextBar\r\n          .enter()\r\n          .append('path')\r\n          .attr('class', $$.classBar.bind($$))\r\n          .style('stroke', 'none')\r\n          .style('fill', $$.color);\r\n      contextBar\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      $$.contextBar = contextBarEnter\r\n          .merge(contextBar)\r\n          .style('opacity', $$.initialOpacity.bind($$));\r\n  };\r\n  ChartInternal.prototype.redrawBarForSubchart = function (drawBarOnSub, withTransition, duration) {\r\n      (withTransition\r\n          ? this.contextBar.transition(Math.random().toString()).duration(duration)\r\n          : this.contextBar)\r\n          .attr('d', drawBarOnSub)\r\n          .style('opacity', 1);\r\n  };\r\n  ChartInternal.prototype.updateLineForSubchart = function (durationForExit) {\r\n      var $$ = this;\r\n      var contextLine = $$.context\r\n          .selectAll('.' + CLASS.lines)\r\n          .selectAll('.' + CLASS.line)\r\n          .data($$.lineData.bind($$));\r\n      var contextLineEnter = contextLine\r\n          .enter()\r\n          .append('path')\r\n          .attr('class', $$.classLine.bind($$))\r\n          .style('stroke', $$.color);\r\n      contextLine\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      $$.contextLine = contextLineEnter\r\n          .merge(contextLine)\r\n          .style('opacity', $$.initialOpacity.bind($$));\r\n  };\r\n  ChartInternal.prototype.redrawLineForSubchart = function (drawLineOnSub, withTransition, duration) {\r\n      (withTransition\r\n          ? this.contextLine.transition(Math.random().toString()).duration(duration)\r\n          : this.contextLine)\r\n          .attr('d', drawLineOnSub)\r\n          .style('opacity', 1);\r\n  };\r\n  ChartInternal.prototype.updateAreaForSubchart = function (durationForExit) {\r\n      var $$ = this, d3 = $$.d3;\r\n      var contextArea = $$.context\r\n          .selectAll('.' + CLASS.areas)\r\n          .selectAll('.' + CLASS.area)\r\n          .data($$.lineData.bind($$));\r\n      var contextAreaEnter = contextArea\r\n          .enter()\r\n          .append('path')\r\n          .attr('class', $$.classArea.bind($$))\r\n          .style('fill', $$.color)\r\n          .style('opacity', function () {\r\n          $$.orgAreaOpacity = +d3.select(this).style('opacity');\r\n          return 0;\r\n      });\r\n      contextArea\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      $$.contextArea = contextAreaEnter.merge(contextArea).style('opacity', 0);\r\n  };\r\n  ChartInternal.prototype.redrawAreaForSubchart = function (drawAreaOnSub, withTransition, duration) {\r\n      (withTransition\r\n          ? this.contextArea.transition(Math.random().toString()).duration(duration)\r\n          : this.contextArea)\r\n          .attr('d', drawAreaOnSub)\r\n          .style('fill', this.color)\r\n          .style('opacity', this.orgAreaOpacity);\r\n  };\r\n  ChartInternal.prototype.redrawSubchart = function (withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {\r\n      var $$ = this, d3 = $$.d3, drawAreaOnSub, drawBarOnSub, drawLineOnSub;\r\n      // reflect main chart to extent on subchart if zoomed\r\n      if (d3.event && d3.event.type === 'zoom') {\r\n          $$.brush.selectionAsValue($$.x.orgDomain());\r\n      }\r\n      // update subchart elements if needed\r\n      if (withSubchart) {\r\n          // extent rect\r\n          if (!$$.brush.empty()) {\r\n              $$.brush.selectionAsValue($$.x.orgDomain());\r\n          }\r\n          // setup drawer - MEMO: this must be called after axis updated\r\n          drawAreaOnSub = $$.generateDrawArea(areaIndices, true);\r\n          drawBarOnSub = $$.generateDrawBar(barIndices, true);\r\n          drawLineOnSub = $$.generateDrawLine(lineIndices, true);\r\n          $$.updateBarForSubchart(duration);\r\n          $$.updateLineForSubchart(duration);\r\n          $$.updateAreaForSubchart(duration);\r\n          $$.redrawBarForSubchart(drawBarOnSub, duration, duration);\r\n          $$.redrawLineForSubchart(drawLineOnSub, duration, duration);\r\n          $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);\r\n      }\r\n  };\r\n  ChartInternal.prototype.redrawForBrush = function () {\r\n      var $$ = this, x = $$.x, d3 = $$.d3, s;\r\n      $$.redraw({\r\n          withTransition: false,\r\n          withY: $$.config.zoom_rescale,\r\n          withSubchart: false,\r\n          withUpdateXDomain: true,\r\n          withEventRect: false,\r\n          withDimension: false\r\n      });\r\n      // update zoom transation binded to event rect\r\n      s = d3.event.selection || $$.brush.scale.range();\r\n      $$.main\r\n          .select('.' + CLASS.eventRect)\r\n          .call($$.zoom.transform, d3.zoomIdentity.scale($$.width / (s[1] - s[0])).translate(-s[0], 0));\r\n      $$.config.subchart_onbrush.call($$.api, x.orgDomain());\r\n  };\r\n  ChartInternal.prototype.transformContext = function (withTransition, transitions) {\r\n      var $$ = this, subXAxis;\r\n      if (transitions && transitions.axisSubX) {\r\n          subXAxis = transitions.axisSubX;\r\n      }\r\n      else {\r\n          subXAxis = $$.context.select('.' + CLASS.axisX);\r\n          if (withTransition) {\r\n              subXAxis = subXAxis.transition();\r\n          }\r\n      }\r\n      $$.context.attr('transform', $$.getTranslate('context'));\r\n      subXAxis.attr('transform', $$.getTranslate('subx'));\r\n  };\r\n  ChartInternal.prototype.getDefaultSelection = function () {\r\n      var $$ = this, config = $$.config, selection = isFunction(config.axis_x_selection)\r\n          ? config.axis_x_selection($$.getXDomain($$.data.targets))\r\n          : config.axis_x_selection;\r\n      if ($$.isTimeSeries()) {\r\n          selection = [$$.parseDate(selection[0]), $$.parseDate(selection[1])];\r\n      }\r\n      return selection;\r\n  };\r\n  ChartInternal.prototype.removeSubchart = function () {\r\n      var $$ = this;\r\n      $$.brush = null;\r\n      $$.context.remove();\r\n      $$.context = null;\r\n  };\n\n  ChartInternal.prototype.initText = function () {\r\n      var $$ = this;\r\n      $$.main\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.chartTexts);\r\n      $$.mainText = $$.d3.selectAll([]);\r\n  };\r\n  ChartInternal.prototype.updateTargetsForText = function (targets) {\r\n      var $$ = this, classChartText = $$.classChartText.bind($$), classTexts = $$.classTexts.bind($$), classFocus = $$.classFocus.bind($$);\r\n      var mainText = $$.main\r\n          .select('.' + CLASS.chartTexts)\r\n          .selectAll('.' + CLASS.chartText)\r\n          .data(targets);\r\n      var mainTextEnter = mainText\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', classChartText)\r\n          .style('opacity', 0)\r\n          .style('pointer-events', 'none');\r\n      mainTextEnter.append('g').attr('class', classTexts);\r\n      mainTextEnter.merge(mainText).attr('class', function (d) {\r\n          return classChartText(d) + classFocus(d);\r\n      });\r\n  };\r\n  ChartInternal.prototype.updateText = function (xForText, yForText, durationForExit) {\r\n      var $$ = this, config = $$.config, barOrLineData = $$.barOrLineData.bind($$), classText = $$.classText.bind($$);\r\n      var mainText = $$.main\r\n          .selectAll('.' + CLASS.texts)\r\n          .selectAll('.' + CLASS.text)\r\n          .data(barOrLineData);\r\n      var mainTextEnter = mainText\r\n          .enter()\r\n          .append('text')\r\n          .attr('class', classText)\r\n          .attr('text-anchor', function (d) {\r\n          return config.axis_rotated ? (d.value < 0 ? 'end' : 'start') : 'middle';\r\n      })\r\n          .style('stroke', 'none')\r\n          .attr('x', xForText)\r\n          .attr('y', yForText)\r\n          .style('fill', function (d) {\r\n          return $$.color(d);\r\n      })\r\n          .style('fill-opacity', 0);\r\n      $$.mainText = mainTextEnter.merge(mainText).text(function (d, i, j) {\r\n          return $$.dataLabelFormat(d.id)(d.value, d.id, i, j);\r\n      });\r\n      mainText\r\n          .exit()\r\n          .transition()\r\n          .duration(durationForExit)\r\n          .style('fill-opacity', 0)\r\n          .remove();\r\n  };\r\n  ChartInternal.prototype.redrawText = function (xForText, yForText, forFlow, withTransition, transition) {\r\n      return [\r\n          (withTransition ? this.mainText.transition(transition) : this.mainText)\r\n              .attr('x', xForText)\r\n              .attr('y', yForText)\r\n              .style('fill', this.color)\r\n              .style('fill-opacity', forFlow ? 0 : this.opacityForText.bind(this))\r\n      ];\r\n  };\r\n  ChartInternal.prototype.getTextRect = function (text, cls, element) {\r\n      var dummy = this.d3\r\n          .select('body')\r\n          .append('div')\r\n          .classed('c3', true), svg = dummy\r\n          .append('svg')\r\n          .style('visibility', 'hidden')\r\n          .style('position', 'fixed')\r\n          .style('top', 0)\r\n          .style('left', 0), font = this.d3.select(element).style('font'), rect;\r\n      svg\r\n          .selectAll('.dummy')\r\n          .data([text])\r\n          .enter()\r\n          .append('text')\r\n          .classed(cls ? cls : '', true)\r\n          .style('font', font)\r\n          .text(text)\r\n          .each(function () {\r\n          rect = getBBox(this);\r\n      });\r\n      dummy.remove();\r\n      return rect;\r\n  };\r\n  ChartInternal.prototype.generateXYForText = function (areaIndices, barIndices, lineIndices, forX) {\r\n      var $$ = this, getAreaPoints = $$.generateGetAreaPoints(areaIndices, false), getBarPoints = $$.generateGetBarPoints(barIndices, false), getLinePoints = $$.generateGetLinePoints(lineIndices, false), getter = forX ? $$.getXForText : $$.getYForText;\r\n      return function (d, i) {\r\n          var getPoints = $$.isAreaType(d)\r\n              ? getAreaPoints\r\n              : $$.isBarType(d)\r\n                  ? getBarPoints\r\n                  : getLinePoints;\r\n          return getter.call($$, getPoints(d, i), d, this);\r\n      };\r\n  };\r\n  ChartInternal.prototype.getXForText = function (points, d, textElement) {\r\n      var $$ = this, box = getBBox(textElement), xPos, padding;\r\n      if ($$.config.axis_rotated) {\r\n          padding = $$.isBarType(d) ? 4 : 6;\r\n          xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);\r\n      }\r\n      else {\r\n          xPos = $$.hasType('bar') ? (points[2][0] + points[0][0]) / 2 : points[0][0];\r\n      }\r\n      // show labels regardless of the domain if value is null\r\n      if (d.value === null) {\r\n          if (xPos > $$.width) {\r\n              xPos = $$.width - box.width;\r\n          }\r\n          else if (xPos < 0) {\r\n              xPos = 4;\r\n          }\r\n      }\r\n      return xPos;\r\n  };\r\n  ChartInternal.prototype.getYForText = function (points, d, textElement) {\r\n      var $$ = this, box = getBBox(textElement), yPos;\r\n      if ($$.config.axis_rotated) {\r\n          yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;\r\n      }\r\n      else {\r\n          yPos = points[2][1];\r\n          if (d.value < 0 || (d.value === 0 && !$$.hasPositiveValue)) {\r\n              yPos += box.height;\r\n              if ($$.isBarType(d) && $$.isSafari()) {\r\n                  yPos -= 3;\r\n              }\r\n              else if (!$$.isBarType(d) && $$.isChrome()) {\r\n                  yPos += 3;\r\n              }\r\n          }\r\n          else {\r\n              yPos += $$.isBarType(d) ? -3 : -6;\r\n          }\r\n      }\r\n      // show labels regardless of the domain if value is null\r\n      if (d.value === null && !$$.config.axis_rotated) {\r\n          if (yPos < box.height) {\r\n              yPos = box.height;\r\n          }\r\n          else if (yPos > this.height) {\r\n              yPos = this.height - 4;\r\n          }\r\n      }\r\n      return yPos;\r\n  };\n\n  ChartInternal.prototype.initTitle = function () {\r\n      var $$ = this;\r\n      $$.title = $$.svg\r\n          .append('text')\r\n          .text($$.config.title_text)\r\n          .attr('class', $$.CLASS.title);\r\n  };\r\n  ChartInternal.prototype.redrawTitle = function () {\r\n      var $$ = this;\r\n      $$.title.attr('x', $$.xForTitle.bind($$)).attr('y', $$.yForTitle.bind($$));\r\n  };\r\n  ChartInternal.prototype.xForTitle = function () {\r\n      var $$ = this, config = $$.config, position = config.title_position || 'left', x;\r\n      if (position.indexOf('right') >= 0) {\r\n          x =\r\n              $$.currentWidth -\r\n                  $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width -\r\n                  config.title_padding.right;\r\n      }\r\n      else if (position.indexOf('center') >= 0) {\r\n          x = Math.max(($$.currentWidth -\r\n              $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width) /\r\n              2, 0);\r\n      }\r\n      else {\r\n          // left\r\n          x = config.title_padding.left;\r\n      }\r\n      return x;\r\n  };\r\n  ChartInternal.prototype.yForTitle = function () {\r\n      var $$ = this;\r\n      return ($$.config.title_padding.top +\r\n          $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node())\r\n              .height);\r\n  };\r\n  ChartInternal.prototype.getTitlePadding = function () {\r\n      var $$ = this;\r\n      return $$.yForTitle() + $$.config.title_padding.bottom;\r\n  };\n\n  function powerOfTen(d) {\r\n      return d / Math.pow(10, Math.ceil(Math.log(d) / Math.LN10 - 1e-12)) === 1;\r\n  }\r\n  ChartInternal.prototype.drawColorScale = function () {\r\n      var $$ = this, d3 = $$.d3, config = $$.config, target = $$.data.targets[0], barWidth, barHeight, axis, points, legendAxis, axisScale, inverseScale, height;\r\n      barWidth = !isNaN(config.stanford_scaleWidth)\r\n          ? config.stanford_scaleWidth\r\n          : 20;\r\n      barHeight = 5;\r\n      if (barHeight < 0 || barWidth < 0) {\r\n          throw Error(\"Colorscale's barheight and barwidth must be greater than 0.\");\r\n      }\r\n      height =\r\n          $$.height - config.stanford_padding.bottom - config.stanford_padding.top;\r\n      points = d3.range(config.stanford_padding.bottom, height, barHeight);\r\n      inverseScale = d3\r\n          .scaleSequential(target.colors)\r\n          .domain([points[points.length - 1], points[0]]);\r\n      if ($$.colorScale) {\r\n          $$.colorScale.remove();\r\n      }\r\n      $$.colorScale = $$.svg\r\n          .append('g')\r\n          .attr('width', 50)\r\n          .attr('height', height)\r\n          .attr('class', CLASS.colorScale);\r\n      $$.colorScale\r\n          .append('g')\r\n          .attr('transform', \"translate(0, \" + config.stanford_padding.top + \")\")\r\n          .selectAll('bars')\r\n          .data(points)\r\n          .enter()\r\n          .append('rect')\r\n          .attr('y', function (d, i) { return i * barHeight; })\r\n          .attr('x', 0)\r\n          .attr('width', barWidth)\r\n          .attr('height', barHeight)\r\n          .attr('fill', function (d) {\r\n          return inverseScale(d);\r\n      });\r\n      // Legend Axis\r\n      axisScale = d3\r\n          .scaleLog()\r\n          .domain([target.minEpochs, target.maxEpochs])\r\n          .range([\r\n          points[0] +\r\n              config.stanford_padding.top +\r\n              points[points.length - 1] +\r\n              barHeight -\r\n              1,\r\n          points[0] + config.stanford_padding.top\r\n      ]);\r\n      legendAxis = d3.axisRight(axisScale);\r\n      if (config.stanford_scaleFormat === 'pow10') {\r\n          legendAxis.tickValues([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000]);\r\n      }\r\n      else if (isFunction(config.stanford_scaleFormat)) {\r\n          legendAxis.tickFormat(config.stanford_scaleFormat);\r\n      }\r\n      else {\r\n          legendAxis.tickFormat(d3.format('d'));\r\n      }\r\n      if (isFunction(config.stanford_scaleValues)) {\r\n          legendAxis.tickValues(config.stanford_scaleValues(target.minEpochs, target.maxEpochs));\r\n      }\r\n      // Draw Axis\r\n      axis = $$.colorScale\r\n          .append('g')\r\n          .attr('class', 'legend axis')\r\n          .attr('transform', \"translate(\" + barWidth + \",0)\")\r\n          .call(legendAxis);\r\n      if (config.stanford_scaleFormat === 'pow10') {\r\n          axis\r\n              .selectAll('.tick text')\r\n              .text(null)\r\n              .filter(powerOfTen)\r\n              .text(10)\r\n              .append('tspan')\r\n              .attr('dy', '-.7em') // https://bl.ocks.org/mbostock/6738229\r\n              .text(function (d) {\r\n              return Math.round(Math.log(d) / Math.LN10);\r\n          });\r\n      }\r\n      $$.colorScale.attr('transform', \"translate(\" + ($$.currentWidth - $$.xForColorScale()) + \", 0)\");\r\n  };\r\n  ChartInternal.prototype.xForColorScale = function () {\r\n      var $$ = this;\r\n      return $$.config.stanford_padding.right + getBBox($$.colorScale.node()).width;\r\n  };\r\n  ChartInternal.prototype.getColorScalePadding = function () {\r\n      var $$ = this;\r\n      return $$.xForColorScale() + $$.config.stanford_padding.left + 20;\r\n  };\n\n  ChartInternal.prototype.isStanfordGraphType = function () {\r\n      var $$ = this;\r\n      return $$.config.data_type === 'stanford';\r\n  };\r\n  ChartInternal.prototype.initStanfordData = function () {\r\n      var $$ = this, d3 = $$.d3, config = $$.config, target = $$.data.targets[0], epochs, maxEpochs, minEpochs;\r\n      // Make larger values appear on top\r\n      target.values.sort(compareEpochs);\r\n      // Get array of epochs\r\n      epochs = target.values.map(function (a) { return a.epochs; });\r\n      minEpochs = !isNaN(config.stanford_scaleMin)\r\n          ? config.stanford_scaleMin\r\n          : d3.min(epochs);\r\n      maxEpochs = !isNaN(config.stanford_scaleMax)\r\n          ? config.stanford_scaleMax\r\n          : d3.max(epochs);\r\n      if (minEpochs > maxEpochs) {\r\n          throw Error('Number of minEpochs has to be smaller than maxEpochs');\r\n      }\r\n      target.colors = isFunction(config.stanford_colors)\r\n          ? config.stanford_colors\r\n          : d3.interpolateHslLong(d3.hsl(250, 1, 0.5), d3.hsl(0, 1, 0.5));\r\n      target.colorscale = d3\r\n          .scaleSequentialLog(target.colors)\r\n          .domain([minEpochs, maxEpochs]);\r\n      target.minEpochs = minEpochs;\r\n      target.maxEpochs = maxEpochs;\r\n  };\r\n  ChartInternal.prototype.getStanfordPointColor = function (d) {\r\n      var $$ = this, target = $$.data.targets[0];\r\n      return target.colorscale(d.epochs);\r\n  };\r\n  // http://jsfiddle.net/Xotic750/KtzLq/\r\n  ChartInternal.prototype.getCentroid = function (points) {\r\n      var area = getRegionArea(points);\r\n      var x = 0, y = 0, i, j, f, point1, point2;\r\n      for (i = 0, j = points.length - 1; i < points.length; j = i, i += 1) {\r\n          point1 = points[i];\r\n          point2 = points[j];\r\n          f = point1.x * point2.y - point2.x * point1.y;\r\n          x += (point1.x + point2.x) * f;\r\n          y += (point1.y + point2.y) * f;\r\n      }\r\n      f = area * 6;\r\n      return {\r\n          x: x / f,\r\n          y: y / f\r\n      };\r\n  };\r\n  ChartInternal.prototype.getStanfordTooltipTitle = function (d) {\r\n      var $$ = this, labelX = $$.axis.getLabelText('x'), labelY = $$.axis.getLabelText('y');\r\n      return \"\\n      <tr><th>\" + (labelX ? sanitise(labelX) : 'x') + \"</th><th class='value'>\" + d.x + \"</th></tr>\\n      <tr><th>\" + (labelY ? sanitise(labelY) : 'y') + \"</th><th class='value'>\" + d.value + \"</th></tr>\\n    \";\r\n  };\r\n  ChartInternal.prototype.countEpochsInRegion = function (region) {\r\n      var $$ = this, target = $$.data.targets[0], total, count;\r\n      total = target.values.reduce(function (accumulator, currentValue) { return accumulator + Number(currentValue.epochs); }, 0);\r\n      count = target.values.reduce(function (accumulator, currentValue) {\r\n          if (pointInRegion(currentValue, region)) {\r\n              return accumulator + Number(currentValue.epochs);\r\n          }\r\n          return accumulator;\r\n      }, 0);\r\n      return {\r\n          value: count,\r\n          percentage: count !== 0 ? ((count / total) * 100).toFixed(1) : 0\r\n      };\r\n  };\r\n  var getRegionArea = function (points) {\r\n      // thanks to: https://stackoverflow.com/questions/16282330/find-centerpoint-of-polygon-in-javascript\r\n      var area = 0, i, j, point1, point2;\r\n      for (i = 0, j = points.length - 1; i < points.length; j = i, i += 1) {\r\n          point1 = points[i];\r\n          point2 = points[j];\r\n          area += point1.x * point2.y;\r\n          area -= point1.y * point2.x;\r\n      }\r\n      area /= 2;\r\n      return area;\r\n  };\r\n  var pointInRegion = function (point, region) {\r\n      // thanks to: http://bl.ocks.org/bycoffe/5575904\r\n      // ray-casting algorithm based on\r\n      // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n      var xi, yi, yj, xj, intersect, x = point.x, y = point.value, inside = false;\r\n      for (var i = 0, j = region.length - 1; i < region.length; j = i++) {\r\n          xi = region[i].x;\r\n          yi = region[i].y;\r\n          xj = region[j].x;\r\n          yj = region[j].y;\r\n          intersect = yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\r\n          if (intersect) {\r\n              inside = !inside;\r\n          }\r\n      }\r\n      return inside;\r\n  };\r\n  var compareEpochs = function (a, b) {\r\n      if (a.epochs < b.epochs) {\r\n          return -1;\r\n      }\r\n      if (a.epochs > b.epochs) {\r\n          return 1;\r\n      }\r\n      return 0;\r\n  };\n\n  ChartInternal.prototype.initStanfordElements = function () {\r\n      var $$ = this;\r\n      // Avoid blocking eventRect\r\n      $$.stanfordElements = $$.main\r\n          .select('.' + CLASS.chart)\r\n          .append('g')\r\n          .attr('class', CLASS.stanfordElements);\r\n      $$.stanfordElements.append('g').attr('class', CLASS.stanfordLines);\r\n      $$.stanfordElements.append('g').attr('class', CLASS.stanfordTexts);\r\n      $$.stanfordElements.append('g').attr('class', CLASS.stanfordRegions);\r\n  };\r\n  ChartInternal.prototype.updateStanfordElements = function (duration) {\r\n      var $$ = this, main = $$.main, config = $$.config, stanfordLine, stanfordLineEnter, stanfordRegion, stanfordRegionEnter, stanfordText, stanfordTextEnter, xvCustom = $$.xvCustom.bind($$), yvCustom = $$.yvCustom.bind($$), countPointsInRegion = $$.countEpochsInRegion.bind($$);\r\n      // Stanford-Lines\r\n      stanfordLine = main\r\n          .select('.' + CLASS.stanfordLines)\r\n          .style('shape-rendering', 'geometricprecision')\r\n          .selectAll('.' + CLASS.stanfordLine)\r\n          .data(config.stanford_lines);\r\n      // enter\r\n      stanfordLineEnter = stanfordLine\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', function (d) {\r\n          return CLASS.stanfordLine + (d['class'] ? ' ' + d['class'] : '');\r\n      });\r\n      stanfordLineEnter\r\n          .append('line')\r\n          .attr('x1', function (d) {\r\n          return config.axis_rotated ? yvCustom(d, 'value_y1') : xvCustom(d, 'value_x1');\r\n      })\r\n          .attr('x2', function (d) {\r\n          return config.axis_rotated ? yvCustom(d, 'value_y2') : xvCustom(d, 'value_x2');\r\n      })\r\n          .attr('y1', function (d) {\r\n          return config.axis_rotated ? xvCustom(d, 'value_x1') : yvCustom(d, 'value_y1');\r\n      })\r\n          .attr('y2', function (d) {\r\n          return config.axis_rotated ? xvCustom(d, 'value_x2') : yvCustom(d, 'value_y2');\r\n      })\r\n          .style('opacity', 0);\r\n      // update\r\n      $$.stanfordLines = stanfordLineEnter.merge(stanfordLine);\r\n      $$.stanfordLines\r\n          .select('line')\r\n          .transition()\r\n          .duration(duration)\r\n          .attr('x1', function (d) {\r\n          return config.axis_rotated ? yvCustom(d, 'value_y1') : xvCustom(d, 'value_x1');\r\n      })\r\n          .attr('x2', function (d) {\r\n          return config.axis_rotated ? yvCustom(d, 'value_y2') : xvCustom(d, 'value_x2');\r\n      })\r\n          .attr('y1', function (d) {\r\n          return config.axis_rotated ? xvCustom(d, 'value_x1') : yvCustom(d, 'value_y1');\r\n      })\r\n          .attr('y2', function (d) {\r\n          return config.axis_rotated ? xvCustom(d, 'value_x2') : yvCustom(d, 'value_y2');\r\n      })\r\n          .style('opacity', 1);\r\n      // exit\r\n      stanfordLine\r\n          .exit()\r\n          .transition()\r\n          .duration(duration)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      // Stanford-Text\r\n      stanfordText = main\r\n          .select('.' + CLASS.stanfordTexts)\r\n          .selectAll('.' + CLASS.stanfordText)\r\n          .data(config.stanford_texts);\r\n      // enter\r\n      stanfordTextEnter = stanfordText\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', function (d) {\r\n          return CLASS.stanfordText + (d['class'] ? ' ' + d['class'] : '');\r\n      });\r\n      stanfordTextEnter\r\n          .append('text')\r\n          .attr('x', function (d) { return (config.axis_rotated ? yvCustom(d, 'y') : xvCustom(d, 'x')); })\r\n          .attr('y', function (d) { return (config.axis_rotated ? xvCustom(d, 'x') : yvCustom(d, 'y')); })\r\n          .style('opacity', 0);\r\n      // update\r\n      $$.stanfordTexts = stanfordTextEnter.merge(stanfordText);\r\n      $$.stanfordTexts\r\n          .select('text')\r\n          .transition()\r\n          .duration(duration)\r\n          .attr('x', function (d) { return (config.axis_rotated ? yvCustom(d, 'y') : xvCustom(d, 'x')); })\r\n          .attr('y', function (d) { return (config.axis_rotated ? xvCustom(d, 'x') : yvCustom(d, 'y')); })\r\n          .text(function (d) {\r\n          return d.content;\r\n      })\r\n          .style('opacity', 1);\r\n      // exit\r\n      stanfordText\r\n          .exit()\r\n          .transition()\r\n          .duration(duration)\r\n          .style('opacity', 0)\r\n          .remove();\r\n      // Stanford-Regions\r\n      stanfordRegion = main\r\n          .select('.' + CLASS.stanfordRegions)\r\n          .selectAll('.' + CLASS.stanfordRegion)\r\n          .data(config.stanford_regions);\r\n      // enter\r\n      stanfordRegionEnter = stanfordRegion\r\n          .enter()\r\n          .append('g')\r\n          .attr('class', function (d) {\r\n          return CLASS.stanfordRegion + (d['class'] ? ' ' + d['class'] : '');\r\n      });\r\n      stanfordRegionEnter\r\n          .append('polygon')\r\n          .attr('points', function (d) {\r\n          return d.points\r\n              .map(function (value) {\r\n              return [\r\n                  config.axis_rotated ? yvCustom(value, 'y') : xvCustom(value, 'x'),\r\n                  config.axis_rotated ? xvCustom(value, 'x') : yvCustom(value, 'y')\r\n              ].join(',');\r\n          })\r\n              .join(' ');\r\n      })\r\n          .style('opacity', 0);\r\n      stanfordRegionEnter\r\n          .append('text')\r\n          .attr('x', function (d) { return $$.getCentroid(d.points).x; })\r\n          .attr('y', function (d) { return $$.getCentroid(d.points).y; })\r\n          .style('opacity', 0);\r\n      // update\r\n      $$.stanfordRegions = stanfordRegionEnter.merge(stanfordRegion);\r\n      $$.stanfordRegions\r\n          .select('polygon')\r\n          .transition()\r\n          .duration(duration)\r\n          .attr('points', function (d) {\r\n          return d.points\r\n              .map(function (value) {\r\n              return [\r\n                  config.axis_rotated ? yvCustom(value, 'y') : xvCustom(value, 'x'),\r\n                  config.axis_rotated ? xvCustom(value, 'x') : yvCustom(value, 'y')\r\n              ].join(',');\r\n          })\r\n              .join(' ');\r\n      })\r\n          .style('opacity', function (d) {\r\n          return d.opacity ? d.opacity : 0.2;\r\n      });\r\n      $$.stanfordRegions\r\n          .select('text')\r\n          .transition()\r\n          .duration(duration)\r\n          .attr('x', function (d) {\r\n          return config.axis_rotated\r\n              ? yvCustom($$.getCentroid(d.points), 'y')\r\n              : xvCustom($$.getCentroid(d.points), 'x');\r\n      })\r\n          .attr('y', function (d) {\r\n          return config.axis_rotated\r\n              ? xvCustom($$.getCentroid(d.points), 'x')\r\n              : yvCustom($$.getCentroid(d.points), 'y');\r\n      })\r\n          .text(function (d) {\r\n          if (d.text) {\r\n              var value, percentage, temp;\r\n              if ($$.isStanfordGraphType()) {\r\n                  temp = countPointsInRegion(d.points);\r\n                  value = temp.value;\r\n                  percentage = temp.percentage;\r\n              }\r\n              return d.text(value, percentage);\r\n          }\r\n          return '';\r\n      })\r\n          .attr('text-anchor', 'middle')\r\n          .attr('dominant-baseline', 'middle')\r\n          .style('opacity', 1);\r\n      // exit\r\n      stanfordRegion\r\n          .exit()\r\n          .transition()\r\n          .duration(duration)\r\n          .style('opacity', 0)\r\n          .remove();\r\n  };\n\n  ChartInternal.prototype.initTooltip = function () {\r\n      var $$ = this, config = $$.config, i;\r\n      $$.tooltip = $$.selectChart\r\n          .style('position', 'relative')\r\n          .append('div')\r\n          .attr('class', CLASS.tooltipContainer)\r\n          .style('position', 'absolute')\r\n          .style('pointer-events', 'none')\r\n          .style('display', 'none');\r\n      // Show tooltip if needed\r\n      if (config.tooltip_init_show) {\r\n          if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {\r\n              config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);\r\n              for (i = 0; i < $$.data.targets[0].values.length; i++) {\r\n                  if ($$.data.targets[0].values[i].x - config.tooltip_init_x === 0) {\r\n                      break;\r\n                  }\r\n              }\r\n              config.tooltip_init_x = i;\r\n          }\r\n          $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function (d) {\r\n              return $$.addName(d.values[config.tooltip_init_x]);\r\n          }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));\r\n          $$.tooltip\r\n              .style('top', config.tooltip_init_position.top)\r\n              .style('left', config.tooltip_init_position.left)\r\n              .style('display', 'block');\r\n      }\r\n  };\r\n  ChartInternal.prototype.getTooltipSortFunction = function () {\r\n      var $$ = this, config = $$.config;\r\n      if (config.data_groups.length === 0 || config.tooltip_order !== undefined) {\r\n          // if data are not grouped or if an order is specified\r\n          // for the tooltip values we sort them by their values\r\n          var order = config.tooltip_order;\r\n          if (order === undefined) {\r\n              order = config.data_order;\r\n          }\r\n          var valueOf = function (obj) {\r\n              return obj ? obj.value : null;\r\n          };\r\n          // if data are not grouped, we sort them by their value\r\n          if (isString(order) && order.toLowerCase() === 'asc') {\r\n              return function (a, b) {\r\n                  return valueOf(a) - valueOf(b);\r\n              };\r\n          }\r\n          else if (isString(order) && order.toLowerCase() === 'desc') {\r\n              return function (a, b) {\r\n                  return valueOf(b) - valueOf(a);\r\n              };\r\n          }\r\n          else if (isFunction(order)) {\r\n              // if the function is from data_order we need\r\n              // to wrap the returned function in order to format\r\n              // the sorted value to the expected format\r\n              var sortFunction = order;\r\n              if (config.tooltip_order === undefined) {\r\n                  sortFunction = function (a, b) {\r\n                      return order(a\r\n                          ? {\r\n                              id: a.id,\r\n                              values: [a]\r\n                          }\r\n                          : null, b\r\n                          ? {\r\n                              id: b.id,\r\n                              values: [b]\r\n                          }\r\n                          : null);\r\n                  };\r\n              }\r\n              return sortFunction;\r\n          }\r\n          else if (isArray(order)) {\r\n              return function (a, b) {\r\n                  return order.indexOf(a.id) - order.indexOf(b.id);\r\n              };\r\n          }\r\n      }\r\n      else {\r\n          // if data are grouped, we follow the order of grouped targets\r\n          var ids = $$.orderTargets($$.data.targets).map(function (i) {\r\n              return i.id;\r\n          });\r\n          // if it was either asc or desc we need to invert the order\r\n          // returned by orderTargets\r\n          if ($$.isOrderAsc() || $$.isOrderDesc()) {\r\n              ids = ids.reverse();\r\n          }\r\n          return function (a, b) {\r\n              return ids.indexOf(a.id) - ids.indexOf(b.id);\r\n          };\r\n      }\r\n  };\r\n  ChartInternal.prototype.getTooltipContent = function (d, defaultTitleFormat, defaultValueFormat, color) {\r\n      var $$ = this, config = $$.config, titleFormat = config.tooltip_format_title || defaultTitleFormat, nameFormat = config.tooltip_format_name ||\r\n          function (name) {\r\n              return name;\r\n          }, text, i, title, value, name, bgcolor;\r\n      var valueFormat = config.tooltip_format_value;\r\n      if (!valueFormat) {\r\n          valueFormat = $$.isTargetNormalized(d.id)\r\n              ? function (v, ratio) { return (ratio * 100).toFixed(2) + \"%\"; }\r\n              : defaultValueFormat;\r\n      }\r\n      var tooltipSortFunction = this.getTooltipSortFunction();\r\n      if (tooltipSortFunction) {\r\n          d.sort(tooltipSortFunction);\r\n      }\r\n      for (i = 0; i < d.length; i++) {\r\n          if (!(d[i] && (d[i].value || d[i].value === 0))) {\r\n              continue;\r\n          }\r\n          if ($$.isStanfordGraphType()) {\r\n              // Custom tooltip for stanford plots\r\n              if (!text) {\r\n                  title = $$.getStanfordTooltipTitle(d[i]);\r\n                  text = \"<table class='\" + $$.CLASS.tooltip + \"'>\" + title;\r\n              }\r\n              bgcolor = $$.getStanfordPointColor(d[i]);\r\n              name = sanitise(config.data_epochs); // Epochs key name\r\n              value = d[i].epochs;\r\n          }\r\n          else {\r\n              // Regular tooltip\r\n              if (!text) {\r\n                  title = sanitise(titleFormat ? titleFormat(d[i].x, d[i].index) : d[i].x);\r\n                  text =\r\n                      \"<table class='\" +\r\n                          $$.CLASS.tooltip +\r\n                          \"'>\" +\r\n                          (title || title === 0\r\n                              ? \"<tr><th colspan='2'>\" + title + '</th></tr>'\r\n                              : '');\r\n              }\r\n              value = sanitise(valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index, d));\r\n              if (value !== undefined) {\r\n                  // Skip elements when their name is set to null\r\n                  if (d[i].name === null) {\r\n                      continue;\r\n                  }\r\n                  name = sanitise(nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index));\r\n                  bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);\r\n              }\r\n          }\r\n          if (value !== undefined) {\r\n              text +=\r\n                  \"<tr class='\" +\r\n                      $$.CLASS.tooltipName +\r\n                      '-' +\r\n                      $$.getTargetSelectorSuffix(d[i].id) +\r\n                      \"'>\";\r\n              text +=\r\n                  \"<td class='name'><span style='background-color:\" +\r\n                      bgcolor +\r\n                      \"'></span>\" +\r\n                      name +\r\n                      '</td>';\r\n              text += \"<td class='value'>\" + value + '</td>';\r\n              text += '</tr>';\r\n          }\r\n      }\r\n      return text + '</table>';\r\n  };\r\n  ChartInternal.prototype.tooltipPosition = function (dataToShow, tWidth, tHeight, element) {\r\n      var $$ = this, config = $$.config, d3 = $$.d3;\r\n      var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;\r\n      var forArc = $$.hasArcType(), mouse = d3.mouse(element);\r\n      // Determin tooltip position\r\n      if (forArc) {\r\n          tooltipLeft =\r\n              ($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2 + mouse[0];\r\n          tooltipTop =\r\n              ($$.hasType('gauge') ? $$.height : $$.height / 2) + mouse[1] + 20;\r\n      }\r\n      else {\r\n          svgLeft = $$.getSvgLeft(true);\r\n          if (config.axis_rotated) {\r\n              tooltipLeft = svgLeft + mouse[0] + 100;\r\n              tooltipRight = tooltipLeft + tWidth;\r\n              chartRight = $$.currentWidth - $$.getCurrentPaddingRight();\r\n              tooltipTop = $$.x(dataToShow[0].x) + 20;\r\n          }\r\n          else {\r\n              tooltipLeft =\r\n                  svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;\r\n              tooltipRight = tooltipLeft + tWidth;\r\n              chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();\r\n              tooltipTop = mouse[1] + 15;\r\n          }\r\n          if (tooltipRight > chartRight) {\r\n              // 20 is needed for Firefox to keep tooltip width\r\n              tooltipLeft -= tooltipRight - chartRight + 20;\r\n          }\r\n          if (tooltipTop + tHeight > $$.currentHeight) {\r\n              tooltipTop -= tHeight + 30;\r\n          }\r\n      }\r\n      if (tooltipTop < 0) {\r\n          tooltipTop = 0;\r\n      }\r\n      return {\r\n          top: tooltipTop,\r\n          left: tooltipLeft\r\n      };\r\n  };\r\n  ChartInternal.prototype.showTooltip = function (selectedData, element) {\r\n      var $$ = this, config = $$.config;\r\n      var tWidth, tHeight, position;\r\n      var forArc = $$.hasArcType(), dataToShow = selectedData.filter(function (d) {\r\n          return d && isValue(d.value);\r\n      }), positionFunction = config.tooltip_position || ChartInternal.prototype.tooltipPosition;\r\n      if (dataToShow.length === 0 || !config.tooltip_show) {\r\n          $$.hideTooltip();\r\n          return;\r\n      }\r\n      $$.tooltip\r\n          .html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color))\r\n          .style('display', 'block');\r\n      // Get tooltip dimensions\r\n      tWidth = $$.tooltip.property('offsetWidth');\r\n      tHeight = $$.tooltip.property('offsetHeight');\r\n      position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);\r\n      // Set tooltip\r\n      $$.tooltip\r\n          .style('top', position.top + 'px')\r\n          .style('left', position.left + 'px');\r\n  };\r\n  ChartInternal.prototype.hideTooltip = function () {\r\n      this.tooltip.style('display', 'none');\r\n  };\n\n  ChartInternal.prototype.setTargetType = function (targetIds, type) {\r\n      var $$ = this, config = $$.config;\r\n      $$.mapToTargetIds(targetIds).forEach(function (id) {\r\n          $$.withoutFadeIn[id] = type === config.data_types[id];\r\n          config.data_types[id] = type;\r\n      });\r\n      if (!targetIds) {\r\n          config.data_type = type;\r\n      }\r\n  };\r\n  ChartInternal.prototype.hasType = function (type, targets) {\r\n      var $$ = this, types = $$.config.data_types, has = false;\r\n      targets = targets || $$.data.targets;\r\n      if (targets && targets.length) {\r\n          targets.forEach(function (target) {\r\n              var t = types[target.id];\r\n              if ((t && t.indexOf(type) >= 0) || (!t && type === 'line')) {\r\n                  has = true;\r\n              }\r\n          });\r\n      }\r\n      else if (Object.keys(types).length) {\r\n          Object.keys(types).forEach(function (id) {\r\n              if (types[id] === type) {\r\n                  has = true;\r\n              }\r\n          });\r\n      }\r\n      else {\r\n          has = $$.config.data_type === type;\r\n      }\r\n      return has;\r\n  };\r\n  ChartInternal.prototype.hasArcType = function (targets) {\r\n      return (this.hasType('pie', targets) ||\r\n          this.hasType('donut', targets) ||\r\n          this.hasType('gauge', targets));\r\n  };\r\n  ChartInternal.prototype.isLineType = function (d) {\r\n      var config = this.config, id = isString(d) ? d : d.id;\r\n      return (!config.data_types[id] ||\r\n          ['line', 'spline', 'area', 'area-spline', 'step', 'area-step'].indexOf(config.data_types[id]) >= 0);\r\n  };\r\n  ChartInternal.prototype.isStepType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return ['step', 'area-step'].indexOf(this.config.data_types[id]) >= 0;\r\n  };\r\n  ChartInternal.prototype.isSplineType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return ['spline', 'area-spline'].indexOf(this.config.data_types[id]) >= 0;\r\n  };\r\n  ChartInternal.prototype.isAreaType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return (['area', 'area-spline', 'area-step'].indexOf(this.config.data_types[id]) >=\r\n          0);\r\n  };\r\n  ChartInternal.prototype.isBarType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return this.config.data_types[id] === 'bar';\r\n  };\r\n  ChartInternal.prototype.isScatterType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return this.config.data_types[id] === 'scatter';\r\n  };\r\n  ChartInternal.prototype.isStanfordType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return this.config.data_types[id] === 'stanford';\r\n  };\r\n  ChartInternal.prototype.isPieType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return this.config.data_types[id] === 'pie';\r\n  };\r\n  ChartInternal.prototype.isGaugeType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return this.config.data_types[id] === 'gauge';\r\n  };\r\n  ChartInternal.prototype.isDonutType = function (d) {\r\n      var id = isString(d) ? d : d.id;\r\n      return this.config.data_types[id] === 'donut';\r\n  };\r\n  ChartInternal.prototype.isArcType = function (d) {\r\n      return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);\r\n  };\r\n  ChartInternal.prototype.lineData = function (d) {\r\n      return this.isLineType(d) ? [d] : [];\r\n  };\r\n  ChartInternal.prototype.arcData = function (d) {\r\n      return this.isArcType(d.data) ? [d] : [];\r\n  };\r\n  /* not used\r\n   function scatterData(d) {\r\n   return isScatterType(d) ? d.values : [];\r\n   }\r\n   */\r\n  ChartInternal.prototype.barData = function (d) {\r\n      return this.isBarType(d) ? d.values : [];\r\n  };\r\n  ChartInternal.prototype.lineOrScatterOrStanfordData = function (d) {\r\n      return this.isLineType(d) || this.isScatterType(d) || this.isStanfordType(d)\r\n          ? d.values\r\n          : [];\r\n  };\r\n  ChartInternal.prototype.barOrLineData = function (d) {\r\n      return this.isBarType(d) || this.isLineType(d) ? d.values : [];\r\n  };\n\n  ChartInternal.prototype.isSafari = function () {\r\n      var ua = window.navigator.userAgent;\r\n      return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;\r\n  };\r\n  ChartInternal.prototype.isChrome = function () {\r\n      var ua = window.navigator.userAgent;\r\n      return ua.indexOf('Chrome') >= 0;\r\n  };\n\n  ChartInternal.prototype.initZoom = function () {\r\n      var $$ = this, d3 = $$.d3, config = $$.config, startEvent;\r\n      $$.zoom = d3\r\n          .zoom()\r\n          .on('start', function () {\r\n          if (config.zoom_type !== 'scroll') {\r\n              return;\r\n          }\r\n          var e = d3.event.sourceEvent;\r\n          if (e && e.type === 'brush') {\r\n              return;\r\n          }\r\n          startEvent = e;\r\n          config.zoom_onzoomstart.call($$.api, e);\r\n      })\r\n          .on('zoom', function () {\r\n          if (config.zoom_type !== 'scroll') {\r\n              return;\r\n          }\r\n          var e = d3.event.sourceEvent;\r\n          if (e && e.type === 'brush') {\r\n              return;\r\n          }\r\n          $$.redrawForZoom();\r\n          config.zoom_onzoom.call($$.api, $$.x.orgDomain());\r\n      })\r\n          .on('end', function () {\r\n          if (config.zoom_type !== 'scroll') {\r\n              return;\r\n          }\r\n          var e = d3.event.sourceEvent;\r\n          if (e && e.type === 'brush') {\r\n              return;\r\n          }\r\n          // if click, do nothing. otherwise, click interaction will be canceled.\r\n          if (e &&\r\n              startEvent.clientX === e.clientX &&\r\n              startEvent.clientY === e.clientY) {\r\n              return;\r\n          }\r\n          config.zoom_onzoomend.call($$.api, $$.x.orgDomain());\r\n      });\r\n      $$.zoom.updateDomain = function () {\r\n          if (d3.event && d3.event.transform) {\r\n              if (config.axis_rotated && config.zoom_type === 'scroll' && d3.event.sourceEvent.type === 'mousemove') {\r\n                  // we're moving the mouse in a rotated chart with zoom = \"scroll\", so we need rescaleY (i.e. vertical)\r\n                  $$.x.domain(d3.event.transform.rescaleY($$.subX).domain());\r\n              }\r\n              else {\r\n                  $$.x.domain(d3.event.transform.rescaleX($$.subX).domain());\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      $$.zoom.updateExtent = function () {\r\n          this.scaleExtent([1, Infinity])\r\n              .translateExtent([\r\n              [0, 0],\r\n              [$$.width, $$.height]\r\n          ])\r\n              .extent([\r\n              [0, 0],\r\n              [$$.width, $$.height]\r\n          ]);\r\n          return this;\r\n      };\r\n      $$.zoom.update = function () {\r\n          return this.updateExtent().updateDomain();\r\n      };\r\n      return $$.zoom.updateExtent();\r\n  };\r\n  ChartInternal.prototype.zoomTransform = function (range) {\r\n      var $$ = this, s = [$$.x(range[0]), $$.x(range[1])];\r\n      return $$.d3.zoomIdentity.scale($$.width / (s[1] - s[0])).translate(-s[0], 0);\r\n  };\r\n  ChartInternal.prototype.initDragZoom = function () {\r\n      var $$ = this;\r\n      var d3 = $$.d3;\r\n      var config = $$.config;\r\n      var context = ($$.context = $$.svg);\r\n      var brushXPos = $$.margin.left + 20.5;\r\n      var brushYPos = $$.margin.top + 0.5;\r\n      if (!(config.zoom_type === 'drag' && config.zoom_enabled)) {\r\n          return;\r\n      }\r\n      var getZoomedDomain = function (selection) {\r\n          return selection && selection.map(function (x) { return $$.x.invert(x); });\r\n      };\r\n      var brush = ($$.dragZoomBrush = d3\r\n          .brushX()\r\n          .on('start', function () {\r\n          $$.api.unzoom();\r\n          $$.svg.select('.' + CLASS.dragZoom).classed('disabled', false);\r\n          config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);\r\n      })\r\n          .on('brush', function () {\r\n          config.zoom_onzoom.call($$.api, getZoomedDomain(d3.event.selection));\r\n      })\r\n          .on('end', function () {\r\n          if (d3.event.selection == null) {\r\n              return;\r\n          }\r\n          var zoomedDomain = getZoomedDomain(d3.event.selection);\r\n          if (!config.zoom_disableDefaultBehavior) {\r\n              $$.api.zoom(zoomedDomain);\r\n          }\r\n          $$.svg.select('.' + CLASS.dragZoom).classed('disabled', true);\r\n          config.zoom_onzoomend.call($$.api, zoomedDomain);\r\n      }));\r\n      context\r\n          .append('g')\r\n          .classed(CLASS.dragZoom, true)\r\n          .attr('clip-path', $$.clipPath)\r\n          .attr('transform', 'translate(' + brushXPos + ',' + brushYPos + ')')\r\n          .call(brush);\r\n  };\r\n  ChartInternal.prototype.getZoomDomain = function () {\r\n      var $$ = this, config = $$.config, d3 = $$.d3, min = d3.min([$$.orgXDomain[0], config.zoom_x_min]), max = d3.max([$$.orgXDomain[1], config.zoom_x_max]);\r\n      return [min, max];\r\n  };\r\n  ChartInternal.prototype.redrawForZoom = function () {\r\n      var $$ = this, d3 = $$.d3, config = $$.config, zoom = $$.zoom, x = $$.x;\r\n      if (!config.zoom_enabled) {\r\n          return;\r\n      }\r\n      if ($$.filterTargetsToShow($$.data.targets).length === 0) {\r\n          return;\r\n      }\r\n      zoom.update();\r\n      if (config.zoom_disableDefaultBehavior) {\r\n          return;\r\n      }\r\n      if ($$.isCategorized() && x.orgDomain()[0] === $$.orgXDomain[0]) {\r\n          x.domain([$$.orgXDomain[0] - 1e-10, x.orgDomain()[1]]);\r\n      }\r\n      $$.redraw({\r\n          withTransition: false,\r\n          withY: config.zoom_rescale,\r\n          withSubchart: false,\r\n          withEventRect: false,\r\n          withDimension: false\r\n      });\r\n      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'mousemove') {\r\n          $$.cancelClick = true;\r\n      }\r\n  };\n\n  return c3;\n\n})));\n\n\n//# sourceURL=webpack:///./node_modules/c3/c3.js?");

/***/ }),

/***/ "./wwwroot/vendor/libs/c3/c3.js":
/*!**************************************!*\
  !*** ./wwwroot/vendor/libs/c3/c3.js ***!
  \**************************************/
/*! exports provided: c3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var c3_c3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! c3/c3.js */ \"./node_modules/c3/c3.js\");\n/* harmony import */ var c3_c3_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(c3_c3_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, \"c3\", function() { return c3_c3_js__WEBPACK_IMPORTED_MODULE_0__; });\n\n\n\n//# sourceURL=webpack:///./wwwroot/vendor/libs/c3/c3.js?");

/***/ }),

/***/ "d3":
/*!*********************!*\
  !*** external "d3" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function() { module.exports = window[\"d3\"]; }());\n\n//# sourceURL=webpack:///external_%22d3%22?");

/***/ })

/******/ })));